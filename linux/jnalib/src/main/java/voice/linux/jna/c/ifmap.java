package voice.linux.jna.c;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * Device mapping structure. I'd just gone off and designed a<br>
 * beautiful scheme using only loadable modules with arguments for<br>
 * driver options and along come the PCMCIA people 8)<br>
 * Ah well. The get() side of this is good for WDSETUP, and it'll be<br>
 * handy for debugging things. The set side is fine for now and being<br>
 * very small might be worth keeping for clean configuration.<br>
 * <i>native declaration : net\if.h:109</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("c") 
public class ifmap extends StructObject {
	static {
		BridJ.register();
	}
	@Field(0) 
	public long mem_start() {
		return this.io.getLongField(this, 0);
	}
	@Field(0) 
	public ifmap mem_start(long mem_start) {
		this.io.setLongField(this, 0, mem_start);
		return this;
	}
	@Field(1) 
	public long mem_end() {
		return this.io.getLongField(this, 1);
	}
	@Field(1) 
	public ifmap mem_end(long mem_end) {
		this.io.setLongField(this, 1, mem_end);
		return this;
	}
	@Field(2) 
	public short base_addr() {
		return this.io.getShortField(this, 2);
	}
	@Field(2) 
	public ifmap base_addr(short base_addr) {
		this.io.setShortField(this, 2, base_addr);
		return this;
	}
	@Field(3) 
	public byte irq() {
		return this.io.getByteField(this, 3);
	}
	@Field(3) 
	public ifmap irq(byte irq) {
		this.io.setByteField(this, 3, irq);
		return this;
	}
	@Field(4) 
	public byte dma() {
		return this.io.getByteField(this, 4);
	}
	@Field(4) 
	public ifmap dma(byte dma) {
		this.io.setByteField(this, 4, dma);
		return this;
	}
	@Field(5) 
	public byte port() {
		return this.io.getByteField(this, 5);
	}
	@Field(5) 
	public ifmap port(byte port) {
		this.io.setByteField(this, 5, port);
		return this;
	}
	public ifmap() {
		super();
	}
	public ifmap(Pointer pointer) {
		super(pointer);
	}
}
