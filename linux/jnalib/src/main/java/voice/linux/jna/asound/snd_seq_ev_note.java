package voice.linux.jna.asound;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ..\voice\local\headers\\usr\include\alsa\seq_event.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class snd_seq_ev_note extends Structure {
	/** < channel number */
	public byte channel;
	/** < note */
	public byte note;
	/** < velocity */
	public byte velocity;
	/** < note-off velocity; only for #SND_SEQ_EVENT_NOTE */
	public byte off_velocity;
	/** < duration until note-off; only for #SND_SEQ_EVENT_NOTE */
	public int duration;
	public snd_seq_ev_note() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("channel", "note", "velocity", "off_velocity", "duration");
	}
	/**
	 * @param channel < channel number<br>
	 * @param note < note<br>
	 * @param velocity < velocity<br>
	 * @param off_velocity < note-off velocity; only for #SND_SEQ_EVENT_NOTE<br>
	 * @param duration < duration until note-off; only for #SND_SEQ_EVENT_NOTE
	 */
	public snd_seq_ev_note(byte channel, byte note, byte velocity, byte off_velocity, int duration) {
		super();
		this.channel = channel;
		this.note = note;
		this.velocity = velocity;
		this.off_velocity = off_velocity;
		this.duration = duration;
	}
	public snd_seq_ev_note(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends snd_seq_ev_note implements Structure.ByReference {
		
	};
	public static class ByValue extends snd_seq_ev_note implements Structure.ByValue {
		
	};
}
