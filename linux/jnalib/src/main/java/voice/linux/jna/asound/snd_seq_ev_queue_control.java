package voice.linux.jna.asound;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ..\voice\local\headers\\usr\include\alsa\seq_event.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class snd_seq_ev_queue_control extends Structure {
	/** < affected queue */
	public byte queue;
	/**
	 * < reserved<br>
	 * C type : unsigned char[3]
	 */
	public byte[] unused = new byte[3];
	/** C type : param_union */
	public param_union param;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\alsa\seq_event.h:284</i> */
	public static class param_union extends Union {
		/** < affected value (e.g. tempo) */
		public int value;
		/**
		 * < time<br>
		 * C type : snd_seq_timestamp_t
		 */
		public snd_seq_timestamp time;
		/** < sync position */
		public int position;
		/**
		 * < queue skew<br>
		 * C type : snd_seq_queue_skew_t
		 */
		public snd_seq_queue_skew skew;
		/**
		 * < any data<br>
		 * C type : unsigned int[2]
		 */
		public int[] d32 = new int[2];
		/**
		 * < any data<br>
		 * C type : unsigned char[8]
		 */
		public byte[] d8 = new byte[8];
		public param_union() {
			super();
		}
		/** @param value_or_position < affected value (e.g. tempo), or < sync position */
		public param_union(int value_or_position) {
			super();
			this.position = this.value = value_or_position;
			setType(Integer.TYPE);
		}
		/**
		 * @param time < time<br>
		 * C type : snd_seq_timestamp_t
		 */
		public param_union(snd_seq_timestamp time) {
			super();
			this.time = time;
			setType(snd_seq_timestamp.class);
		}
		/**
		 * @param skew < queue skew<br>
		 * C type : snd_seq_queue_skew_t
		 */
		public param_union(snd_seq_queue_skew skew) {
			super();
			this.skew = skew;
			setType(snd_seq_queue_skew.class);
		}
		/**
		 * @param d32 < any data<br>
		 * C type : unsigned int[2]
		 */
		public param_union(int d32[]) {
			super();
			if ((d32.length != this.d32.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.d32 = d32;
			setType(int[].class);
		}
		/**
		 * @param d8 < any data<br>
		 * C type : unsigned char[8]
		 */
		public param_union(byte d8[]) {
			super();
			if ((d8.length != this.d8.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.d8 = d8;
			setType(byte[].class);
		}
		public param_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends param_union implements Structure.ByReference {
			
		};
		public static class ByValue extends param_union implements Structure.ByValue {
			
		};
	};
	public snd_seq_ev_queue_control() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("queue", "unused", "param");
	}
	/**
	 * @param queue < affected queue<br>
	 * @param unused < reserved<br>
	 * C type : unsigned char[3]<br>
	 * @param param C type : param_union
	 */
	public snd_seq_ev_queue_control(byte queue, byte unused[], param_union param) {
		super();
		this.queue = queue;
		if ((unused.length != this.unused.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.unused = unused;
		this.param = param;
	}
	public snd_seq_ev_queue_control(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends snd_seq_ev_queue_control implements Structure.ByReference {
		
	};
	public static class ByValue extends snd_seq_ev_queue_control implements Structure.ByValue {
		
	};
}
