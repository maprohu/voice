package voice.linux.jna.c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import voice.linux.jna.c.CLibrary.timespec;
/**
 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h:95</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class stat64 extends Structure {
	/**
	 * Device.<br>
	 * C type : __dev_t
	 */
	public long st_dev;
	public int __pad1;
	/**
	 * 32bit file serial number.<br>
	 * C type : __ino_t
	 */
	public long __st_ino;
	/**
	 * File mode.<br>
	 * C type : __mode_t
	 */
	public int st_mode;
	/**
	 * Link count.<br>
	 * C type : __nlink_t
	 */
	public int st_nlink;
	/**
	 * User ID of the file's owner.<br>
	 * C type : __uid_t
	 */
	public int st_uid;
	/**
	 * Group ID of the file's group.<br>
	 * C type : __gid_t
	 */
	public int st_gid;
	/**
	 * Device number, if device.<br>
	 * C type : __dev_t
	 */
	public long st_rdev;
	public int __pad2;
	/**
	 * Size of file, in bytes.<br>
	 * C type : __off64_t
	 */
	public long st_size;
	/**
	 * Optimal block size for I/O.<br>
	 * C type : __blksize_t
	 */
	public long st_blksize;
	/**
	 * Number 512-byte blocks allocated.<br>
	 * C type : __blkcnt64_t
	 */
	public long st_blocks;
	/**
	 * Time of last access.<br>
	 * C type : timespec
	 */
	public timespec st_atim;
	/**
	 * Time of last modification.<br>
	 * C type : timespec
	 */
	public timespec st_mtim;
	/**
	 * Time of last status change.<br>
	 * C type : timespec
	 */
	public timespec st_ctim;
	/**
	 * File serial number.<br>
	 * C type : __ino64_t
	 */
	public long st_ino;
	public stat64() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("st_dev", "__pad1", "__st_ino", "st_mode", "st_nlink", "st_uid", "st_gid", "st_rdev", "__pad2", "st_size", "st_blksize", "st_blocks", "st_atim", "st_mtim", "st_ctim", "st_ino");
	}
	public stat64(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends stat64 implements Structure.ByReference {
		
	};
	public static class ByValue extends stat64 implements Structure.ByValue {
		
	};
}
