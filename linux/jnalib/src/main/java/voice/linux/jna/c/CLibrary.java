package voice.linux.jna.c;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;
import voice.linux.jna.__locale_struct;
/**
 * JNA Wrapper for library <b>c</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = (com.sun.jna.Platform.isWindows() ? "msvcrt" : "c");
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(CLibrary.JNA_LIBRARY_NAME);
	public static final CLibrary INSTANCE = (CLibrary)Native.loadLibrary(CLibrary.JNA_LIBRARY_NAME, CLibrary.class);
	public static final int _PC_LINK_MAX = 0;
	public static final int _PC_MAX_CANON = 1;
	public static final int _PC_MAX_INPUT = 2;
	public static final int _PC_NAME_MAX = 3;
	public static final int _PC_PATH_MAX = 4;
	public static final int _PC_PIPE_BUF = 5;
	public static final int _PC_CHOWN_RESTRICTED = 6;
	public static final int _PC_NO_TRUNC = 7;
	public static final int _PC_VDISABLE = 8;
	public static final int _PC_SYNC_IO = 9;
	public static final int _PC_ASYNC_IO = 10;
	public static final int _PC_PRIO_IO = 11;
	public static final int _PC_SOCK_MAXBUF = 12;
	public static final int _PC_FILESIZEBITS = 13;
	public static final int _PC_REC_INCR_XFER_SIZE = 14;
	public static final int _PC_REC_MAX_XFER_SIZE = 15;
	public static final int _PC_REC_MIN_XFER_SIZE = 16;
	public static final int _PC_REC_XFER_ALIGN = 17;
	public static final int _PC_ALLOC_SIZE_MIN = 18;
	public static final int _PC_SYMLINK_MAX = 19;
	public static final int _PC_2_SYMLINKS = 20;
	public static final int _SC_ARG_MAX = 0;
	public static final int _SC_CHILD_MAX = 1;
	public static final int _SC_CLK_TCK = 2;
	public static final int _SC_NGROUPS_MAX = 3;
	public static final int _SC_OPEN_MAX = 4;
	public static final int _SC_STREAM_MAX = 5;
	public static final int _SC_TZNAME_MAX = 6;
	public static final int _SC_JOB_CONTROL = 7;
	public static final int _SC_SAVED_IDS = 8;
	public static final int _SC_REALTIME_SIGNALS = 9;
	public static final int _SC_PRIORITY_SCHEDULING = 10;
	public static final int _SC_TIMERS = 11;
	public static final int _SC_ASYNCHRONOUS_IO = 12;
	public static final int _SC_PRIORITIZED_IO = 13;
	public static final int _SC_SYNCHRONIZED_IO = 14;
	public static final int _SC_FSYNC = 15;
	public static final int _SC_MAPPED_FILES = 16;
	public static final int _SC_MEMLOCK = 17;
	public static final int _SC_MEMLOCK_RANGE = 18;
	public static final int _SC_MEMORY_PROTECTION = 19;
	public static final int _SC_MESSAGE_PASSING = 20;
	public static final int _SC_SEMAPHORES = 21;
	public static final int _SC_SHARED_MEMORY_OBJECTS = 22;
	public static final int _SC_AIO_LISTIO_MAX = 23;
	public static final int _SC_AIO_MAX = 24;
	public static final int _SC_AIO_PRIO_DELTA_MAX = 25;
	public static final int _SC_DELAYTIMER_MAX = 26;
	public static final int _SC_MQ_OPEN_MAX = 27;
	public static final int _SC_MQ_PRIO_MAX = 28;
	public static final int _SC_VERSION = 29;
	public static final int _SC_PAGESIZE = 30;
	public static final int _SC_RTSIG_MAX = 31;
	public static final int _SC_SEM_NSEMS_MAX = 32;
	public static final int _SC_SEM_VALUE_MAX = 33;
	public static final int _SC_SIGQUEUE_MAX = 34;
	public static final int _SC_TIMER_MAX = 35;
	public static final int _SC_BC_BASE_MAX = 36;
	public static final int _SC_BC_DIM_MAX = 37;
	public static final int _SC_BC_SCALE_MAX = 38;
	public static final int _SC_BC_STRING_MAX = 39;
	public static final int _SC_COLL_WEIGHTS_MAX = 40;
	public static final int _SC_EQUIV_CLASS_MAX = 41;
	public static final int _SC_EXPR_NEST_MAX = 42;
	public static final int _SC_LINE_MAX = 43;
	public static final int _SC_RE_DUP_MAX = 44;
	public static final int _SC_CHARCLASS_NAME_MAX = 45;
	public static final int _SC_2_VERSION = 46;
	public static final int _SC_2_C_BIND = 47;
	public static final int _SC_2_C_DEV = 48;
	public static final int _SC_2_FORT_DEV = 49;
	public static final int _SC_2_FORT_RUN = 50;
	public static final int _SC_2_SW_DEV = 51;
	public static final int _SC_2_LOCALEDEF = 52;
	public static final int _SC_PII = 53;
	public static final int _SC_PII_XTI = 54;
	public static final int _SC_PII_SOCKET = 55;
	public static final int _SC_PII_INTERNET = 56;
	public static final int _SC_PII_OSI = 57;
	public static final int _SC_POLL = 58;
	public static final int _SC_SELECT = 59;
	public static final int _SC_UIO_MAXIOV = 60;
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:201</i><br>
	 * _SC_IOV_MAX = _SC_UIO_MAXIOV
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:203</i><br>
	 * _SC_PII_INTERNET_STREAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:205</i><br>
	 * _SC_PII_INTERNET_DGRAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:207</i><br>
	 * _SC_PII_OSI_COTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:209</i><br>
	 * _SC_PII_OSI_CLTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:211</i><br>
	 * _SC_PII_OSI_M
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:213</i><br>
	 * _SC_T_IOV_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:217</i><br>
	 * _SC_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:219</i><br>
	 * _SC_THREAD_SAFE_FUNCTIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:221</i><br>
	 * _SC_GETGR_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:223</i><br>
	 * _SC_GETPW_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:225</i><br>
	 * _SC_LOGIN_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:227</i><br>
	 * _SC_TTY_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:229</i><br>
	 * _SC_THREAD_DESTRUCTOR_ITERATIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:231</i><br>
	 * _SC_THREAD_KEYS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:233</i><br>
	 * _SC_THREAD_STACK_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:235</i><br>
	 * _SC_THREAD_THREADS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:237</i><br>
	 * _SC_THREAD_ATTR_STACKADDR
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:239</i><br>
	 * _SC_THREAD_ATTR_STACKSIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:241</i><br>
	 * _SC_THREAD_PRIORITY_SCHEDULING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:243</i><br>
	 * _SC_THREAD_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:245</i><br>
	 * _SC_THREAD_PRIO_PROTECT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:247</i><br>
	 * _SC_THREAD_PROCESS_SHARED
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:250</i><br>
	 * _SC_NPROCESSORS_CONF
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:252</i><br>
	 * _SC_NPROCESSORS_ONLN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:254</i><br>
	 * _SC_PHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:256</i><br>
	 * _SC_AVPHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:258</i><br>
	 * _SC_ATEXIT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:260</i><br>
	 * _SC_PASS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:263</i><br>
	 * _SC_XOPEN_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:265</i><br>
	 * _SC_XOPEN_XCU_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:267</i><br>
	 * _SC_XOPEN_UNIX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:269</i><br>
	 * _SC_XOPEN_CRYPT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:271</i><br>
	 * _SC_XOPEN_ENH_I18N
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:273</i><br>
	 * _SC_XOPEN_SHM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:276</i><br>
	 * _SC_2_CHAR_TERM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:278</i><br>
	 * _SC_2_C_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:280</i><br>
	 * _SC_2_UPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:283</i><br>
	 * _SC_XOPEN_XPG2
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:285</i><br>
	 * _SC_XOPEN_XPG3
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:287</i><br>
	 * _SC_XOPEN_XPG4
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:290</i><br>
	 * _SC_CHAR_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:292</i><br>
	 * _SC_CHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:294</i><br>
	 * _SC_CHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:296</i><br>
	 * _SC_INT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:298</i><br>
	 * _SC_INT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:300</i><br>
	 * _SC_LONG_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:302</i><br>
	 * _SC_WORD_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:304</i><br>
	 * _SC_MB_LEN_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:306</i><br>
	 * _SC_NZERO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:308</i><br>
	 * _SC_SSIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:310</i><br>
	 * _SC_SCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:312</i><br>
	 * _SC_SCHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:314</i><br>
	 * _SC_SHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:316</i><br>
	 * _SC_SHRT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:318</i><br>
	 * _SC_UCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:320</i><br>
	 * _SC_UINT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:322</i><br>
	 * _SC_ULONG_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:324</i><br>
	 * _SC_USHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:327</i><br>
	 * _SC_NL_ARGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:329</i><br>
	 * _SC_NL_LANGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:331</i><br>
	 * _SC_NL_MSGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:333</i><br>
	 * _SC_NL_NMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:335</i><br>
	 * _SC_NL_SETMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:337</i><br>
	 * _SC_NL_TEXTMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:340</i><br>
	 * _SC_XBS5_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:342</i><br>
	 * _SC_XBS5_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:344</i><br>
	 * _SC_XBS5_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:346</i><br>
	 * _SC_XBS5_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:349</i><br>
	 * _SC_XOPEN_LEGACY
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:351</i><br>
	 * _SC_XOPEN_REALTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:353</i><br>
	 * _SC_XOPEN_REALTIME_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:356</i><br>
	 * _SC_ADVISORY_INFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:358</i><br>
	 * _SC_BARRIERS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:360</i><br>
	 * _SC_BASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:362</i><br>
	 * _SC_C_LANG_SUPPORT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:364</i><br>
	 * _SC_C_LANG_SUPPORT_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:366</i><br>
	 * _SC_CLOCK_SELECTION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:368</i><br>
	 * _SC_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:370</i><br>
	 * _SC_THREAD_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:372</i><br>
	 * _SC_DEVICE_IO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:374</i><br>
	 * _SC_DEVICE_SPECIFIC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:376</i><br>
	 * _SC_DEVICE_SPECIFIC_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:378</i><br>
	 * _SC_FD_MGMT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:380</i><br>
	 * _SC_FIFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:382</i><br>
	 * _SC_PIPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:384</i><br>
	 * _SC_FILE_ATTRIBUTES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:386</i><br>
	 * _SC_FILE_LOCKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:388</i><br>
	 * _SC_FILE_SYSTEM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:390</i><br>
	 * _SC_MONOTONIC_CLOCK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:392</i><br>
	 * _SC_MULTI_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:394</i><br>
	 * _SC_SINGLE_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:396</i><br>
	 * _SC_NETWORKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:398</i><br>
	 * _SC_READER_WRITER_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:400</i><br>
	 * _SC_SPIN_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:402</i><br>
	 * _SC_REGEXP
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:404</i><br>
	 * _SC_REGEX_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:406</i><br>
	 * _SC_SHELL
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:408</i><br>
	 * _SC_SIGNALS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:410</i><br>
	 * _SC_SPAWN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:412</i><br>
	 * _SC_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:414</i><br>
	 * _SC_THREAD_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:416</i><br>
	 * _SC_SYSTEM_DATABASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:418</i><br>
	 * _SC_SYSTEM_DATABASE_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:420</i><br>
	 * _SC_TIMEOUTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:422</i><br>
	 * _SC_TYPED_MEMORY_OBJECTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:424</i><br>
	 * _SC_USER_GROUPS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:426</i><br>
	 * _SC_USER_GROUPS_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:428</i><br>
	 * _SC_2_PBS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:430</i><br>
	 * _SC_2_PBS_ACCOUNTING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:432</i><br>
	 * _SC_2_PBS_LOCATE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:434</i><br>
	 * _SC_2_PBS_MESSAGE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:436</i><br>
	 * _SC_2_PBS_TRACK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:438</i><br>
	 * _SC_SYMLOOP_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:440</i><br>
	 * _SC_STREAMS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:442</i><br>
	 * _SC_2_PBS_CHECKPOINT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:445</i><br>
	 * _SC_V6_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:447</i><br>
	 * _SC_V6_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:449</i><br>
	 * _SC_V6_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:451</i><br>
	 * _SC_V6_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:454</i><br>
	 * _SC_HOST_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:456</i><br>
	 * _SC_TRACE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:458</i><br>
	 * _SC_TRACE_EVENT_FILTER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:460</i><br>
	 * _SC_TRACE_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:462</i><br>
	 * _SC_TRACE_LOG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:465</i><br>
	 * _SC_LEVEL1_ICACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:467</i><br>
	 * _SC_LEVEL1_ICACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:469</i><br>
	 * _SC_LEVEL1_ICACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:471</i><br>
	 * _SC_LEVEL1_DCACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:473</i><br>
	 * _SC_LEVEL1_DCACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:475</i><br>
	 * _SC_LEVEL1_DCACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:477</i><br>
	 * _SC_LEVEL2_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:479</i><br>
	 * _SC_LEVEL2_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:481</i><br>
	 * _SC_LEVEL2_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:483</i><br>
	 * _SC_LEVEL3_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:485</i><br>
	 * _SC_LEVEL3_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:487</i><br>
	 * _SC_LEVEL3_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:489</i><br>
	 * _SC_LEVEL4_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:491</i><br>
	 * _SC_LEVEL4_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:493</i><br>
	 * _SC_LEVEL4_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:497</i><br>
	 * _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:499</i><br>
	 * _SC_RAW_SOCKETS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:502</i><br>
	 * _SC_V7_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:504</i><br>
	 * _SC_V7_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:506</i><br>
	 * _SC_V7_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:508</i><br>
	 * _SC_V7_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:511</i><br>
	 * _SC_SS_REPL_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:514</i><br>
	 * _SC_TRACE_EVENT_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:516</i><br>
	 * _SC_TRACE_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:518</i><br>
	 * _SC_TRACE_SYS_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:520</i><br>
	 * _SC_TRACE_USER_EVENT_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:523</i><br>
	 * _SC_XOPEN_STREAMS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:526</i><br>
	 * _SC_THREAD_ROBUST_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\confname.h:528</i><br>
	 * _SC_THREAD_ROBUST_PRIO_PROTECT
	 */
	/** The default search path. */
	public static final int _CS_PATH = 0;
	public static final int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;
	public static final int _CS_GNU_LIBC_VERSION = 2;
	public static final int _CS_GNU_LIBPTHREAD_VERSION = 3;
	public static final int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;
	public static final int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;
	public static final int _CS_LFS_CFLAGS = 1000;
	public static final int _CS_LFS_LDFLAGS = 1001;
	public static final int _CS_LFS_LIBS = 1002;
	public static final int _CS_LFS_LINTFLAGS = 1003;
	public static final int _CS_LFS64_CFLAGS = 1004;
	public static final int _CS_LFS64_LDFLAGS = 1005;
	public static final int _CS_LFS64_LIBS = 1006;
	public static final int _CS_LFS64_LINTFLAGS = 1007;
	public static final int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;
	public static final int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;
	public static final int _CS_XBS5_ILP32_OFF32_LIBS = 1102;
	public static final int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;
	public static final int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;
	public static final int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;
	public static final int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;
	public static final int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;
	public static final int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;
	public static final int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;
	public static final int _CS_XBS5_LP64_OFF64_LIBS = 1110;
	public static final int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;
	public static final int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;
	public static final int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;
	public static final int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;
	public static final int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;
	public static final int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;
	public static final int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;
	public static final int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;
	public static final int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;
	public static final int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;
	public static final int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;
	public static final int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;
	public static final int _CS_V6_ENV = 1148;
	public static final int _CS_V7_ENV = 1149;
	/**
	 * Types of sockets.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:24</i><br>
	 * enum values
	 */
	public static interface __socket_type {
		/**
		 * Sequenced, reliable, connection-based<br>
		 * byte streams.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:26</i>
		 */
		public static final int SOCK_STREAM = 1;
		/**
		 * Connectionless, unreliable datagrams<br>
		 * of fixed maximum length.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:29</i>
		 */
		public static final int SOCK_DGRAM = 2;
		/**
		 * Raw protocol interface.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:32</i>
		 */
		public static final int SOCK_RAW = 3;
		/**
		 * Reliably-delivered messages.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:34</i>
		 */
		public static final int SOCK_RDM = 4;
		/**
		 * Sequenced, reliable, connection-based,<br>
		 * datagrams of fixed maximum length.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:36</i>
		 */
		public static final int SOCK_SEQPACKET = 5;
		/**
		 * Datagram Congestion Control Protocol.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:39</i>
		 */
		public static final int SOCK_DCCP = 6;
		/**
		 * Linux specific way of getting packets<br>
		 * at the dev level.  For writing rarp and<br>
		 * other similar things on the user level.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:41</i>
		 */
		public static final int SOCK_PACKET = 10;
		/**
		 * Atomically set close-on-exec flag for the<br>
		 * new descriptor(s).<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:49</i>
		 */
		public static final int SOCK_CLOEXEC = 2000000;
		/**
		 * Atomically mark descriptor(s) as<br>
		 * non-blocking.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket_type.h:52</i>
		 */
		public static final int SOCK_NONBLOCK = 0004000;
	};
	/** Process out-of-band data. */
	public static final int MSG_OOB = 0x01;
	/** Peek at incoming messages. */
	public static final int MSG_PEEK = 0x02;
	/** Don't use local routing. */
	public static final int MSG_DONTROUTE = 0x04;
	/**
	 * Conversion Error : MSG_DONTROUTE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h:124</i><br>
	 * MSG_TRYHARD = MSG_DONTROUTE
	 */
	/** Control data lost before delivery. */
	public static final int MSG_CTRUNC = 0x08;
	/** Supply or ask second address. */
	public static final int MSG_PROXY = 0x10;
	public static final int MSG_TRUNC = 0x20;
	/** Nonblocking IO. */
	public static final int MSG_DONTWAIT = 0x40;
	/** End of record. */
	public static final int MSG_EOR = 0x80;
	/** Wait for a full request. */
	public static final int MSG_WAITALL = 0x100;
	public static final int MSG_FIN = 0x200;
	public static final int MSG_SYN = 0x400;
	/** Confirm path validity. */
	public static final int MSG_CONFIRM = 0x800;
	public static final int MSG_RST = 0x1000;
	/** Fetch message from error queue. */
	public static final int MSG_ERRQUEUE = 0x2000;
	/** Do not generate SIGPIPE. */
	public static final int MSG_NOSIGNAL = 0x4000;
	/** Sender will send more. */
	public static final int MSG_MORE = 0x8000;
	/** Wait for at least one packet to return. */
	public static final int MSG_WAITFORONE = 0x10000;
	/** Send data in TCP SYN. */
	public static final int MSG_FASTOPEN = 0x20000000;
	/**
	 * Set close_on_exit for file<br>
	 * descriptor received through<br>
	 * SCM_RIGHTS.
	 */
	public static final int MSG_CMSG_CLOEXEC = 0x40000000;
	/** Transfer file descriptors. */
	public static final int SCM_RIGHTS = 0x01;
	/** Credentials passing. */
	public static final int SCM_CREDENTIALS = 0x02;
	/** No more receptions. */
	public static final int SHUT_RD = 0;
	/** No more transmissions. */
	public static final int SHUT_WR = 1;
	/** No more receptions or transmissions. */
	public static final int SHUT_RDWR = 2;
	/** Interface is up. */
	public static final int IFF_UP = 0x1;
	/** Broadcast address valid. */
	public static final int IFF_BROADCAST = 0x2;
	/** Turn on debugging. */
	public static final int IFF_DEBUG = 0x4;
	/** Is a loopback net. */
	public static final int IFF_LOOPBACK = 0x8;
	/** Interface is point-to-point link. */
	public static final int IFF_POINTOPOINT = 0x10;
	/** Avoid use of trailers. */
	public static final int IFF_NOTRAILERS = 0x20;
	/** Resources allocated. */
	public static final int IFF_RUNNING = 0x40;
	/** No address resolution protocol. */
	public static final int IFF_NOARP = 0x80;
	/** Receive all packets. */
	public static final int IFF_PROMISC = 0x100;
	/** Receive all multicast packets. */
	public static final int IFF_ALLMULTI = 0x200;
	/** Master of a load balancer. */
	public static final int IFF_MASTER = 0x400;
	/** Slave of a load balancer. */
	public static final int IFF_SLAVE = 0x800;
	/** Supports multicast. */
	public static final int IFF_MULTICAST = 0x1000;
	/** Can set media type. */
	public static final int IFF_PORTSEL = 0x2000;
	/** Auto media select active. */
	public static final int IFF_AUTOMEDIA = 0x4000;
	/** Dialup device with changing addresses. */
	public static final int IFF_DYNAMIC = 0x8000;
	/**
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i><br>
	 * enum values
	 */
	public static interface idtype_t {
		/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h:51</i> */
		public static final int P_ALL = 0;
		/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h:52</i> */
		public static final int P_PID = 1;
		/**
		 * Wait for members of process group.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h:53</i>
		 */
		public static final int P_PGID = 2;
	};
	/**
	 * Owner types.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:201</i><br>
	 * enum values
	 */
	public static interface __pid_type {
		/**
		 * Kernel thread.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:203</i>
		 */
		public static final int F_OWNER_TID = 0;
		/**
		 * Process.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:204</i>
		 */
		public static final int F_OWNER_PID = 1;
		/**
		 * Process group.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:205</i>
		 */
		public static final int F_OWNER_PGRP = 2;
		/**
		 * Alternative, obsolete name.<br>
		 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:206</i>
		 */
		public static final int F_OWNER_GID = (int)CLibrary.__pid_type.F_OWNER_PGRP;
	};
	/** <i>native declaration : unistd.h</i> */
	public static final int _UNISTD_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\cdefs.h</i> */
	public static final int _SYS_CDEFS_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\wordsize.h</i> */
	public static final int __WORDSIZE = (int)32;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX_VERSION = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int __POSIX2_THIS_VERSION = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_VERSION = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_C_BIND = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_C_DEV = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_SW_DEV = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _POSIX2_LOCALEDEF = (int)200809;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_VERSION = (int)700;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XCU_VERSION = (int)4;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XPG2 = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XPG3 = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_XPG4 = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_UNIX = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_CRYPT = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_ENH_I18N = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int _XOPEN_LEGACY = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _BITS_POSIX_OPT_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_JOB_CONTROL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SAVED_IDS = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SYNCHRONIZED_IO = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_FSYNC = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_MAPPED_FILES = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK_RANGE = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_MEMORY_PROTECTION = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_CHOWN_RESTRICTED = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final char _POSIX_VDISABLE = (char)'\0';
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_NO_TRUNC = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _XOPEN_REALTIME = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _XOPEN_REALTIME_THREADS = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _XOPEN_SHM = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREADS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_REENTRANT_FUNCTIONS = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_SAFE_FUNCTIONS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKSIZE = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKADDR = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_PROTECT = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_PROTECT = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SEMAPHORES = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_REALTIME_SIGNALS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_ASYNCHRONOUS_IO = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_ASYNC_IO = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _LFS_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_PRIORITIZED_IO = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _LFS64_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _LFS_LARGEFILE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _LFS64_LARGEFILE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _LFS64_STDIO = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SHARED_MEMORY_OBJECTS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_CPUTIME = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_CPUTIME = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_REGEXP = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_READER_WRITER_LOCKS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SHELL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TIMEOUTS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SPIN_LOCKS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SPAWN = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TIMERS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_BARRIERS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_MESSAGE_PASSING = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_PROCESS_SHARED = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_MONOTONIC_CLOCK = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_CLOCK_SELECTION = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_ADVISORY_INFO = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_IPV6 = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_RAW_SOCKETS = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX2_CHAR_TERM = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_THREAD_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TRACE = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TRACE_EVENT_FILTER = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TRACE_INHERIT = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TRACE_LOG = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix_opt.h</i> */
	public static final int _POSIX_TYPED_MEMORY_OBJECTS = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V7_ILP32_OFF32 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V7_ILP32_OFFBIG = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V6_ILP32_OFF32 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V6_ILP32_OFFBIG = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _XBS5_ILP32_OFF32 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _XBS5_ILP32_OFFBIG = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V7_LP64_OFF64 = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V7_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V6_LP64_OFF64 = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _POSIX_V6_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _XBS5_LP64_OFF64 = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final int _XBS5_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\environments.h</i> */
	public static final String __ILP32_OFFBIG_CFLAGS = (String)"-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";
	/** <i>native declaration : unistd.h</i> */
	public static final int STDIN_FILENO = (int)0;
	/** <i>native declaration : unistd.h</i> */
	public static final int STDOUT_FILENO = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int STDERR_FILENO = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\types.h</i> */
	public static final int _BITS_TYPES_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\typesizes.h</i> */
	public static final int _BITS_TYPESIZES_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\typesizes.h</i> */
	public static final int __FD_SETSIZE = (int)1024;
	/** <i>native declaration : unistd.h</i> */
	public static final int R_OK = (int)4;
	/** <i>native declaration : unistd.h</i> */
	public static final int W_OK = (int)2;
	/** <i>native declaration : unistd.h</i> */
	public static final int X_OK = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int F_OK = (int)0;
	/** <i>native declaration : unistd.h</i> */
	public static final int L_SET = (int)0;
	/** <i>native declaration : unistd.h</i> */
	public static final int L_INCR = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int L_XTND = (int)2;
	/** <i>native declaration : unistd.h</i> */
	public static final int F_ULOCK = (int)0;
	/** <i>native declaration : unistd.h</i> */
	public static final int F_LOCK = (int)1;
	/** <i>native declaration : unistd.h</i> */
	public static final int F_TLOCK = (int)2;
	/** <i>native declaration : unistd.h</i> */
	public static final int F_TEST = (int)3;
	/** <i>native declaration : alloca.h</i> */
	public static final int _ALLOCA_H = (int)1;
	/** <i>native declaration : string.h</i> */
	public static final int _STRING_H = (int)1;
	/** <i>native declaration : errno.h</i> */
	public static final int _ERRNO_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\errno.h</i> */
	public static final int ENOTSUP = (int)95;
	/** <i>native declaration : errno.h</i> */
	public static final int __error_t_defined = (int)1;
	/** <i>native declaration : net\if.h</i> */
	public static final int _NET_IF_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\types.h</i> */
	public static final int _SYS_TYPES_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\types.h</i> */
	public static final int __BIT_TYPES_DEFINED__ = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\endian.h</i> */
	public static final int __BYTE_ORDER = (int)1234;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\byteswap.h</i> */
	public static final int _BITS_BYTESWAP_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\select.h</i> */
	public static final int _SYS_SELECT_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\sigset.h</i> */
	public static final int _SIGSET_H_types = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\time.h</i> */
	public static final int _STRUCT_TIMEVAL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\select.h</i> */
	public static final int FD_SETSIZE = (int)1024;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\sysmacros.h</i> */
	public static final int _SYS_SYSMACROS_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int _BITS_PTHREADTYPES_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_ATTR_T = (int)36;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEX_T = (int)24;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_COND_T = (int)48;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_COND_COMPAT_T = (int)12;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIER_T = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\pthreadtypes.h</i> */
	public static final int __have_pthread_attr_t = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h</i> */
	public static final int _SYS_SOCKET_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h</i> */
	public static final int _SYS_UIO_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\\uio.h</i> */
	public static final int _BITS_UIO_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\\uio.h</i> */
	public static final int UIO_MAXIOV = (int)1024;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\\uio.h</i> */
	public static final int _BITS_UIO_H_FOR_SYS_UIO_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_UNSPEC = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_LOCAL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_UNIX = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_FILE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_INET = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_AX25 = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_IPX = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_APPLETALK = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_NETROM = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_BRIDGE = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ATMPVC = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_X25 = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_INET6 = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ROSE = (int)11;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_DECnet = (int)12;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_NETBEUI = (int)13;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_SECURITY = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_KEY = (int)15;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_NETLINK = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ROUTE = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_PACKET = (int)17;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ASH = (int)18;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ECONET = (int)19;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ATMSVC = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_RDS = (int)21;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_SNA = (int)22;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_IRDA = (int)23;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_PPPOX = (int)24;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_WANPIPE = (int)25;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_LLC = (int)26;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_CAN = (int)29;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_TIPC = (int)30;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_BLUETOOTH = (int)31;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_IUCV = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_RXRPC = (int)33;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ISDN = (int)34;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_PHONET = (int)35;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_IEEE802154 = (int)36;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_CAIF = (int)37;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_ALG = (int)38;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_NFC = (int)39;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_VSOCK = (int)40;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int PF_MAX = (int)41;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_UNSPEC = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_LOCAL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_UNIX = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_FILE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_INET = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_AX25 = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_IPX = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_APPLETALK = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_NETROM = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_BRIDGE = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ATMPVC = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_X25 = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_INET6 = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ROSE = (int)11;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_DECnet = (int)12;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_NETBEUI = (int)13;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_SECURITY = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_KEY = (int)15;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_NETLINK = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ROUTE = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_PACKET = (int)17;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ASH = (int)18;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ECONET = (int)19;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ATMSVC = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_RDS = (int)21;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_SNA = (int)22;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_IRDA = (int)23;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_PPPOX = (int)24;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_WANPIPE = (int)25;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_LLC = (int)26;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_CAN = (int)29;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_TIPC = (int)30;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_BLUETOOTH = (int)31;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_IUCV = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_RXRPC = (int)33;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ISDN = (int)34;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_PHONET = (int)35;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_IEEE802154 = (int)36;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_CAIF = (int)37;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_ALG = (int)38;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_NFC = (int)39;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_VSOCK = (int)40;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int AF_MAX = (int)41;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_RAW = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_DECNET = (int)261;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_X25 = (int)262;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_PACKET = (int)263;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_ATM = (int)264;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_AAL = (int)265;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOL_IRDA = (int)266;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int SOMAXCONN = (int)128;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\sockaddr.h</i> */
	public static final int _BITS_SOCKADDR_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h</i> */
	public static final int _SS_SIZE = (int)128;
	/** <i>native declaration : net\if.h</i> */
	public static final int IF_NAMESIZE = (int)16;
	/** <i>native declaration : net\if.h</i> */
	public static final int IFHWADDRLEN = (int)6;
	/** <i>native declaration : net\if.h</i> */
	public static final int IFNAMSIZ = (int)16;
	/** <i>native declaration : arm-linux-gnueabihf\sys\ioctl.h</i> */
	public static final int _SYS_IOCTL_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCADDRT = (int)0x890B;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDELRT = (int)0x890C;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCRTMSG = (int)0x890D;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFNAME = (int)0x8910;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFLINK = (int)0x8911;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFCONF = (int)0x8912;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFFLAGS = (int)0x8913;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFFLAGS = (int)0x8914;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFADDR = (int)0x8915;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFADDR = (int)0x8916;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFDSTADDR = (int)0x8917;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFDSTADDR = (int)0x8918;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFBRDADDR = (int)0x8919;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFBRDADDR = (int)0x891a;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFNETMASK = (int)0x891b;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFNETMASK = (int)0x891c;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFMETRIC = (int)0x891d;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFMETRIC = (int)0x891e;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFMEM = (int)0x891f;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFMEM = (int)0x8920;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFMTU = (int)0x8921;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFMTU = (int)0x8922;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFNAME = (int)0x8923;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFHWADDR = (int)0x8924;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFENCAP = (int)0x8925;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFENCAP = (int)0x8926;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFHWADDR = (int)0x8927;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFSLAVE = (int)0x8929;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFSLAVE = (int)0x8930;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCADDMULTI = (int)0x8931;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDELMULTI = (int)0x8932;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFINDEX = (int)0x8933;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOGIFINDEX = (int)0x8933;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFPFLAGS = (int)0x8934;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFPFLAGS = (int)0x8935;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDIFADDR = (int)0x8936;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFHWBROADCAST = (int)0x8937;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFCOUNT = (int)0x8938;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFBR = (int)0x8940;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFBR = (int)0x8941;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFTXQLEN = (int)0x8942;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFTXQLEN = (int)0x8943;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDARP = (int)0x8953;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGARP = (int)0x8954;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSARP = (int)0x8955;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDRARP = (int)0x8960;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGRARP = (int)0x8961;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSRARP = (int)0x8962;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCGIFMAP = (int)0x8970;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCSIFMAP = (int)0x8971;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCADDDLCI = (int)0x8980;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDELDLCI = (int)0x8981;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCDEVPRIVATE = (int)0x89F0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctls.h</i> */
	public static final int SIOCPROTOPRIVATE = (int)0x89E0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int NCC = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_LE = (int)0x001;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_DTR = (int)0x002;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_RTS = (int)0x004;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_ST = (int)0x008;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_SR = (int)0x010;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_CTS = (int)0x020;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_CAR = (int)0x040;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_RNG = (int)0x080;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_DSR = (int)0x100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_CD = (int)0x040;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int TIOCM_RI = (int)0x080;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_TTY = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_SLIP = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_MOUSE = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_PPP = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_STRIP = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_AX25 = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_X25 = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_6PACK = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_MASC = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_R3964 = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_PROFIBUS_FDL = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_IRDA = (int)11;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_SMSBLOCK = (int)12;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_HDLC = (int)13;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_SYNC_PPP = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\ioctl-types.h</i> */
	public static final int N_HCI = (int)15;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CEOF = (int)('d' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final char CEOL = (char)'\0';
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CERASE = (int)177;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CINTR = (int)('c' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final char CSTATUS = (char)'\0';
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CKILL = (int)('u' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CMIN = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CQUIT = (int)34;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CSUSP = (int)('z' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CTIME = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CDSUSP = (int)('y' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CSTART = (int)('q' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CSTOP = (int)('s' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CLNEXT = (int)('v' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CDISCARD = (int)('o' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CWERASE = (int)('w' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CREPRINT = (int)('r' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CEOT = (int)('d' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final char CBRK = (char)'\0';
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CRPRNT = (int)('r' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\ttydefaults.h</i> */
	public static final int CFLUSH = (int)('o' & 37);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stdio_lim.h</i> */
	public static final int L_tmpnam = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stdio_lim.h</i> */
	public static final int TMP_MAX = (int)238328;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stdio_lim.h</i> */
	public static final int FILENAME_MAX = (int)4096;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stdio_lim.h</i> */
	public static final int L_ctermid = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stdio_lim.h</i> */
	public static final int L_cuserid = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stdio_lim.h</i> */
	public static final int FOPEN_MAX = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_OPTIONS = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_HDRINCL = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_TOS = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_TTL = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RECVOPTS = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RECVRETOPTS = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RETOPTS = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MULTICAST_IF = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MULTICAST_TTL = (int)33;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MULTICAST_LOOP = (int)34;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_ADD_MEMBERSHIP = (int)35;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_DROP_MEMBERSHIP = (int)36;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_UNBLOCK_SOURCE = (int)37;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_BLOCK_SOURCE = (int)38;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_ADD_SOURCE_MEMBERSHIP = (int)39;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_DROP_SOURCE_MEMBERSHIP = (int)40;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MSFILTER = (int)41;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_JOIN_GROUP = (int)42;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_BLOCK_SOURCE = (int)43;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_UNBLOCK_SOURCE = (int)44;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_LEAVE_GROUP = (int)45;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_JOIN_SOURCE_GROUP = (int)46;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_LEAVE_SOURCE_GROUP = (int)47;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_MSFILTER = (int)48;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MULTICAST_ALL = (int)49;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_UNICAST_IF = (int)50;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_EXCLUDE = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int MCAST_INCLUDE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_ROUTER_ALERT = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PKTINFO = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PKTOPTIONS = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PMTUDISC = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MTU_DISCOVER = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RECVERR = (int)11;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RECVTTL = (int)12;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RECVTOS = (int)13;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MTU = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_FREEBIND = (int)15;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_IPSEC_POLICY = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_XFRM_POLICY = (int)17;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PASSSEC = (int)18;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_TRANSPARENT = (int)19;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_ORIGDSTADDR = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_RECVORIGDSTADDR = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MINTTL = (int)21;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PMTUDISC_DONT = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PMTUDISC_WANT = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PMTUDISC_DO = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_PMTUDISC_PROBE = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int SOL_IP = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_DEFAULT_MULTICAST_TTL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_DEFAULT_MULTICAST_LOOP = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IP_MAX_MEMBERSHIPS = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_ADDRFORM = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_2292PKTINFO = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_2292HOPOPTS = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_2292DSTOPTS = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_2292RTHDR = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_2292PKTOPTIONS = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_CHECKSUM = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_2292HOPLIMIT = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_NEXTHOP = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_AUTHHDR = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_UNICAST_HOPS = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_MULTICAST_IF = (int)17;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_MULTICAST_HOPS = (int)18;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_MULTICAST_LOOP = (int)19;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_JOIN_GROUP = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_LEAVE_GROUP = (int)21;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_ROUTER_ALERT = (int)22;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_MTU_DISCOVER = (int)23;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_MTU = (int)24;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVERR = (int)25;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_V6ONLY = (int)26;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_JOIN_ANYCAST = (int)27;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_LEAVE_ANYCAST = (int)28;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_IPSEC_POLICY = (int)34;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_XFRM_POLICY = (int)35;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVPKTINFO = (int)49;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_PKTINFO = (int)50;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVHOPLIMIT = (int)51;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_HOPLIMIT = (int)52;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVHOPOPTS = (int)53;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_HOPOPTS = (int)54;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RTHDRDSTOPTS = (int)55;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVRTHDR = (int)56;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RTHDR = (int)57;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVDSTOPTS = (int)58;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_DSTOPTS = (int)59;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RECVTCLASS = (int)66;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_TCLASS = (int)67;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_ADD_MEMBERSHIP = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_DROP_MEMBERSHIP = (int)21;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RXHOPOPTS = (int)54;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RXDSTOPTS = (int)59;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_PMTUDISC_DONT = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_PMTUDISC_WANT = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_PMTUDISC_DO = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_PMTUDISC_PROBE = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int SOL_IPV6 = (int)41;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int SOL_ICMPV6 = (int)58;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RTHDR_LOOSE = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RTHDR_STRICT = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\in.h</i> */
	public static final int IPV6_RTHDR_TYPE_0 = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int WNOHANG = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int WUNTRACED = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int WSTOPPED = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int WEXITED = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int WCONTINUED = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int WNOWAIT = (int)0x01000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int __WNOTHREAD = (int)0x20000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int __WALL = (int)0x40000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int __WCLONE = (int)0x80000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitflags.h</i> */
	public static final int __ENUM_IDTYPE_T = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitstatus.h</i> */
	public static final int __W_CONTINUED = (int)0xffff;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\waitstatus.h</i> */
	public static final int __WCOREFLAG = (int)0x80;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl.h</i> */
	public static final int __O_DIRECTORY = (int)40000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl.h</i> */
	public static final int __O_NOFOLLOW = (int)100000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl.h</i> */
	public static final int __O_DIRECT = (int)200000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl.h</i> */
	public static final int __O_LARGEFILE = (int)400000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_ACCMODE = (int)003;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_RDONLY = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_WRONLY = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_RDWR = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_CREAT = (int)100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_EXCL = (int)200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_NOCTTY = (int)400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_TRUNC = (int)1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_APPEND = (int)2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_NONBLOCK = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_NDELAY = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_SYNC = (int)4010000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_FSYNC = (int)4010000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_ASYNC = (int)20000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __O_CLOEXEC = (int)2000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __O_NOATIME = (int)1000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __O_PATH = (int)10000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __O_DSYNC = (int)10000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __O_TMPFILE = (int)20200000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETLK = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETLK = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETLKW = (int)7;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETLK64 = (int)12;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETLK64 = (int)13;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETLKW64 = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_LARGEFILE = (int)400000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_DIRECTORY = (int)40000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_NOFOLLOW = (int)100000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_CLOEXEC = (int)2000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_DIRECT = (int)200000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_NOATIME = (int)1000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_PATH = (int)10000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_TMPFILE = (int)20200000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_DSYNC = (int)10000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int O_RSYNC = (int)4010000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_DUPFD = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETFD = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETFD = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETFL = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETFL = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __F_SETOWN = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __F_GETOWN = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETOWN = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETOWN = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __F_SETSIG = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __F_GETSIG = (int)11;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __F_SETOWN_EX = (int)15;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __F_GETOWN_EX = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETSIG = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETSIG = (int)11;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETOWN_EX = (int)15;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETOWN_EX = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETLEASE = (int)1024;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETLEASE = (int)1025;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_NOTIFY = (int)1026;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SETPIPE_SZ = (int)1031;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_GETPIPE_SZ = (int)1032;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_DUPFD_CLOEXEC = (int)1030;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FD_CLOEXEC = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_RDLCK = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_WRLCK = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_UNLCK = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_EXLCK = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int F_SHLCK = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_SH = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_EX = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_NB = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_UN = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_MAND = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_READ = (int)64;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_WRITE = (int)128;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int LOCK_RW = (int)192;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_ACCESS = (int)0x00000001;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_MODIFY = (int)0x00000002;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_CREATE = (int)0x00000004;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_DELETE = (int)0x00000008;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_RENAME = (int)0x00000010;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_ATTRIB = (int)0x00000020;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int DN_MULTISHOT = (int)0x80000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FAPPEND = (int)2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FFSYNC = (int)4010000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FASYNC = (int)20000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FNONBLOCK = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FNDELAY = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __POSIX_FADV_DONTNEED = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int __POSIX_FADV_NOREUSE = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int POSIX_FADV_NORMAL = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int POSIX_FADV_RANDOM = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int POSIX_FADV_SEQUENTIAL = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int POSIX_FADV_WILLNEED = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int POSIX_FADV_DONTNEED = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int POSIX_FADV_NOREUSE = (int)5;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SYNC_FILE_RANGE_WAIT_BEFORE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SYNC_FILE_RANGE_WRITE = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SYNC_FILE_RANGE_WAIT_AFTER = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SPLICE_F_MOVE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SPLICE_F_NONBLOCK = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SPLICE_F_MORE = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int SPLICE_F_GIFT = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FALLOC_FL_KEEP_SIZE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int FALLOC_FL_PUNCH_HOLE = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int MAX_HANDLE_SZ = (int)128;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_FDCWD = (int)-100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_SYMLINK_NOFOLLOW = (int)0x100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_REMOVEDIR = (int)0x200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_SYMLINK_FOLLOW = (int)0x400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_NO_AUTOMOUNT = (int)0x800;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_EMPTY_PATH = (int)0x1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h</i> */
	public static final int AT_EACCESS = (int)0x200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _BITS_STAT_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _STAT_VER_LINUX_OLD = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _STAT_VER_KERNEL = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _STAT_VER_SVR4 = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _STAT_VER_LINUX = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _STAT_VER = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _MKNOD_VER_LINUX = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _MKNOD_VER_SVR4 = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int _MKNOD_VER = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFMT = (int)170000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFDIR = (int)040000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFCHR = (int)020000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFBLK = (int)060000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFREG = (int)100000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFIFO = (int)010000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFLNK = (int)120000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IFSOCK = (int)140000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_ISUID = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_ISGID = (int)2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_ISVTX = (int)1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IREAD = (int)400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IWRITE = (int)200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int __S_IEXEC = (int)100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int UTIME_NOW = (int)((1 << 30) - 1);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\stat.h</i> */
	public static final int UTIME_OMIT = (int)((1 << 30) - 2);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\poll.h</i> */
	public static final int _SYS_POLL_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLIN = (int)0x001;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLPRI = (int)0x002;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLOUT = (int)0x004;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLRDNORM = (int)0x040;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLRDBAND = (int)0x080;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLWRNORM = (int)0x100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLWRBAND = (int)0x200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLMSG = (int)0x400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLREMOVE = (int)0x1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLRDHUP = (int)0x2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLERR = (int)0x008;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLHUP = (int)0x010;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\poll.h</i> */
	public static final int POLLNVAL = (int)0x020;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _BITS_POSIX1_LIM_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_AIO_LISTIO_MAX = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_AIO_MAX = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_ARG_MAX = (int)4096;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_CHILD_MAX = (int)25;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_DELAYTIMER_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_HOST_NAME_MAX = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_LINK_MAX = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_LOGIN_NAME_MAX = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_MAX_CANON = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_MAX_INPUT = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_MQ_OPEN_MAX = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_MQ_PRIO_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_NAME_MAX = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_NGROUPS_MAX = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_OPEN_MAX = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_FD_SETSIZE = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_PATH_MAX = (int)256;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_PIPE_BUF = (int)512;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_RE_DUP_MAX = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_RTSIG_MAX = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_SEM_NSEMS_MAX = (int)256;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_SEM_VALUE_MAX = (int)32767;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_SIGQUEUE_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_SSIZE_MAX = (int)32767;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_STREAM_MAX = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_SYMLINK_MAX = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_SYMLOOP_MAX = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_TIMER_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_TTY_NAME_MAX = (int)9;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_TZNAME_MAX = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_QLIMIT = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_HIWAT = (int)512;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_UIO_MAXIOV = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int _POSIX_CLOCKRES_MIN = (int)20000000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int _POSIX_THREAD_KEYS_MAX = (int)128;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int PTHREAD_KEYS_MAX = (int)1024;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int _POSIX_THREAD_THREADS_MAX = (int)64;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int AIO_PRIO_DELTA_MAX = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int PTHREAD_STACK_MIN = (int)16384;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int DELAYTIMER_MAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int TTY_NAME_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int LOGIN_NAME_MAX = (int)256;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int HOST_NAME_MAX = (int)64;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int MQ_PRIO_MAX = (int)32768;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\local_lim.h</i> */
	public static final int SEM_VALUE_MAX = (int)(2147483647);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix1_lim.h</i> */
	public static final int SSIZE_MAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _BITS_POSIX2_LIM_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_BC_BASE_MAX = (int)99;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_BC_DIM_MAX = (int)2048;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_BC_SCALE_MAX = (int)99;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_BC_STRING_MAX = (int)1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_COLL_WEIGHTS_MAX = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_EXPR_NEST_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_LINE_MAX = (int)2048;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_RE_DUP_MAX = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int _POSIX2_CHARCLASS_NAME_MAX = (int)14;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int BC_BASE_MAX = (int)99;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int BC_DIM_MAX = (int)2048;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int BC_SCALE_MAX = (int)99;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int BC_STRING_MAX = (int)1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int COLL_WEIGHTS_MAX = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int EXPR_NEST_MAX = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int LINE_MAX = (int)2048;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int CHARCLASS_NAME_MAX = (int)2048;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\posix2_lim.h</i> */
	public static final int RE_DUP_MAX = (int)(0x7fff);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int _XOPEN_LIM_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int _XOPEN_IOV_MAX = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NL_ARGMAX = (int)4096;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NL_LANGMAX = (int)2048;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NL_MSGMAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NL_NMAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NL_SETMAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NL_TEXTMAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int NZERO = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int WORD_BIT = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\xopen_lim.h</i> */
	public static final int LONG_BIT = (int)32;
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:236</i><br>
	 * @deprecated use the safer methods {@link #access(java.lang.String, int)} and {@link #access(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int access(Pointer __name, int __type);
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:236</i>
	 */
	int access(String __name, int __type);
	/**
	 * Test for access to NAME using the effective UID and GID<br>
	 * (as normal file operations use).<br>
	 * Original signature : <code>int euidaccess(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:241</i><br>
	 * @deprecated use the safer methods {@link #euidaccess(java.lang.String, int)} and {@link #euidaccess(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int euidaccess(Pointer __name, int __type);
	/**
	 * Test for access to NAME using the effective UID and GID<br>
	 * (as normal file operations use).<br>
	 * Original signature : <code>int euidaccess(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:241</i>
	 */
	int euidaccess(String __name, int __type);
	/**
	 * An alias for `euidaccess', used by some other systems.<br>
	 * Original signature : <code>int eaccess(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:245</i><br>
	 * @deprecated use the safer methods {@link #eaccess(java.lang.String, int)} and {@link #eaccess(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int eaccess(Pointer __name, int __type);
	/**
	 * An alias for `euidaccess', used by some other systems.<br>
	 * Original signature : <code>int eaccess(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:245</i>
	 */
	int eaccess(String __name, int __type);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, const char*, int, int)</code><br>
	 * <i>native declaration : unistd.h:253</i><br>
	 * @deprecated use the safer methods {@link #faccessat(int, java.lang.String, int, int)} and {@link #faccessat(int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int faccessat(int __fd, Pointer __file, int __type, int __flag);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, const char*, int, int)</code><br>
	 * <i>native declaration : unistd.h:253</i>
	 */
	int faccessat(int __fd, String __file, int __type, int __flag);
	/**
	 * Move FD's file position to OFFSET bytes from the<br>
	 * beginning of the file (if WHENCE is SEEK_SET),<br>
	 * the current position (if WHENCE is SEEK_CUR),<br>
	 * or the end of the file (if WHENCE is SEEK_END).<br>
	 * Return the new file position.<br>
	 * Original signature : <code>__off_t lseek(int, __off_t, int)</code><br>
	 * <i>native declaration : unistd.h:283</i>
	 */
	long lseek(int __fd, long __offset, int __whence);
	/**
	 * Original signature : <code>__off64_t lseek64(int, __off64_t, int)</code><br>
	 * <i>native declaration : unistd.h:294</i>
	 */
	long lseek64(int __fd, long __offset, int __whence);
	/**
	 * Close the file descriptor FD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int close(int)</code><br>
	 * <i>native declaration : unistd.h:302</i>
	 */
	int close(int __fd);
	/**
	 * Read NBYTES into BUF from FD.  Return the<br>
	 * number read, -1 for errors or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t read(int, void*, size_t)</code><br>
	 * <i>native declaration : unistd.h:309</i>
	 */
	int read(int __fd, Pointer __buf, NativeSize __nbytes);
	/**
	 * Write N bytes of BUF to FD.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t write(int, const void*, size_t)</code><br>
	 * <i>native declaration : unistd.h:315</i>
	 */
	int write(int __fd, Pointer __buf, NativeSize __n);
	/**
	 * Read NBYTES into BUF from FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number read, -1 for errors<br>
	 * or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pread(int, void*, size_t, __off_t)</code><br>
	 * <i>native declaration : unistd.h:325</i>
	 */
	int pread(int __fd, Pointer __buf, NativeSize __nbytes, long __offset);
	/**
	 * Write N bytes of BUF to FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwrite(int, const void*, size_t, __off_t)</code><br>
	 * <i>native declaration : unistd.h:333</i>
	 */
	int pwrite(int __fd, Pointer __buf, NativeSize __n, long __offset);
	/**
	 * Read NBYTES into BUF from FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number read, -1 for errors<br>
	 * or 0 for EOF.<br>
	 * Original signature : <code>ssize_t pread64(int, void*, size_t, __off64_t)</code><br>
	 * <i>native declaration : unistd.h:353</i>
	 */
	int pread64(int __fd, Pointer __buf, NativeSize __nbytes, long __offset);
	/**
	 * Write N bytes of BUF to FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number written, or -1.<br>
	 * Original signature : <code>ssize_t pwrite64(int, const void*, size_t, __off64_t)</code><br>
	 * <i>native declaration : unistd.h:357</i>
	 */
	int pwrite64(int __fd, Pointer __buf, NativeSize __n, long __offset);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : unistd.h:366</i><br>
	 * @deprecated use the safer methods {@link #pipe(java.nio.IntBuffer)} and {@link #pipe(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pipe(IntByReference __pipedes);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : unistd.h:366</i>
	 */
	int pipe(IntBuffer __pipedes);
	/**
	 * Same as pipe but apply flags passed in FLAGS to the new file<br>
	 * descriptors.<br>
	 * Original signature : <code>int pipe2(int[2], int)</code><br>
	 * <i>native declaration : unistd.h:371</i><br>
	 * @deprecated use the safer methods {@link #pipe2(java.nio.IntBuffer, int)} and {@link #pipe2(com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int pipe2(IntByReference __pipedes, int __flags);
	/**
	 * Same as pipe but apply flags passed in FLAGS to the new file<br>
	 * descriptors.<br>
	 * Original signature : <code>int pipe2(int[2], int)</code><br>
	 * <i>native declaration : unistd.h:371</i>
	 */
	int pipe2(IntBuffer __pipedes, int __flags);
	/**
	 * Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.<br>
	 * If SECONDS is zero, any currently scheduled alarm will be cancelled.<br>
	 * The function returns the number of seconds remaining until the last<br>
	 * alarm scheduled would have signaled, or zero if there wasn't one.<br>
	 * There is no return value to indicate an error, but you can set `errno'<br>
	 * to 0 and check its value after calling `alarm', and this might tell you.<br>
	 * The signal may come late due to processor scheduling.<br>
	 * Original signature : <code>int alarm(unsigned int)</code><br>
	 * <i>native declaration : unistd.h:381</i>
	 */
	int alarm(int __seconds);
	/**
	 * Make the process sleep for SECONDS seconds, or until a signal arrives<br>
	 * and is not ignored.  The function returns the number of seconds less<br>
	 * than SECONDS which it actually slept (thus zero if it slept the full time).<br>
	 * If a signal handler does a `longjmp' or modifies the handling of the<br>
	 * SIGALRM signal while inside `sleep' call, the handling of the SIGALRM<br>
	 * signal afterwards is undefined.  There is no return value to indicate<br>
	 * error, but if `sleep' returns SECONDS, it probably didn't work.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sleep(unsigned int)</code><br>
	 * <i>native declaration : unistd.h:393</i>
	 */
	int sleep(int __seconds);
	/**
	 * Set an alarm to go off (generating a SIGALRM signal) in VALUE<br>
	 * microseconds.  If INTERVAL is nonzero, when the alarm goes off, the<br>
	 * timer is reset to go off every INTERVAL microseconds thereafter.<br>
	 * Returns the number of microseconds remaining before the alarm.<br>
	 * Original signature : <code>__useconds_t ualarm(__useconds_t, __useconds_t)</code><br>
	 * <i>native declaration : unistd.h:401</i>
	 */
	int ualarm(int __value, int __interval);
	/**
	 * Sleep USECONDS microseconds, or until a signal arrives that is not blocked<br>
	 * or ignored.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int usleep(__useconds_t)</code><br>
	 * <i>native declaration : unistd.h:409</i>
	 */
	int usleep(int __useconds);
	/**
	 * Suspend the process until a signal arrives.<br>
	 * This always returns -1 and sets `errno' to EINTR.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pause()</code><br>
	 * <i>native declaration : unistd.h:418</i>
	 */
	int pause();
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:422</i><br>
	 * @deprecated use the safer methods {@link #chown(java.lang.String, int, int)} and {@link #chown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int chown(Pointer __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:422</i>
	 */
	int chown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of the file that FD is open on.<br>
	 * Original signature : <code>int fchown(int, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:427</i>
	 */
	int fchown(int __fd, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:432</i><br>
	 * @deprecated use the safer methods {@link #lchown(java.lang.String, int, int)} and {@link #lchown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int lchown(Pointer __file, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:432</i>
	 */
	int lchown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : unistd.h:440</i><br>
	 * @deprecated use the safer methods {@link #fchownat(int, java.lang.String, int, int, int)} and {@link #fchownat(int, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int fchownat(int __fd, Pointer __file, int __owner, int __group, int __flag);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : unistd.h:440</i>
	 */
	int fchownat(int __fd, String __file, int __owner, int __group, int __flag);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:446</i><br>
	 * @deprecated use the safer methods {@link #chdir(java.lang.String)} and {@link #chdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chdir(Pointer __path);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:446</i>
	 */
	int chdir(String __path);
	/**
	 * Change the process's working directory to the one FD is open on.<br>
	 * Original signature : <code>int fchdir(int)</code><br>
	 * <i>native declaration : unistd.h:450</i>
	 */
	int fchdir(int __fd);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:460</i><br>
	 * @deprecated use the safer methods {@link #getcwd(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #getcwd(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer getcwd(Pointer __buf, NativeSize __size);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:460</i>
	 */
	Pointer getcwd(ByteBuffer __buf, NativeSize __size);
	/**
	 * Return a malloc'd string containing the current directory name.<br>
	 * If the environment variable `PWD' is set, and its value is correct,<br>
	 * that value is used.<br>
	 * Original signature : <code>char* get_current_dir_name()</code><br>
	 * <i>native declaration : unistd.h:466</i>
	 */
	Pointer get_current_dir_name();
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : unistd.h:474</i><br>
	 * @deprecated use the safer methods {@link #getwd(java.nio.ByteBuffer)} and {@link #getwd(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getwd(Pointer __buf);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : unistd.h:474</i>
	 */
	Pointer getwd(ByteBuffer __buf);
	/**
	 * Duplicate FD, returning a new file descriptor on the same file.<br>
	 * Original signature : <code>int dup(int)</code><br>
	 * <i>native declaration : unistd.h:480</i>
	 */
	int dup(int __fd);
	/**
	 * Duplicate FD to FD2, closing FD2 and making it open on the same file.<br>
	 * Original signature : <code>int dup2(int, int)</code><br>
	 * <i>native declaration : unistd.h:483</i>
	 */
	int dup2(int __fd, int __fd2);
	/**
	 * Duplicate FD to FD2, closing FD2 and making it open on the same<br>
	 * file while setting flags according to FLAGS.<br>
	 * Original signature : <code>int dup3(int, int, int)</code><br>
	 * <i>native declaration : unistd.h:488</i>
	 */
	int dup3(int __fd, int __fd2, int __flags);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:500</i><br>
	 * @deprecated use the safer methods {@link #execve(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #execve(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execve(Pointer __path, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:500</i>
	 */
	int execve(String __path, String __argv[], String __envp[]);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:506</i><br>
	 * @deprecated use the safer methods {@link #fexecve(int, java.lang.String[], java.lang.String[])} and {@link #fexecve(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int fexecve(int __fd, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:506</i>
	 */
	int fexecve(int __fd, String __argv[], String __envp[]);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:512</i><br>
	 * @deprecated use the safer methods {@link #execv(java.lang.String, java.lang.String[])} and {@link #execv(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execv(Pointer __path, PointerByReference __argv);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:512</i>
	 */
	int execv(String __path, String __argv[]);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:517</i><br>
	 * @deprecated use the safer methods {@link #execle(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execle(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execle(Pointer __path, Pointer __arg, Object... varArgs1);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:517</i>
	 */
	int execle(String __path, String __arg, Object... varArgs1);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:522</i><br>
	 * @deprecated use the safer methods {@link #execl(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execl(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execl(Pointer __path, Pointer __arg, Object... varArgs1);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:522</i>
	 */
	int execl(String __path, String __arg, Object... varArgs1);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:527</i><br>
	 * @deprecated use the safer methods {@link #execvp(java.lang.String, java.lang.String[])} and {@link #execvp(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execvp(Pointer __file, PointerByReference __argv);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(const char*, const char*[])</code><br>
	 * <i>native declaration : unistd.h:527</i>
	 */
	int execvp(String __file, String __argv[]);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:533</i><br>
	 * @deprecated use the safer methods {@link #execlp(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execlp(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execlp(Pointer __file, Pointer __arg, Object... varArgs1);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(const char*, const char*, null)</code><br>
	 * <i>native declaration : unistd.h:533</i>
	 */
	int execlp(String __file, String __arg, Object... varArgs1);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvpe(const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:539</i><br>
	 * @deprecated use the safer methods {@link #execvpe(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #execvpe(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execvpe(Pointer __file, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvpe(const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : unistd.h:539</i>
	 */
	int execvpe(String __file, String __argv[], String __envp[]);
	/**
	 * Add INC to priority of the current process.<br>
	 * Original signature : <code>int nice(int)</code><br>
	 * <i>native declaration : unistd.h:547</i>
	 */
	int nice(int __inc);
	/**
	 * Terminate program execution with the low-order 8 bits of STATUS.<br>
	 * Original signature : <code>void _exit(int)</code><br>
	 * <i>native declaration : unistd.h:552</i>
	 */
	void _exit(int __status);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long long pathconf(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:475</i><br>
	 * @deprecated use the safer methods {@link #pathconf(java.lang.String, int)} and {@link #pathconf(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	long pathconf(Pointer __path, int __name);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long long pathconf(const char*, int)</code><br>
	 * <i>native declaration : unistd.h:475</i>
	 */
	long pathconf(String __path, int __name);
	/**
	 * Get file-specific configuration about descriptor FD.<br>
	 * Original signature : <code>long long fpathconf(int, int)</code><br>
	 * <i>native declaration : unistd.h:479</i>
	 */
	long fpathconf(int __fd, int __name);
	/**
	 * Get the value of the system variable NAME.<br>
	 * Original signature : <code>long long sysconf(int)</code><br>
	 * <i>native declaration : unistd.h:482</i>
	 */
	long sysconf(int __name);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:486</i><br>
	 * @deprecated use the safer methods {@link #confstr(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #confstr(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeSize confstr(int __name, Pointer __buf, NativeSize __len);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:486</i>
	 */
	NativeSize confstr(int __name, ByteBuffer __buf, NativeSize __len);
	/**
	 * Get the process ID of the calling process.<br>
	 * Original signature : <code>__pid_t getpid()</code><br>
	 * <i>native declaration : unistd.h:491</i>
	 */
	int getpid();
	/**
	 * Get the process ID of the calling process's parent.<br>
	 * Original signature : <code>__pid_t getppid()</code><br>
	 * <i>native declaration : unistd.h:494</i>
	 */
	int getppid();
	/**
	 * Get the process group ID of the calling process.<br>
	 * Original signature : <code>__pid_t getpgrp()</code><br>
	 * <i>native declaration : unistd.h:497</i>
	 */
	int getpgrp();
	/**
	 * Get the process group ID of process PID.<br>
	 * Original signature : <code>__pid_t __getpgid(__pid_t)</code><br>
	 * <i>native declaration : unistd.h:500</i>
	 */
	int __getpgid(int __pid);
	/**
	 * Original signature : <code>__pid_t getpgid(__pid_t)</code><br>
	 * <i>native declaration : unistd.h:502</i>
	 */
	int getpgid(int __pid);
	/**
	 * Set the process group ID of the process matching PID to PGID.<br>
	 * If PID is zero, the current process's process group ID is set.<br>
	 * If PGID is zero, the process ID of the process is used.<br>
	 * Original signature : <code>int setpgid(__pid_t, __pid_t)</code><br>
	 * <i>native declaration : unistd.h:509</i>
	 */
	int setpgid(int __pid, int __pgid);
	/**
	 * Set the process group ID of the calling process to its own PID.<br>
	 * This is exactly the same as `setpgid (0, 0)'.<br>
	 * Original signature : <code>int setpgrp()</code><br>
	 * <i>native declaration : unistd.h:523</i>
	 */
	int setpgrp();
	/**
	 * Create a new session with the calling process as its leader.<br>
	 * The process group IDs of the session and the calling process<br>
	 * are set to the process ID of the calling process, which is returned.<br>
	 * Original signature : <code>__pid_t setsid()</code><br>
	 * <i>native declaration : unistd.h:530</i>
	 */
	int setsid();
	/**
	 * Return the session ID of the given process.<br>
	 * Original signature : <code>__pid_t getsid(__pid_t)</code><br>
	 * <i>native declaration : unistd.h:534</i>
	 */
	int getsid(int __pid);
	/**
	 * Get the real user ID of the calling process.<br>
	 * Original signature : <code>__uid_t getuid()</code><br>
	 * <i>native declaration : unistd.h:538</i>
	 */
	int getuid();
	/**
	 * Get the effective user ID of the calling process.<br>
	 * Original signature : <code>__uid_t geteuid()</code><br>
	 * <i>native declaration : unistd.h:541</i>
	 */
	int geteuid();
	/**
	 * Get the real group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getgid()</code><br>
	 * <i>native declaration : unistd.h:544</i>
	 */
	int getgid();
	/**
	 * Get the effective group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getegid()</code><br>
	 * <i>native declaration : unistd.h:547</i>
	 */
	int getegid();
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : unistd.h:552</i><br>
	 * @deprecated use the safer methods {@link #getgroups(int, java.nio.IntBuffer)} and {@link #getgroups(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getgroups(int __size, IntByReference __list);
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : unistd.h:552</i>
	 */
	int getgroups(int __size, IntBuffer __list);
	/**
	 * Return nonzero iff the calling process is in group GID.<br>
	 * Original signature : <code>int group_member(__gid_t)</code><br>
	 * <i>native declaration : unistd.h:556</i>
	 */
	int group_member(int __gid);
	/**
	 * Set the user ID of the calling process to UID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective user IDs, and the saved set-user-ID to UID;<br>
	 * if not, the effective user ID is set to UID.<br>
	 * Original signature : <code>int setuid(__uid_t)</code><br>
	 * <i>native declaration : unistd.h:563</i>
	 */
	int setuid(int __uid);
	/**
	 * Set the real user ID of the calling process to RUID,<br>
	 * and the effective user ID of the calling process to EUID.<br>
	 * Original signature : <code>int setreuid(__uid_t, __uid_t)</code><br>
	 * <i>native declaration : unistd.h:568</i>
	 */
	int setreuid(int __ruid, int __euid);
	/**
	 * Set the effective user ID of the calling process to UID.<br>
	 * Original signature : <code>int seteuid(__uid_t)</code><br>
	 * <i>native declaration : unistd.h:573</i>
	 */
	int seteuid(int __uid);
	/**
	 * Set the group ID of the calling process to GID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective group IDs, and the saved set-group-ID to GID;<br>
	 * if not, the effective group ID is set to GID.<br>
	 * Original signature : <code>int setgid(__gid_t)</code><br>
	 * <i>native declaration : unistd.h:580</i>
	 */
	int setgid(int __gid);
	/**
	 * Set the real group ID of the calling process to RGID,<br>
	 * and the effective group ID of the calling process to EGID.<br>
	 * Original signature : <code>int setregid(__gid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:585</i>
	 */
	int setregid(int __rgid, int __egid);
	/**
	 * Set the effective group ID of the calling process to GID.<br>
	 * Original signature : <code>int setegid(__gid_t)</code><br>
	 * <i>native declaration : unistd.h:590</i>
	 */
	int setegid(int __gid);
	/**
	 * Fetch the real user ID, effective user ID, and saved-set user ID,<br>
	 * of the calling process.<br>
	 * Original signature : <code>int getresuid(__uid_t*, __uid_t*, __uid_t*)</code><br>
	 * <i>native declaration : unistd.h:596</i><br>
	 * @deprecated use the safer methods {@link #getresuid(java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #getresuid(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getresuid(IntByReference __ruid, IntByReference __euid, IntByReference __suid);
	/**
	 * Fetch the real user ID, effective user ID, and saved-set user ID,<br>
	 * of the calling process.<br>
	 * Original signature : <code>int getresuid(__uid_t*, __uid_t*, __uid_t*)</code><br>
	 * <i>native declaration : unistd.h:596</i>
	 */
	int getresuid(IntBuffer __ruid, IntBuffer __euid, IntBuffer __suid);
	/**
	 * Fetch the real group ID, effective group ID, and saved-set group ID,<br>
	 * of the calling process.<br>
	 * Original signature : <code>int getresgid(__gid_t*, __gid_t*, __gid_t*)</code><br>
	 * <i>native declaration : unistd.h:601</i><br>
	 * @deprecated use the safer methods {@link #getresgid(java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #getresgid(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getresgid(IntByReference __rgid, IntByReference __egid, IntByReference __sgid);
	/**
	 * Fetch the real group ID, effective group ID, and saved-set group ID,<br>
	 * of the calling process.<br>
	 * Original signature : <code>int getresgid(__gid_t*, __gid_t*, __gid_t*)</code><br>
	 * <i>native declaration : unistd.h:601</i>
	 */
	int getresgid(IntBuffer __rgid, IntBuffer __egid, IntBuffer __sgid);
	/**
	 * Set the real user ID, effective user ID, and saved-set user ID,<br>
	 * of the calling process to RUID, EUID, and SUID, respectively.<br>
	 * Original signature : <code>int setresuid(__uid_t, __uid_t, __uid_t)</code><br>
	 * <i>native declaration : unistd.h:606</i>
	 */
	int setresuid(int __ruid, int __euid, int __suid);
	/**
	 * Set the real group ID, effective group ID, and saved-set group ID,<br>
	 * of the calling process to RGID, EGID, and SGID, respectively.<br>
	 * Original signature : <code>int setresgid(__gid_t, __gid_t, __gid_t)</code><br>
	 * <i>native declaration : unistd.h:611</i>
	 */
	int setresgid(int __rgid, int __egid, int __sgid);
	/**
	 * Clone the calling process, creating an exact copy.<br>
	 * Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t fork()</code><br>
	 * <i>native declaration : unistd.h:619</i>
	 */
	int fork();
	/**
	 * Clone the calling process, but without copying the whole address space.<br>
	 * The calling process is suspended until the new process exits or is<br>
	 * replaced by a call to `execve'.  Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t vfork()</code><br>
	 * <i>native declaration : unistd.h:627</i>
	 */
	int vfork();
	/**
	 * Return the pathname of the terminal FD is open on, or NULL on errors.<br>
	 * The returned storage is good only until the next call to this function.<br>
	 * Original signature : <code>char* ttyname(int)</code><br>
	 * <i>native declaration : unistd.h:633</i>
	 */
	Pointer ttyname(int __fd);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:637</i><br>
	 * @deprecated use the safer methods {@link #ttyname_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ttyname_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int ttyname_r(int __fd, Pointer __buf, NativeSize __buflen);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:637</i>
	 */
	int ttyname_r(int __fd, ByteBuffer __buf, NativeSize __buflen);
	/**
	 * Return 1 if FD is a valid descriptor associated<br>
	 * with a terminal, zero if not.<br>
	 * Original signature : <code>int isatty(int)</code><br>
	 * <i>native declaration : unistd.h:642</i>
	 */
	int isatty(int __fd);
	/**
	 * Return the index into the active-logins file (utmp) for<br>
	 * the controlling terminal.<br>
	 * Original signature : <code>int ttyslot()</code><br>
	 * <i>native declaration : unistd.h:648</i>
	 */
	int ttyslot();
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:653</i><br>
	 * @deprecated use the safer methods {@link #link(java.lang.String, java.lang.String)} and {@link #link(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int link(Pointer __from, Pointer __to);
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:653</i>
	 */
	int link(String __from, String __to);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:659</i><br>
	 * @deprecated use the safer methods {@link #linkat(int, java.lang.String, int, java.lang.String, int)} and {@link #linkat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int linkat(int __fromfd, Pointer __from, int __tofd, Pointer __to, int __flags);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:659</i>
	 */
	int linkat(int __fromfd, String __from, int __tofd, String __to, int __flags);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:666</i><br>
	 * @deprecated use the safer methods {@link #symlink(java.lang.String, java.lang.String)} and {@link #symlink(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlink(Pointer __from, Pointer __to);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(const char*, const char*)</code><br>
	 * <i>native declaration : unistd.h:666</i>
	 */
	int symlink(String __from, String __to);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:672</i><br>
	 * @deprecated use the safer methods {@link #readlink(java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #readlink(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int readlink(Pointer __path, Pointer __buf, NativeSize __len);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:672</i>
	 */
	int readlink(String __path, ByteBuffer __buf, NativeSize __len);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(const char*, int, const char*)</code><br>
	 * <i>native declaration : unistd.h:679</i><br>
	 * @deprecated use the safer methods {@link #symlinkat(java.lang.String, int, java.lang.String)} and {@link #symlinkat(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlinkat(Pointer __from, int __tofd, Pointer __to);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(const char*, int, const char*)</code><br>
	 * <i>native declaration : unistd.h:679</i>
	 */
	int symlinkat(String __from, int __tofd, String __to);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:683</i><br>
	 * @deprecated use the safer methods {@link #readlinkat(int, java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #readlinkat(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int readlinkat(int __fd, Pointer __path, Pointer __buf, NativeSize __len);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, const char*, char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:683</i>
	 */
	int readlinkat(int __fd, String __path, ByteBuffer __buf, NativeSize __len);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(const char*)</code><br>
	 * <i>native declaration : unistd.h:689</i><br>
	 * @deprecated use the safer methods {@link #unlink(java.lang.String)} and {@link #unlink(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unlink(Pointer __name);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(const char*)</code><br>
	 * <i>native declaration : unistd.h:689</i>
	 */
	int unlink(String __name);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:693</i><br>
	 * @deprecated use the safer methods {@link #unlinkat(int, java.lang.String, int)} and {@link #unlinkat(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int unlinkat(int __fd, Pointer __name, int __flag);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, const char*, int)</code><br>
	 * <i>native declaration : unistd.h:693</i>
	 */
	int unlinkat(int __fd, String __name, int __flag);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:698</i><br>
	 * @deprecated use the safer methods {@link #rmdir(java.lang.String)} and {@link #rmdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rmdir(Pointer __path);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(const char*)</code><br>
	 * <i>native declaration : unistd.h:698</i>
	 */
	int rmdir(String __path);
	/**
	 * Return the foreground process group ID of FD.<br>
	 * Original signature : <code>__pid_t tcgetpgrp(int)</code><br>
	 * <i>native declaration : unistd.h:702</i>
	 */
	int tcgetpgrp(int __fd);
	/**
	 * Set the foreground process group ID of FD set PGRP_ID.<br>
	 * Original signature : <code>int tcsetpgrp(int, __pid_t)</code><br>
	 * <i>native declaration : unistd.h:705</i>
	 */
	int tcsetpgrp(int __fd, int __pgrp_id);
	/**
	 * Return the login name of the user.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* getlogin()</code><br>
	 * <i>native declaration : unistd.h:712</i>
	 */
	Pointer getlogin();
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:720</i><br>
	 * @deprecated use the safer methods {@link #getlogin_r(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #getlogin_r(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int getlogin_r(Pointer __name, NativeSize __name_len);
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:720</i>
	 */
	int getlogin_r(ByteBuffer __name, NativeSize __name_len);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(const char*)</code><br>
	 * <i>native declaration : unistd.h:725</i><br>
	 * @deprecated use the safer methods {@link #setlogin(java.lang.String)} and {@link #setlogin(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int setlogin(Pointer __name);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(const char*)</code><br>
	 * <i>native declaration : unistd.h:725</i>
	 */
	int setlogin(String __name);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:710</i><br>
	 * @deprecated use the safer methods {@link #gethostname(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #gethostname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int gethostname(Pointer __name, NativeSize __len);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:710</i>
	 */
	int gethostname(ByteBuffer __name, NativeSize __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:717</i><br>
	 * @deprecated use the safer methods {@link #sethostname(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #sethostname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int sethostname(Pointer __name, NativeSize __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:717</i>
	 */
	int sethostname(String __name, NativeSize __len);
	/**
	 * Set the current machine's Internet number to ID.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostid(long long)</code><br>
	 * <i>native declaration : unistd.h:722</i>
	 */
	int sethostid(long __id);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:728</i><br>
	 * @deprecated use the safer methods {@link #getdomainname(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #getdomainname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int getdomainname(Pointer __name, NativeSize __len);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:728</i>
	 */
	int getdomainname(ByteBuffer __name, NativeSize __len);
	/**
	 * Original signature : <code>int setdomainname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:730</i><br>
	 * @deprecated use the safer methods {@link #setdomainname(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #setdomainname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int setdomainname(Pointer __name, NativeSize __len);
	/**
	 * Original signature : <code>int setdomainname(const char*, size_t)</code><br>
	 * <i>native declaration : unistd.h:730</i>
	 */
	int setdomainname(String __name, NativeSize __len);
	/**
	 * Revoke access permissions to all processes currently communicating<br>
	 * with the control terminal, and then send a SIGHUP signal to the process<br>
	 * group of the control terminal.<br>
	 * Original signature : <code>int vhangup()</code><br>
	 * <i>native declaration : unistd.h:737</i>
	 */
	int vhangup();
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(const char*)</code><br>
	 * <i>native declaration : unistd.h:740</i><br>
	 * @deprecated use the safer methods {@link #revoke(java.lang.String)} and {@link #revoke(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int revoke(Pointer __file);
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(const char*)</code><br>
	 * <i>native declaration : unistd.h:740</i>
	 */
	int revoke(String __file);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : unistd.h:748</i><br>
	 * @deprecated use the safer methods {@link #profil(java.nio.ShortBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} and {@link #profil(com.sun.jna.ptr.ShortByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} instead
	 */
	@Deprecated 
	int profil(ShortByReference __sample_buffer, NativeSize __size, NativeSize __offset, int __scale);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : unistd.h:748</i>
	 */
	int profil(ShortBuffer __sample_buffer, NativeSize __size, NativeSize __offset, int __scale);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(const char*)</code><br>
	 * <i>native declaration : unistd.h:756</i><br>
	 * @deprecated use the safer methods {@link #acct(java.lang.String)} and {@link #acct(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int acct(Pointer __name);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(const char*)</code><br>
	 * <i>native declaration : unistd.h:756</i>
	 */
	int acct(String __name);
	/**
	 * Successive calls return the shells listed in `/etc/shells'.<br>
	 * Original signature : <code>char* getusershell()</code><br>
	 * <i>native declaration : unistd.h:760</i>
	 */
	Pointer getusershell();
	/**
	 * Discard cached info.<br>
	 * Original signature : <code>void endusershell()</code><br>
	 * <i>native declaration : unistd.h:761</i>
	 */
	void endusershell();
	/**
	 * Rewind and re-read the file.<br>
	 * Original signature : <code>void setusershell()</code><br>
	 * <i>native declaration : unistd.h:762</i>
	 */
	void setusershell();
	/**
	 * Put the program in the background, and dissociate from the controlling<br>
	 * terminal.  If NOCHDIR is zero, do `chdir ("/")'.  If NOCLOSE is zero,<br>
	 * redirects stdin, stdout, and stderr to /dev/null.<br>
	 * Original signature : <code>int daemon(int, int)</code><br>
	 * <i>native declaration : unistd.h:768</i>
	 */
	int daemon(int __nochdir, int __noclose);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(const char*)</code><br>
	 * <i>native declaration : unistd.h:775</i><br>
	 * @deprecated use the safer methods {@link #chroot(java.lang.String)} and {@link #chroot(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chroot(Pointer __path);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(const char*)</code><br>
	 * <i>native declaration : unistd.h:775</i>
	 */
	int chroot(String __path);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(const char*)</code><br>
	 * <i>native declaration : unistd.h:779</i><br>
	 * @deprecated use the safer methods {@link #getpass(java.lang.String)} and {@link #getpass(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getpass(Pointer __prompt);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(const char*)</code><br>
	 * <i>native declaration : unistd.h:779</i>
	 */
	Pointer getpass(String __prompt);
	/**
	 * Make all changes done to FD actually appear on disk.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int fsync(int)</code><br>
	 * <i>native declaration : unistd.h:787</i>
	 */
	int fsync(int __fd);
	/**
	 * Make all changes done to all files on the file system associated<br>
	 * with FD actually appear on disk.<br>
	 * Original signature : <code>int syncfs(int)</code><br>
	 * <i>native declaration : unistd.h:793</i>
	 */
	int syncfs(int __fd);
	/**
	 * Return identifier for the current host.<br>
	 * Original signature : <code>long long gethostid()</code><br>
	 * <i>native declaration : unistd.h:800</i>
	 */
	long gethostid();
	/**
	 * Make all changes done to all files actually appear on disk.<br>
	 * Original signature : <code>void sync()</code><br>
	 * <i>native declaration : unistd.h:803</i>
	 */
	void sync();
	/**
	 * Return the number of bytes in a page.  This is the system's page size,<br>
	 * which is not necessarily the same as the hardware page size.<br>
	 * Original signature : <code>int getpagesize()</code><br>
	 * <i>native declaration : unistd.h:809</i>
	 */
	int getpagesize();
	/**
	 * Return the maximum number of file descriptors<br>
	 * the current process could possibly have.<br>
	 * Original signature : <code>int getdtablesize()</code><br>
	 * <i>native declaration : unistd.h:814</i>
	 */
	int getdtablesize();
	/**
	 * Truncate FILE to LENGTH bytes.<br>
	 * Original signature : <code>int truncate(const char*, __off_t)</code><br>
	 * <i>native declaration : unistd.h:824</i><br>
	 * @deprecated use the safer methods {@link #truncate(java.lang.String, long)} and {@link #truncate(com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int truncate(Pointer __file, long __length);
	/**
	 * Truncate FILE to LENGTH bytes.<br>
	 * Original signature : <code>int truncate(const char*, __off_t)</code><br>
	 * <i>native declaration : unistd.h:824</i>
	 */
	int truncate(String __file, long __length);
	/**
	 * Original signature : <code>int truncate64(const char*, __off64_t)</code><br>
	 * <i>native declaration : unistd.h:836</i><br>
	 * @deprecated use the safer methods {@link #truncate64(java.lang.String, long)} and {@link #truncate64(com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	int truncate64(Pointer __file, long __length);
	/**
	 * Original signature : <code>int truncate64(const char*, __off64_t)</code><br>
	 * <i>native declaration : unistd.h:836</i>
	 */
	int truncate64(String __file, long __length);
	/**
	 * Truncate the file FD is open on to LENGTH bytes.<br>
	 * Original signature : <code>int ftruncate(int, __off_t)</code><br>
	 * <i>native declaration : unistd.h:847</i>
	 */
	int ftruncate(int __fd, long __length);
	/**
	 * Original signature : <code>int ftruncate64(int, __off64_t)</code><br>
	 * <i>native declaration : unistd.h:857</i>
	 */
	int ftruncate64(int __fd, long __length);
	/**
	 * Set the end of accessible data space (aka "the break") to ADDR.<br>
	 * Returns zero on success and -1 for errors (with errno set).<br>
	 * Original signature : <code>int brk(void*)</code><br>
	 * <i>native declaration : unistd.h:868</i>
	 */
	int brk(Pointer __addr);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : unistd.h:874</i><br>
	 * @deprecated use the safer methods {@link #sbrk(java.nio.IntBuffer)} and {@link #sbrk(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer sbrk(IntByReference __delta);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : unistd.h:874</i>
	 */
	Pointer sbrk(IntBuffer __delta);
	/**
	 * Invoke `system call' number SYSNO, passing it the remaining arguments.<br>
	 * This is completely system-dependent, and not often useful.<br>
	 * In Unix, `syscall' sets `errno' for all errors and most calls return -1<br>
	 * for errors; in many systems you cannot pass arguments or get return<br>
	 * values for all system calls (`pipe', `fork', and `getppid' typically<br>
	 * among them).<br>
	 * In Mach, all system calls take normal arguments and always return an<br>
	 * error code (zero for success).<br>
	 * Original signature : <code>long long syscall(long long, null)</code><br>
	 * <i>native declaration : unistd.h:889</i>
	 */
	long syscall(long __sysno, Object... varArgs1);
	/**
	 * `lockf' is a simpler interface to the locking facilities of `fcntl'.<br>
	 * LEN is always relative to the current file position.<br>
	 * The CMD argument is one of the following.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int lockf(int, int, __off_t)</code><br>
	 * <i>native declaration : unistd.h:912</i>
	 */
	int lockf(int __fd, int __cmd, long __len);
	/**
	 * Original signature : <code>int lockf64(int, int, __off64_t)</code><br>
	 * <i>native declaration : unistd.h:922</i>
	 */
	int lockf64(int __fd, int __cmd, long __len);
	/**
	 * Synchronize at least the data part of a file with the underlying<br>
	 * media.<br>
	 * Original signature : <code>int fdatasync(int)</code><br>
	 * <i>native declaration : unistd.h:943</i>
	 */
	int fdatasync(int __fildes);
	/**
	 * Swab pairs bytes in the first N bytes of the area pointed to by<br>
	 * FROM and copy the result to TO.  The value of TO must not be in the<br>
	 * range [FROM - N + 1, FROM - 1].  If N is odd the first byte in FROM<br>
	 * is without partner.<br>
	 * Original signature : <code>void swab(const void*, void*, ssize_t)</code><br>
	 * <i>native declaration : unistd.h:964</i>
	 */
	void swab(Pointer __from, Pointer __to, int __n);
	/**
	 * Allocate a block that will be freed when the calling function exits.<br>
	 * Original signature : <code>void* alloca(size_t)</code><br>
	 * <i>native declaration : alloca.h:8</i>
	 */
	Pointer alloca(NativeSize __size);
	/**
	 * Copy N bytes of SRC to DEST.<br>
	 * Original signature : <code>void* memcpy(void*, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:14</i>
	 */
	Pointer memcpy(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Copy N bytes of SRC to DEST, guaranteeing<br>
	 * correct behavior for overlapping strings.<br>
	 * Original signature : <code>void* memmove(void*, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:18</i>
	 */
	Pointer memmove(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Copy no more than N bytes of SRC to DEST, stopping when C is found.<br>
	 * Return the position in DEST one byte past where C was copied,<br>
	 * or NULL if C was not found in the first N bytes of SRC.<br>
	 * Original signature : <code>void* memccpy(void*, const void*, int, size_t)</code><br>
	 * <i>native declaration : string.h:26</i>
	 */
	Pointer memccpy(Pointer __dest, Pointer __src, int __c, NativeSize __n);
	/**
	 * Set N bytes of S to C.<br>
	 * Original signature : <code>void* memset(void*, int, size_t)</code><br>
	 * <i>native declaration : string.h:34</i>
	 */
	Pointer memset(Pointer __s, int __c, NativeSize __n);
	/**
	 * Compare N bytes of S1 and S2.<br>
	 * Original signature : <code>int memcmp(const void*, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:37</i>
	 */
	int memcmp(Pointer __s1, Pointer __s2, NativeSize __n);
	/**
	 * Search N bytes of S for C.<br>
	 * Original signature : <code>void* memchr(const void*, int, size_t)</code><br>
	 * <i>native declaration : string.h:64</i>
	 */
	Pointer memchr(Pointer __s, int __c, NativeSize __n);
	/**
	 * Search in S for C.  This is similar to `memchr' but there is no<br>
	 * length limit.<br>
	 * Original signature : <code>void* rawmemchr(const void*, int)</code><br>
	 * <i>native declaration : string.h:78</i>
	 */
	Pointer rawmemchr(Pointer __s, int __c);
	/**
	 * Search N bytes of S for the final occurrence of C.<br>
	 * Original signature : <code>void* memrchr(const void*, int, size_t)</code><br>
	 * <i>native declaration : string.h:89</i>
	 */
	Pointer memrchr(Pointer __s, int __c, NativeSize __n);
	/**
	 * Copy SRC to DEST.<br>
	 * Original signature : <code>char* strcpy(char*, const char*)</code><br>
	 * <i>native declaration : string.h:97</i><br>
	 * @deprecated use the safer methods {@link #strcpy(java.nio.ByteBuffer, java.lang.String)} and {@link #strcpy(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strcpy(Pointer __dest, Pointer __src);
	/**
	 * Copy SRC to DEST.<br>
	 * Original signature : <code>char* strcpy(char*, const char*)</code><br>
	 * <i>native declaration : string.h:97</i>
	 */
	Pointer strcpy(ByteBuffer __dest, String __src);
	/**
	 * Copy no more than N characters of SRC to DEST.<br>
	 * Original signature : <code>char* strncpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:100</i><br>
	 * @deprecated use the safer methods {@link #strncpy(java.nio.ByteBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncpy(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer strncpy(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Copy no more than N characters of SRC to DEST.<br>
	 * Original signature : <code>char* strncpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:100</i>
	 */
	Pointer strncpy(ByteBuffer __dest, String __src, NativeSize __n);
	/**
	 * Append SRC onto DEST.<br>
	 * Original signature : <code>char* strcat(char*, const char*)</code><br>
	 * <i>native declaration : string.h:105</i><br>
	 * @deprecated use the safer methods {@link #strcat(java.nio.ByteBuffer, java.lang.String)} and {@link #strcat(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strcat(Pointer __dest, Pointer __src);
	/**
	 * Append SRC onto DEST.<br>
	 * Original signature : <code>char* strcat(char*, const char*)</code><br>
	 * <i>native declaration : string.h:105</i>
	 */
	Pointer strcat(ByteBuffer __dest, String __src);
	/**
	 * Append no more than N characters from SRC onto DEST.<br>
	 * Original signature : <code>char* strncat(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:108</i><br>
	 * @deprecated use the safer methods {@link #strncat(java.nio.ByteBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncat(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer strncat(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Append no more than N characters from SRC onto DEST.<br>
	 * Original signature : <code>char* strncat(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:108</i>
	 */
	Pointer strncat(ByteBuffer __dest, String __src, NativeSize __n);
	/**
	 * Compare S1 and S2.<br>
	 * Original signature : <code>int strcmp(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:112</i><br>
	 * @deprecated use the safer methods {@link #strcmp(java.lang.String, java.lang.String)} and {@link #strcmp(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int strcmp(Pointer __s1, Pointer __s2);
	/**
	 * Compare S1 and S2.<br>
	 * Original signature : <code>int strcmp(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:112</i>
	 */
	int strcmp(String __s1, String __s2);
	/**
	 * Compare N characters of S1 and S2.<br>
	 * Original signature : <code>int strncmp(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:115</i><br>
	 * @deprecated use the safer methods {@link #strncmp(java.lang.String, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncmp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int strncmp(Pointer __s1, Pointer __s2, NativeSize __n);
	/**
	 * Compare N characters of S1 and S2.<br>
	 * Original signature : <code>int strncmp(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:115</i>
	 */
	int strncmp(String __s1, String __s2, NativeSize __n);
	/**
	 * Compare the collated forms of S1 and S2.<br>
	 * Original signature : <code>int strcoll(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:119</i><br>
	 * @deprecated use the safer methods {@link #strcoll(java.lang.String, java.lang.String)} and {@link #strcoll(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int strcoll(Pointer __s1, Pointer __s2);
	/**
	 * Compare the collated forms of S1 and S2.<br>
	 * Original signature : <code>int strcoll(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:119</i>
	 */
	int strcoll(String __s1, String __s2);
	/**
	 * Put a transformation of SRC into no more than N bytes of DEST.<br>
	 * Original signature : <code>size_t strxfrm(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:122</i><br>
	 * @deprecated use the safer methods {@link #strxfrm(java.nio.ByteBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strxfrm(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeSize strxfrm(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Put a transformation of SRC into no more than N bytes of DEST.<br>
	 * Original signature : <code>size_t strxfrm(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:122</i>
	 */
	NativeSize strxfrm(ByteBuffer __dest, String __src, NativeSize __n);
	/**
	 * Compare the collated forms of S1 and S2 using rules from L.<br>
	 * Original signature : <code>int strcoll_l(const char*, const char*, __locale_t)</code><br>
	 * <i>native declaration : string.h:135</i><br>
	 * @deprecated use the safer methods {@link #strcoll_l(java.lang.String, java.lang.String, voice.linux.jna.__locale_struct)} and {@link #strcoll_l(com.sun.jna.Pointer, com.sun.jna.Pointer, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	int strcoll_l(Pointer __s1, Pointer __s2, __locale_struct __l);
	/**
	 * Compare the collated forms of S1 and S2 using rules from L.<br>
	 * Original signature : <code>int strcoll_l(const char*, const char*, __locale_t)</code><br>
	 * <i>native declaration : string.h:135</i>
	 */
	int strcoll_l(String __s1, String __s2, __locale_struct __l);
	/**
	 * Put a transformation of SRC into no more than N bytes of DEST.<br>
	 * Original signature : <code>size_t strxfrm_l(char*, const char*, size_t, __locale_t)</code><br>
	 * <i>native declaration : string.h:138</i><br>
	 * @deprecated use the safer methods {@link #strxfrm_l(java.nio.ByteBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize, voice.linux.jna.__locale_struct)} and {@link #strxfrm_l(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	NativeSize strxfrm_l(Pointer __dest, Pointer __src, NativeSize __n, __locale_struct __l);
	/**
	 * Put a transformation of SRC into no more than N bytes of DEST.<br>
	 * Original signature : <code>size_t strxfrm_l(char*, const char*, size_t, __locale_t)</code><br>
	 * <i>native declaration : string.h:138</i>
	 */
	NativeSize strxfrm_l(ByteBuffer __dest, String __src, NativeSize __n, __locale_struct __l);
	/**
	 * Duplicate S, returning an identical malloc'd string.<br>
	 * Original signature : <code>char* strdup(const char*)</code><br>
	 * <i>native declaration : string.h:145</i><br>
	 * @deprecated use the safer methods {@link #strdup(java.lang.String)} and {@link #strdup(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strdup(Pointer __s);
	/**
	 * Duplicate S, returning an identical malloc'd string.<br>
	 * Original signature : <code>char* strdup(const char*)</code><br>
	 * <i>native declaration : string.h:145</i>
	 */
	Pointer strdup(String __s);
	/**
	 * Return a malloc'd copy of at most N bytes of STRING.  The<br>
	 * resultant string is terminated even if no null terminator<br>
	 * appears before STRING[N].<br>
	 * Original signature : <code>char* strndup(const char*, size_t)</code><br>
	 * <i>native declaration : string.h:153</i><br>
	 * @deprecated use the safer methods {@link #strndup(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strndup(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer strndup(Pointer __string, NativeSize __n);
	/**
	 * Return a malloc'd copy of at most N bytes of STRING.  The<br>
	 * resultant string is terminated even if no null terminator<br>
	 * appears before STRING[N].<br>
	 * Original signature : <code>char* strndup(const char*, size_t)</code><br>
	 * <i>native declaration : string.h:153</i>
	 */
	Pointer strndup(String __string, NativeSize __n);
	/**
	 * Find the first occurrence of C in S.<br>
	 * Original signature : <code>char* strchr(const char*, int)</code><br>
	 * <i>native declaration : string.h:205</i><br>
	 * @deprecated use the safer methods {@link #strchr(java.lang.String, int)} and {@link #strchr(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer strchr(Pointer __s, int __c);
	/**
	 * Find the first occurrence of C in S.<br>
	 * Original signature : <code>char* strchr(const char*, int)</code><br>
	 * <i>native declaration : string.h:205</i>
	 */
	Pointer strchr(String __s, int __c);
	/**
	 * Find the last occurrence of C in S.<br>
	 * Original signature : <code>char* strrchr(const char*, int)</code><br>
	 * <i>native declaration : string.h:232</i><br>
	 * @deprecated use the safer methods {@link #strrchr(java.lang.String, int)} and {@link #strrchr(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer strrchr(Pointer __s, int __c);
	/**
	 * Find the last occurrence of C in S.<br>
	 * Original signature : <code>char* strrchr(const char*, int)</code><br>
	 * <i>native declaration : string.h:232</i>
	 */
	Pointer strrchr(String __s, int __c);
	/**
	 * This function is similar to `strchr'.  But it returns a pointer to<br>
	 * the closing NUL byte in case C is not found in S.<br>
	 * Original signature : <code>char* strchrnul(const char*, int)</code><br>
	 * <i>native declaration : string.h:246</i><br>
	 * @deprecated use the safer methods {@link #strchrnul(java.lang.String, int)} and {@link #strchrnul(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer strchrnul(Pointer __s, int __c);
	/**
	 * This function is similar to `strchr'.  But it returns a pointer to<br>
	 * the closing NUL byte in case C is not found in S.<br>
	 * Original signature : <code>char* strchrnul(const char*, int)</code><br>
	 * <i>native declaration : string.h:246</i>
	 */
	Pointer strchrnul(String __s, int __c);
	/**
	 * Return the length of the initial segment of S which<br>
	 * consists entirely of characters not in REJECT.<br>
	 * Original signature : <code>size_t strcspn(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:254</i><br>
	 * @deprecated use the safer methods {@link #strcspn(java.lang.String, java.lang.String)} and {@link #strcspn(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeSize strcspn(Pointer __s, Pointer __reject);
	/**
	 * Return the length of the initial segment of S which<br>
	 * consists entirely of characters not in REJECT.<br>
	 * Original signature : <code>size_t strcspn(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:254</i>
	 */
	NativeSize strcspn(String __s, String __reject);
	/**
	 * Return the length of the initial segment of S which<br>
	 * consists entirely of characters in ACCEPT.<br>
	 * Original signature : <code>size_t strspn(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:258</i><br>
	 * @deprecated use the safer methods {@link #strspn(java.lang.String, java.lang.String)} and {@link #strspn(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeSize strspn(Pointer __s, Pointer __accept);
	/**
	 * Return the length of the initial segment of S which<br>
	 * consists entirely of characters in ACCEPT.<br>
	 * Original signature : <code>size_t strspn(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:258</i>
	 */
	NativeSize strspn(String __s, String __accept);
	/**
	 * Find the first occurrence in S of any character in ACCEPT.<br>
	 * Original signature : <code>char* strpbrk(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:284</i><br>
	 * @deprecated use the safer methods {@link #strpbrk(java.lang.String, java.lang.String)} and {@link #strpbrk(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strpbrk(Pointer __s, Pointer __accept);
	/**
	 * Find the first occurrence in S of any character in ACCEPT.<br>
	 * Original signature : <code>char* strpbrk(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:284</i>
	 */
	Pointer strpbrk(String __s, String __accept);
	/**
	 * Find the first occurrence of NEEDLE in HAYSTACK.<br>
	 * Original signature : <code>char* strstr(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:311</i><br>
	 * @deprecated use the safer methods {@link #strstr(java.lang.String, java.lang.String)} and {@link #strstr(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strstr(Pointer __haystack, Pointer __needle);
	/**
	 * Find the first occurrence of NEEDLE in HAYSTACK.<br>
	 * Original signature : <code>char* strstr(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:311</i>
	 */
	Pointer strstr(String __haystack, String __needle);
	/**
	 * Divide S into tokens separated by characters in DELIM.<br>
	 * Original signature : <code>char* strtok(char*, const char*)</code><br>
	 * <i>native declaration : string.h:317</i><br>
	 * @deprecated use the safer methods {@link #strtok(java.nio.ByteBuffer, java.lang.String)} and {@link #strtok(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strtok(Pointer __s, Pointer __delim);
	/**
	 * Divide S into tokens separated by characters in DELIM.<br>
	 * Original signature : <code>char* strtok(char*, const char*)</code><br>
	 * <i>native declaration : string.h:317</i>
	 */
	Pointer strtok(ByteBuffer __s, String __delim);
	/**
	 * Divide S into tokens separated by characters in DELIM.  Information<br>
	 * passed between calls are stored in SAVE_PTR.<br>
	 * Original signature : <code>char* __strtok_r(char*, const char*, char**)</code><br>
	 * <i>native declaration : string.h:323</i><br>
	 * @deprecated use the safer methods {@link #__strtok_r(java.nio.ByteBuffer, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #__strtok_r(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer __strtok_r(Pointer __s, Pointer __delim, PointerByReference __save_ptr);
	/**
	 * Divide S into tokens separated by characters in DELIM.  Information<br>
	 * passed between calls are stored in SAVE_PTR.<br>
	 * Original signature : <code>char* __strtok_r(char*, const char*, char**)</code><br>
	 * <i>native declaration : string.h:323</i>
	 */
	Pointer __strtok_r(ByteBuffer __s, String __delim, PointerByReference __save_ptr);
	/**
	 * Original signature : <code>char* strtok_r(char*, const char*, char**)</code><br>
	 * <i>native declaration : string.h:328</i><br>
	 * @deprecated use the safer methods {@link #strtok_r(java.nio.ByteBuffer, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtok_r(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer strtok_r(Pointer __s, Pointer __delim, PointerByReference __save_ptr);
	/**
	 * Original signature : <code>char* strtok_r(char*, const char*, char**)</code><br>
	 * <i>native declaration : string.h:328</i>
	 */
	Pointer strtok_r(ByteBuffer __s, String __delim, PointerByReference __save_ptr);
	/**
	 * Similar to `strstr' but this function ignores the case of both strings.<br>
	 * Original signature : <code>char* strcasestr(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:342</i><br>
	 * @deprecated use the safer methods {@link #strcasestr(java.lang.String, java.lang.String)} and {@link #strcasestr(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strcasestr(Pointer __haystack, Pointer __needle);
	/**
	 * Similar to `strstr' but this function ignores the case of both strings.<br>
	 * Original signature : <code>char* strcasestr(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:342</i>
	 */
	Pointer strcasestr(String __haystack, String __needle);
	/**
	 * Find the first occurrence of NEEDLE in HAYSTACK.<br>
	 * NEEDLE is NEEDLELEN bytes long;<br>
	 * HAYSTACK is HAYSTACKLEN bytes long.<br>
	 * Original signature : <code>void* memmem(const void*, size_t, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:351</i>
	 */
	Pointer memmem(Pointer __haystack, NativeSize __haystacklen, Pointer __needle, NativeSize __needlelen);
	/**
	 * Copy N bytes of SRC to DEST, return pointer to bytes after the<br>
	 * last written byte.<br>
	 * Original signature : <code>void* __mempcpy(void*, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:357</i>
	 */
	Pointer __mempcpy(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Original signature : <code>void* mempcpy(void*, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:360</i>
	 */
	Pointer mempcpy(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Return the length of S.<br>
	 * Original signature : <code>size_t strlen(const char*)</code><br>
	 * <i>native declaration : string.h:368</i><br>
	 * @deprecated use the safer methods {@link #strlen(java.lang.String)} and {@link #strlen(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeSize strlen(Pointer __s);
	/**
	 * Return the length of S.<br>
	 * Original signature : <code>size_t strlen(const char*)</code><br>
	 * <i>native declaration : string.h:368</i>
	 */
	NativeSize strlen(String __s);
	/**
	 * Find the length of STRING, but scan at most MAXLEN characters.<br>
	 * If no '\0' terminator is found in that many characters, return MAXLEN.<br>
	 * Original signature : <code>size_t strnlen(const char*, size_t)</code><br>
	 * <i>native declaration : string.h:375</i><br>
	 * @deprecated use the safer methods {@link #strnlen(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strnlen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeSize strnlen(Pointer __string, NativeSize __maxlen);
	/**
	 * Find the length of STRING, but scan at most MAXLEN characters.<br>
	 * If no '\0' terminator is found in that many characters, return MAXLEN.<br>
	 * Original signature : <code>size_t strnlen(const char*, size_t)</code><br>
	 * <i>native declaration : string.h:375</i>
	 */
	NativeSize strnlen(String __string, NativeSize __maxlen);
	/**
	 * Return a string describing the meaning of the `errno' code in ERRNUM.<br>
	 * Original signature : <code>char* strerror(int)</code><br>
	 * <i>native declaration : string.h:382</i>
	 */
	Pointer strerror(int __errnum);
	/**
	 * If a temporary buffer is required, at most BUFLEN bytes of BUF will be<br>
	 * used.<br>
	 * Original signature : <code>char* strerror_r(int, char*, size_t)</code><br>
	 * <i>native declaration : string.h:407</i><br>
	 * @deprecated use the safer methods {@link #strerror_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strerror_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer strerror_r(int __errnum, Pointer __buf, NativeSize __buflen);
	/**
	 * If a temporary buffer is required, at most BUFLEN bytes of BUF will be<br>
	 * used.<br>
	 * Original signature : <code>char* strerror_r(int, char*, size_t)</code><br>
	 * <i>native declaration : string.h:407</i>
	 */
	Pointer strerror_r(int __errnum, ByteBuffer __buf, NativeSize __buflen);
	/**
	 * Translate error number to string according to the locale L.<br>
	 * Original signature : <code>char* strerror_l(int, __locale_t)</code><br>
	 * <i>native declaration : string.h:414</i>
	 */
	Pointer strerror_l(int __errnum, __locale_struct __l);
	/**
	 * We define this function always since `bzero' is sometimes needed when<br>
	 * the namespace rules does not allow this.<br>
	 * Original signature : <code>void __bzero(void*, size_t)</code><br>
	 * <i>native declaration : string.h:420</i>
	 */
	void __bzero(Pointer __s, NativeSize __n);
	/**
	 * Copy N bytes of SRC to DEST (like memmove, but args reversed).<br>
	 * Original signature : <code>void bcopy(const void*, void*, size_t)</code><br>
	 * <i>native declaration : string.h:424</i>
	 */
	void bcopy(Pointer __src, Pointer __dest, NativeSize __n);
	/**
	 * Set N bytes of S to 0.<br>
	 * Original signature : <code>void bzero(void*, size_t)</code><br>
	 * <i>native declaration : string.h:428</i>
	 */
	void bzero(Pointer __s, NativeSize __n);
	/**
	 * Compare N bytes of S1 and S2 (same as memcmp).<br>
	 * Original signature : <code>int bcmp(const void*, const void*, size_t)</code><br>
	 * <i>native declaration : string.h:431</i>
	 */
	int bcmp(Pointer __s1, Pointer __s2, NativeSize __n);
	/**
	 * Find the first occurrence of C in S (same as strchr).<br>
	 * Original signature : <code>char* index(const char*, int)</code><br>
	 * <i>native declaration : string.h:458</i><br>
	 * @deprecated use the safer methods {@link #index(java.lang.String, int)} and {@link #index(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer index(Pointer __s, int __c);
	/**
	 * Find the first occurrence of C in S (same as strchr).<br>
	 * Original signature : <code>char* index(const char*, int)</code><br>
	 * <i>native declaration : string.h:458</i>
	 */
	Pointer index(String __s, int __c);
	/**
	 * Find the last occurrence of C in S (same as strrchr).<br>
	 * Original signature : <code>char* rindex(const char*, int)</code><br>
	 * <i>native declaration : string.h:486</i><br>
	 * @deprecated use the safer methods {@link #rindex(java.lang.String, int)} and {@link #rindex(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer rindex(Pointer __s, int __c);
	/**
	 * Find the last occurrence of C in S (same as strrchr).<br>
	 * Original signature : <code>char* rindex(const char*, int)</code><br>
	 * <i>native declaration : string.h:486</i>
	 */
	Pointer rindex(String __s, int __c);
	/**
	 * Return the position of the first bit set in I, or 0 if none are set.<br>
	 * The least-significant bit is position 1, the most-significant 32.<br>
	 * Original signature : <code>int ffs(int)</code><br>
	 * <i>native declaration : string.h:492</i>
	 */
	int ffs(int __i);
	/**
	 * The following two functions are non-standard but necessary for non-32 bit<br>
	 * platforms.<br>
	 * Original signature : <code>int ffsl(long long)</code><br>
	 * <i>native declaration : string.h:497</i>
	 */
	int ffsl(long __l);
	/**
	 * Original signature : <code>int ffsll(long long long)</code><br>
	 * <i>native declaration : string.h:498</i>
	 */
	int ffsll(long __ll);
	/**
	 * Compare S1 and S2, ignoring case.<br>
	 * Original signature : <code>int strcasecmp(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:503</i><br>
	 * @deprecated use the safer methods {@link #strcasecmp(java.lang.String, java.lang.String)} and {@link #strcasecmp(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int strcasecmp(Pointer __s1, Pointer __s2);
	/**
	 * Compare S1 and S2, ignoring case.<br>
	 * Original signature : <code>int strcasecmp(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:503</i>
	 */
	int strcasecmp(String __s1, String __s2);
	/**
	 * Compare no more than N chars of S1 and S2, ignoring case.<br>
	 * Original signature : <code>int strncasecmp(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:507</i><br>
	 * @deprecated use the safer methods {@link #strncasecmp(java.lang.String, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #strncasecmp(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int strncasecmp(Pointer __s1, Pointer __s2, NativeSize __n);
	/**
	 * Compare no more than N chars of S1 and S2, ignoring case.<br>
	 * Original signature : <code>int strncasecmp(const char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:507</i>
	 */
	int strncasecmp(String __s1, String __s2, NativeSize __n);
	/**
	 * Again versions of a few functions which use the given locale instead<br>
	 * of the global one.<br>
	 * Original signature : <code>int strcasecmp_l(const char*, const char*, __locale_t)</code><br>
	 * <i>native declaration : string.h:514</i><br>
	 * @deprecated use the safer methods {@link #strcasecmp_l(java.lang.String, java.lang.String, voice.linux.jna.__locale_struct)} and {@link #strcasecmp_l(com.sun.jna.Pointer, com.sun.jna.Pointer, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	int strcasecmp_l(Pointer __s1, Pointer __s2, __locale_struct __loc);
	/**
	 * Again versions of a few functions which use the given locale instead<br>
	 * of the global one.<br>
	 * Original signature : <code>int strcasecmp_l(const char*, const char*, __locale_t)</code><br>
	 * <i>native declaration : string.h:514</i>
	 */
	int strcasecmp_l(String __s1, String __s2, __locale_struct __loc);
	/**
	 * Original signature : <code>int strncasecmp_l(const char*, const char*, size_t, __locale_t)</code><br>
	 * <i>native declaration : string.h:518</i><br>
	 * @deprecated use the safer methods {@link #strncasecmp_l(java.lang.String, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize, voice.linux.jna.__locale_struct)} and {@link #strncasecmp_l(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	int strncasecmp_l(Pointer __s1, Pointer __s2, NativeSize __n, __locale_struct __loc);
	/**
	 * Original signature : <code>int strncasecmp_l(const char*, const char*, size_t, __locale_t)</code><br>
	 * <i>native declaration : string.h:518</i>
	 */
	int strncasecmp_l(String __s1, String __s2, NativeSize __n, __locale_struct __loc);
	/**
	 * Return the next DELIM-delimited token from *STRINGP,<br>
	 * terminating it with a '\0', and update *STRINGP to point past it.<br>
	 * Original signature : <code>char* strsep(char**, const char*)</code><br>
	 * <i>native declaration : string.h:526</i><br>
	 * @deprecated use the safer methods {@link #strsep(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #strsep(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strsep(PointerByReference __stringp, Pointer __delim);
	/**
	 * Return the next DELIM-delimited token from *STRINGP,<br>
	 * terminating it with a '\0', and update *STRINGP to point past it.<br>
	 * Original signature : <code>char* strsep(char**, const char*)</code><br>
	 * <i>native declaration : string.h:526</i>
	 */
	Pointer strsep(PointerByReference __stringp, String __delim);
	/**
	 * Return a string describing the meaning of the signal number in SIG.<br>
	 * Original signature : <code>char* strsignal(int)</code><br>
	 * <i>native declaration : string.h:533</i>
	 */
	Pointer strsignal(int __sig);
	/**
	 * Copy SRC to DEST, returning the address of the terminating '\0' in DEST.<br>
	 * Original signature : <code>char* __stpcpy(char*, const char*)</code><br>
	 * <i>native declaration : string.h:536</i><br>
	 * @deprecated use the safer methods {@link #__stpcpy(java.nio.ByteBuffer, java.lang.String)} and {@link #__stpcpy(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer __stpcpy(Pointer __dest, Pointer __src);
	/**
	 * Copy SRC to DEST, returning the address of the terminating '\0' in DEST.<br>
	 * Original signature : <code>char* __stpcpy(char*, const char*)</code><br>
	 * <i>native declaration : string.h:536</i>
	 */
	Pointer __stpcpy(ByteBuffer __dest, String __src);
	/**
	 * Original signature : <code>char* stpcpy(char*, const char*)</code><br>
	 * <i>native declaration : string.h:538</i><br>
	 * @deprecated use the safer methods {@link #stpcpy(java.nio.ByteBuffer, java.lang.String)} and {@link #stpcpy(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer stpcpy(Pointer __dest, Pointer __src);
	/**
	 * Original signature : <code>char* stpcpy(char*, const char*)</code><br>
	 * <i>native declaration : string.h:538</i>
	 */
	Pointer stpcpy(ByteBuffer __dest, String __src);
	/**
	 * Copy no more than N characters of SRC to DEST, returning the address of<br>
	 * the last character written into DEST.<br>
	 * Original signature : <code>char* __stpncpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:543</i><br>
	 * @deprecated use the safer methods {@link #__stpncpy(java.nio.ByteBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #__stpncpy(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer __stpncpy(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Copy no more than N characters of SRC to DEST, returning the address of<br>
	 * the last character written into DEST.<br>
	 * Original signature : <code>char* __stpncpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:543</i>
	 */
	Pointer __stpncpy(ByteBuffer __dest, String __src, NativeSize __n);
	/**
	 * Original signature : <code>char* stpncpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:546</i><br>
	 * @deprecated use the safer methods {@link #stpncpy(java.nio.ByteBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #stpncpy(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer stpncpy(Pointer __dest, Pointer __src, NativeSize __n);
	/**
	 * Original signature : <code>char* stpncpy(char*, const char*, size_t)</code><br>
	 * <i>native declaration : string.h:546</i>
	 */
	Pointer stpncpy(ByteBuffer __dest, String __src, NativeSize __n);
	/**
	 * Compare S1 and S2 as strings holding name & indices/version numbers.<br>
	 * Original signature : <code>int strverscmp(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:553</i><br>
	 * @deprecated use the safer methods {@link #strverscmp(java.lang.String, java.lang.String)} and {@link #strverscmp(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int strverscmp(Pointer __s1, Pointer __s2);
	/**
	 * Compare S1 and S2 as strings holding name & indices/version numbers.<br>
	 * Original signature : <code>int strverscmp(const char*, const char*)</code><br>
	 * <i>native declaration : string.h:553</i>
	 */
	int strverscmp(String __s1, String __s2);
	/**
	 * Sautee STRING briskly.<br>
	 * Original signature : <code>char* strfry(char*)</code><br>
	 * <i>native declaration : string.h:557</i><br>
	 * @deprecated use the safer methods {@link #strfry(java.nio.ByteBuffer)} and {@link #strfry(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer strfry(Pointer __string);
	/**
	 * Sautee STRING briskly.<br>
	 * Original signature : <code>char* strfry(char*)</code><br>
	 * <i>native declaration : string.h:557</i>
	 */
	Pointer strfry(ByteBuffer __string);
	/**
	 * Frobnicate N bytes of S.<br>
	 * Original signature : <code>void* memfrob(void*, size_t)</code><br>
	 * <i>native declaration : string.h:560</i>
	 */
	Pointer memfrob(Pointer __s, NativeSize __n);
	/**
	 * Return the file name within directory of FILENAME.  We don't<br>
	 * declare the function if the `basename' macro is available (defined<br>
	 * in <libgen.h>) which makes the XPG version of this function<br>
	 * available.<br>
	 * Original signature : <code>char* basename(const char*)</code><br>
	 * <i>native declaration : string.h:573</i><br>
	 * @deprecated use the safer methods {@link #basename(java.lang.String)} and {@link #basename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer basename(Pointer __filename);
	/**
	 * Return the file name within directory of FILENAME.  We don't<br>
	 * declare the function if the `basename' macro is available (defined<br>
	 * in <libgen.h>) which makes the XPG version of this function<br>
	 * available.<br>
	 * Original signature : <code>char* basename(const char*)</code><br>
	 * <i>native declaration : string.h:573</i>
	 */
	Pointer basename(String __filename);
	/**
	 * Function to get address of global `errno' variable.<br>
	 * Original signature : <code>int* __errno_location()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\errno.h:47</i>
	 */
	IntByReference __errno_location();
	/**
	 * Check the first NFDS descriptors each in READFDS (if not NULL) for read<br>
	 * readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS<br>
	 * (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out<br>
	 * after waiting the interval specified therein.  Returns the number of ready<br>
	 * descriptors, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int select(int, fd_set*, fd_set*, fd_set*, timeval*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\select.h:99</i>
	 */
	int select(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, timeval __timeout);
	/**
	 * Same as above only that the TIMEOUT value is given with higher<br>
	 * resolution and a sigmask which is been set temporarily.  This version<br>
	 * should be used.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pselect(int, fd_set*, fd_set*, fd_set*, timespec*, const __sigset_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\select.h:111</i>
	 */
	int pselect(int __nfds, fd_set __readfds, fd_set __writefds, fd_set __exceptfds, CLibrary.timespec __timeout, __sigset_t __sigmask);
	/**
	 * Original signature : <code>int gnu_dev_major(unsigned long long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\sysmacros.h:5</i>
	 */
	int gnu_dev_major(long __dev);
	/**
	 * Original signature : <code>int gnu_dev_minor(unsigned long long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\sysmacros.h:8</i>
	 */
	int gnu_dev_minor(long __dev);
	/**
	 * Original signature : <code>long long long gnu_dev_makedev(unsigned int, unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\sysmacros.h:11</i>
	 */
	long gnu_dev_makedev(int __major, int __minor);
	/**
	 * Read from another process' address space.<br>
	 * Original signature : <code>ssize_t process_vm_readv(pid_t, iovec*, unsigned long long, iovec*, unsigned long long, unsigned long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\\uio.h:34</i>
	 */
	int process_vm_readv(int __pid, iovec __lvec, long __liovcnt, iovec __rvec, long __riovcnt, long __flags);
	/**
	 * Write to another process' address space.<br>
	 * Original signature : <code>ssize_t process_vm_writev(pid_t, iovec*, unsigned long long, iovec*, unsigned long long, unsigned long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\\uio.h:42</i>
	 */
	int process_vm_writev(int __pid, iovec __lvec, long __liovcnt, iovec __rvec, long __riovcnt, long __flags);
	/**
	 * Read data from file descriptor FD, and put the result in the<br>
	 * buffers described by IOVEC, which is a vector of COUNT 'struct iovec's.<br>
	 * The buffers are filled in the order specified.<br>
	 * Operates just like 'read' (see <unistd.h>) except that data are<br>
	 * put in IOVEC instead of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t readv(int, iovec*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h:37</i>
	 */
	int readv(int __fd, iovec __iovec, int __count);
	/**
	 * Write data pointed by the buffers described by IOVEC, which<br>
	 * is a vector of COUNT 'struct iovec's, to file descriptor FD.<br>
	 * The data is written in the order specified.<br>
	 * Operates just like 'write' (see <unistd.h>) except that the data<br>
	 * are taken from IOVEC instead of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t writev(int, iovec*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h:48</i>
	 */
	int writev(int __fd, iovec __iovec, int __count);
	/**
	 * Read data from file descriptor FD at the given position OFFSET<br>
	 * without change the file pointer, and put the result in the buffers<br>
	 * described by IOVEC, which is a vector of COUNT 'struct iovec's.<br>
	 * The buffers are filled in the order specified.  Operates just like<br>
	 * 'pread' (see <unistd.h>) except that data are put in IOVEC instead<br>
	 * of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t preadv(int, iovec*, int, __off_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h:63</i>
	 */
	int preadv(int __fd, iovec __iovec, int __count, long __offset);
	/**
	 * Write data pointed by the buffers described by IOVEC, which is a<br>
	 * vector of COUNT 'struct iovec's, to file descriptor FD at the given<br>
	 * position OFFSET without change the file pointer.  The data is<br>
	 * written in the order specified.  Operates just like 'pwrite' (see<br>
	 * <unistd.h>) except that the data are taken from IOVEC instead of a<br>
	 * contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwritev(int, iovec*, int, __off_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h:75</i>
	 */
	int pwritev(int __fd, iovec __iovec, int __count, long __offset);
	/**
	 * Read data from file descriptor FD at the given position OFFSET<br>
	 * without change the file pointer, and put the result in the buffers<br>
	 * described by IOVEC, which is a vector of COUNT 'struct iovec's.<br>
	 * The buffers are filled in the order specified.  Operates just like<br>
	 * 'pread' (see <unistd.h>) except that data are put in IOVEC instead<br>
	 * of a contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t preadv64(int, iovec*, int, __off64_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h:101</i>
	 */
	int preadv64(int __fd, iovec __iovec, int __count, long __offset);
	/**
	 * Write data pointed by the buffers described by IOVEC, which is a<br>
	 * vector of COUNT 'struct iovec's, to file descriptor FD at the given<br>
	 * position OFFSET without change the file pointer.  The data is<br>
	 * written in the order specified.  Operates just like 'pwrite' (see<br>
	 * <unistd.h>) except that the data are taken from IOVEC instead of a<br>
	 * contiguous buffer.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwritev64(int, iovec*, int, __off64_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\\uio.h:113</i>
	 */
	int pwritev64(int __fd, iovec __iovec, int __count, long __offset);
	/**
	 * Ancillary data object manipulation macros.<br>
	 * Original signature : <code>cmsghdr* __cmsg_nxthdr(msghdr*, cmsghdr*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h:215</i>
	 */
	cmsghdr __cmsg_nxthdr(msghdr __mhdr, cmsghdr __cmsg);
	/**
	 * Create a new socket of type TYPE in domain DOMAIN, using<br>
	 * protocol PROTOCOL.  If PROTOCOL is zero, one is chosen automatically.<br>
	 * Returns a file descriptor for the new socket, or -1 for errors.<br>
	 * Original signature : <code>int socket(int, int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:108</i>
	 */
	int socket(int __domain, int __type, int __protocol);
	/**
	 * Create two new sockets, of type TYPE in domain DOMAIN and using<br>
	 * protocol PROTOCOL, which are connected to each other, and put file<br>
	 * descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,<br>
	 * one will be chosen automatically.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int socketpair(int, int, int, int[2])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:114</i><br>
	 * @deprecated use the safer methods {@link #socketpair(int, int, int, java.nio.IntBuffer)} and {@link #socketpair(int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int socketpair(int __domain, int __type, int __protocol, IntByReference __fds);
	/**
	 * Create two new sockets, of type TYPE in domain DOMAIN and using<br>
	 * protocol PROTOCOL, which are connected to each other, and put file<br>
	 * descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,<br>
	 * one will be chosen automatically.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int socketpair(int, int, int, int[2])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:114</i>
	 */
	int socketpair(int __domain, int __type, int __protocol, IntBuffer __fds);
	/**
	 * Give the socket FD the local address ADDR (which is LEN bytes long).<br>
	 * Original signature : <code>int bind(int, sockaddr*, socklen_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:118</i>
	 */
	int bind(int __fd, sockaddr __addr, int __len);
	/**
	 * Put the local address of FD into *ADDR and its length in *LEN.<br>
	 * Original signature : <code>int getsockname(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:122</i><br>
	 * @deprecated use the safer methods {@link #getsockname(int, voice.linux.jna.c.sockaddr, java.nio.IntBuffer)} and {@link #getsockname(int, voice.linux.jna.c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getsockname(int __fd, sockaddr __addr, IntByReference __len);
	/**
	 * Put the local address of FD into *ADDR and its length in *LEN.<br>
	 * Original signature : <code>int getsockname(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:122</i>
	 */
	int getsockname(int __fd, sockaddr __addr, IntBuffer __len);
	/**
	 * Open a connection on socket FD to peer at ADDR (which LEN bytes long).<br>
	 * For connectionless socket types, just set the default address to send to<br>
	 * and the only address from which to accept transmissions.<br>
	 * Return 0 on success, -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int connect(int, sockaddr*, socklen_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:132</i>
	 */
	int connect(int __fd, sockaddr __addr, int __len);
	/**
	 * Put the address of the peer connected to socket FD into *ADDR<br>
	 * (which is *LEN bytes long), and its actual length into *LEN.<br>
	 * Original signature : <code>int getpeername(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:136</i><br>
	 * @deprecated use the safer methods {@link #getpeername(int, voice.linux.jna.c.sockaddr, java.nio.IntBuffer)} and {@link #getpeername(int, voice.linux.jna.c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getpeername(int __fd, sockaddr __addr, IntByReference __len);
	/**
	 * Put the address of the peer connected to socket FD into *ADDR<br>
	 * (which is *LEN bytes long), and its actual length into *LEN.<br>
	 * Original signature : <code>int getpeername(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:136</i>
	 */
	int getpeername(int __fd, sockaddr __addr, IntBuffer __len);
	/**
	 * Send N bytes of BUF to socket FD.  Returns the number sent or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t send(int, const void*, size_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:144</i>
	 */
	int send(int __fd, Pointer __buf, NativeSize __n, int __flags);
	/**
	 * Read N bytes into BUF from socket FD.<br>
	 * Returns the number read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recv(int, void*, size_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:151</i>
	 */
	int recv(int __fd, Pointer __buf, NativeSize __n, int __flags);
	/**
	 * Send N bytes of BUF on socket FD to peer at address ADDR (which is<br>
	 * ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t sendto(int, const void*, size_t, int, sockaddr*, socklen_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:158</i>
	 */
	int sendto(int __fd, Pointer __buf, NativeSize __n, int __flags, sockaddr __addr, int __addr_len);
	/**
	 * Read N bytes into BUF through socket FD.<br>
	 * If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of<br>
	 * the sender, and store the actual size of the address in *ADDR_LEN.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:169</i><br>
	 * @deprecated use the safer methods {@link #recvfrom(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, voice.linux.jna.c.sockaddr, java.nio.IntBuffer)} and {@link #recvfrom(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, voice.linux.jna.c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int recvfrom(int __fd, Pointer __buf, NativeSize __n, int __flags, sockaddr __addr, IntByReference __addr_len);
	/**
	 * Read N bytes into BUF through socket FD.<br>
	 * If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of<br>
	 * the sender, and store the actual size of the address in *ADDR_LEN.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:169</i>
	 */
	int recvfrom(int __fd, Pointer __buf, NativeSize __n, int __flags, sockaddr __addr, IntBuffer __addr_len);
	/**
	 * Send a message described MESSAGE on socket FD.<br>
	 * Returns the number of bytes sent, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t sendmsg(int, msghdr*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:179</i>
	 */
	int sendmsg(int __fd, msghdr __message, int __flags);
	/**
	 * Send a VLEN messages as described by VMESSAGES to socket FD.<br>
	 * Returns the number of datagrams successfully written or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sendmmsg(int, mmsghdr*, unsigned int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:188</i>
	 */
	int sendmmsg(int __fd, mmsghdr __vmessages, int __vlen, int __flags);
	/**
	 * Receive a message as described by MESSAGE from socket FD.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t recvmsg(int, msghdr*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:197</i>
	 */
	int recvmsg(int __fd, msghdr __message, int __flags);
	/**
	 * Receive up to VLEN messages as described by VMESSAGES from socket FD.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int recvmmsg(int, mmsghdr*, unsigned int, int, timespec*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:205</i>
	 */
	int recvmmsg(int __fd, mmsghdr __vmessages, int __vlen, int __flags, CLibrary.timespec __tmo);
	/**
	 * Put the current value for socket FD's option OPTNAME at protocol level LEVEL<br>
	 * into OPTVAL (which is *OPTLEN bytes long), and set *OPTLEN to the value's<br>
	 * actual length.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int getsockopt(int, int, int, void*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:214</i><br>
	 * @deprecated use the safer methods {@link #getsockopt(int, int, int, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #getsockopt(int, int, int, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getsockopt(int __fd, int __level, int __optname, Pointer __optval, IntByReference __optlen);
	/**
	 * Put the current value for socket FD's option OPTNAME at protocol level LEVEL<br>
	 * into OPTVAL (which is *OPTLEN bytes long), and set *OPTLEN to the value's<br>
	 * actual length.  Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int getsockopt(int, int, int, void*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:214</i>
	 */
	int getsockopt(int __fd, int __level, int __optname, Pointer __optval, IntBuffer __optlen);
	/**
	 * Set socket FD's option OPTNAME at protocol level LEVEL<br>
	 * to *OPTVAL (which is OPTLEN bytes long).<br>
	 * Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int setsockopt(int, int, int, const void*, socklen_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:221</i>
	 */
	int setsockopt(int __fd, int __level, int __optname, Pointer __optval, int __optlen);
	/**
	 * Prepare to accept connections on socket FD.<br>
	 * N connection requests will be queued before further requests are refused.<br>
	 * Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int listen(int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:228</i>
	 */
	int listen(int __fd, int __n);
	/**
	 * Await a connection on socket FD.<br>
	 * When a connection arrives, open a new socket to communicate with it,<br>
	 * set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting<br>
	 * peer and *ADDR_LEN to the address's actual length, and return the<br>
	 * new socket's descriptor, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int accept(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:238</i><br>
	 * @deprecated use the safer methods {@link #accept(int, voice.linux.jna.c.sockaddr, java.nio.IntBuffer)} and {@link #accept(int, voice.linux.jna.c.sockaddr, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int accept(int __fd, sockaddr __addr, IntByReference __addr_len);
	/**
	 * Await a connection on socket FD.<br>
	 * When a connection arrives, open a new socket to communicate with it,<br>
	 * set *ADDR (which is *ADDR_LEN bytes long) to the address of the connecting<br>
	 * peer and *ADDR_LEN to the address's actual length, and return the<br>
	 * new socket's descriptor, or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int accept(int, sockaddr*, socklen_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:238</i>
	 */
	int accept(int __fd, sockaddr __addr, IntBuffer __addr_len);
	/**
	 * Similar to 'accept' but takes an additional parameter to specify flags.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int accept4(int, sockaddr*, socklen_t*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:246</i><br>
	 * @deprecated use the safer methods {@link #accept4(int, voice.linux.jna.c.sockaddr, java.nio.IntBuffer, int)} and {@link #accept4(int, voice.linux.jna.c.sockaddr, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int accept4(int __fd, sockaddr __addr, IntByReference __addr_len, int __flags);
	/**
	 * Similar to 'accept' but takes an additional parameter to specify flags.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int accept4(int, sockaddr*, socklen_t*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:246</i>
	 */
	int accept4(int __fd, sockaddr __addr, IntBuffer __addr_len, int __flags);
	/**
	 * Shut down all or part of the connection open on socket FD.<br>
	 * HOW determines what to shut down:<br>
	 * SHUT_RD   = No more receptions;<br>
	 * SHUT_WR   = No more transmissions;<br>
	 * SHUT_RDWR = No more receptions or transmissions.<br>
	 * Returns 0 on success, -1 for errors.<br>
	 * Original signature : <code>int shutdown(int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:256</i>
	 */
	int shutdown(int __fd, int __how);
	/**
	 * Determine wheter socket is at a out-of-band mark.<br>
	 * Original signature : <code>int sockatmark(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:261</i>
	 */
	int sockatmark(int __fd);
	/**
	 * FDTYPE is S_IFSOCK or another S_IF* macro defined in <sys/stat.h>;<br>
	 * returns 1 if FD is open on an object of the indicated type, 0 if not,<br>
	 * or -1 for errors (setting errno).<br>
	 * Original signature : <code>int isfdtype(int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\socket.h:269</i>
	 */
	int isfdtype(int __fd, int __fdtype);
	/**
	 * Convert an interface name to an index, and vice versa.<br>
	 * Original signature : <code>int if_nametoindex(const char*)</code><br>
	 * <i>native declaration : net\if.h:191</i><br>
	 * @deprecated use the safer methods {@link #if_nametoindex(java.lang.String)} and {@link #if_nametoindex(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int if_nametoindex(Pointer __ifname);
	/**
	 * Convert an interface name to an index, and vice versa.<br>
	 * Original signature : <code>int if_nametoindex(const char*)</code><br>
	 * <i>native declaration : net\if.h:191</i>
	 */
	int if_nametoindex(String __ifname);
	/**
	 * Original signature : <code>char* if_indextoname(unsigned int, char*)</code><br>
	 * <i>native declaration : net\if.h:192</i><br>
	 * @deprecated use the safer methods {@link #if_indextoname(int, java.nio.ByteBuffer)} and {@link #if_indextoname(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer if_indextoname(int __ifindex, Pointer __ifname);
	/**
	 * Original signature : <code>char* if_indextoname(unsigned int, char*)</code><br>
	 * <i>native declaration : net\if.h:192</i>
	 */
	Pointer if_indextoname(int __ifindex, ByteBuffer __ifname);
	/**
	 * Return a list of all interfaces and their indices.<br>
	 * Original signature : <code>if_nameindex* if_nameindex()</code><br>
	 * <i>native declaration : net\if.h:195</i>
	 */
	if_nameindex if_nameindex();
	/**
	 * Free the data returned from if_nameindex.<br>
	 * Original signature : <code>void if_freenameindex(if_nameindex*)</code><br>
	 * <i>native declaration : net\if.h:198</i>
	 */
	void if_freenameindex(if_nameindex __ptr);
	/**
	 * Perform the I/O control operation specified by REQUEST on FD.<br>
	 * One argument may follow; its presence and type depend on REQUEST.<br>
	 * Return value depends on REQUEST.  Usually -1 indicates error.<br>
	 * Original signature : <code>int ioctl(int, unsigned long long, null)</code><br>
	 * <i>native declaration : arm-linux-gnueabihf\sys\ioctl.h:39</i>
	 */
	int ioctl(int __fd, long __request, Object... varArgs1);
	/**
	 * Provide kernel hint to read ahead.<br>
	 * Original signature : <code>ssize_t readahead(int, __off64_t, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:291</i>
	 */
	int readahead(int __fd, long __offset, NativeSize __count);
	/**
	 * Selective file content synch'ing.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int sync_file_range(int, __off64_t, __off64_t, unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:299</i>
	 */
	int sync_file_range(int __fd, long __offset, long __count, int __flags);
	/**
	 * Splice address range into a pipe.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>ssize_t vmsplice(int, iovec*, size_t, unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:307</i>
	 */
	int vmsplice(int __fdout, iovec __iov, NativeSize __count, int __flags);
	/**
	 * Splice two files together.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>ssize_t splice(int, __off64_t*, int, __off64_t*, size_t, unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:314</i><br>
	 * @deprecated use the safer methods {@link #splice(int, java.nio.LongBuffer, int, java.nio.LongBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} and {@link #splice(int, com.sun.jna.ptr.LongByReference, int, com.sun.jna.ptr.LongByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} instead
	 */
	@Deprecated 
	int splice(int __fdin, LongByReference __offin, int __fdout, LongByReference __offout, NativeSize __len, int __flags);
	/**
	 * Splice two files together.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>ssize_t splice(int, __off64_t*, int, __off64_t*, size_t, unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:314</i>
	 */
	int splice(int __fdin, LongBuffer __offin, int __fdout, LongBuffer __offout, NativeSize __len, int __flags);
	/**
	 * In-kernel implementation of tee for pipe buffers.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>ssize_t tee(int, int, size_t, unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:322</i>
	 */
	int tee(int __fdin, int __fdout, NativeSize __len, int __flags);
	/**
	 * Reserve storage for the data of the file associated with FD.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fallocate(int, int, __off_t, __off_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:330</i>
	 */
	int fallocate(int __fd, int __mode, long __offset, long __len);
	/**
	 * Original signature : <code>int fallocate64(int, int, __off64_t, __off64_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:341</i>
	 */
	int fallocate64(int __fd, int __mode, long __offset, long __len);
	/**
	 * Map file name to file handle.<br>
	 * Original signature : <code>int name_to_handle_at(int, const char*, file_handle*, int*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:347</i><br>
	 * @deprecated use the safer methods {@link #name_to_handle_at(int, java.lang.String, voice.linux.jna.c.file_handle, java.nio.IntBuffer, int)} and {@link #name_to_handle_at(int, com.sun.jna.Pointer, voice.linux.jna.c.file_handle, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int name_to_handle_at(int __dfd, Pointer __name, file_handle __handle, IntByReference __mnt_id, int __flags);
	/**
	 * Map file name to file handle.<br>
	 * Original signature : <code>int name_to_handle_at(int, const char*, file_handle*, int*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:347</i>
	 */
	int name_to_handle_at(int __dfd, String __name, file_handle __handle, IntBuffer __mnt_id, int __flags);
	/**
	 * Open file using the file handle.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int open_by_handle_at(int, file_handle*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:355</i>
	 */
	int open_by_handle_at(int __mountdirfd, file_handle __handle, int __flags);
	/**
	 * Poll the file descriptors described by the NFDS structures starting at<br>
	 * FDS.  If TIMEOUT is nonzero and not -1, allow TIMEOUT milliseconds for<br>
	 * an event to occur; if TIMEOUT is -1, block until an event occurs.<br>
	 * Returns the number of file descriptors with events, zero if timed out,<br>
	 * or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int poll(pollfd*, nfds_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\poll.h:26</i>
	 */
	int poll(pollfd __fds, long __nfds, int __timeout);
	/**
	 * Like poll, but before waiting the threads signal mask is replaced<br>
	 * with that specified in the fourth parameter.  For better usability,<br>
	 * the timeout value is specified using a TIMESPEC object.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int ppoll(pollfd*, nfds_t, timespec*, const __sigset_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\sys\poll.h:35</i>
	 */
	int ppoll(pollfd __fds, long __nfds, CLibrary.timespec __timeout, __sigset_t __ss);
	public static class in_addr extends PointerType {
		public in_addr(Pointer address) {
			super(address);
		}
		public in_addr() {
			super();
		}
	};
	public static class iface extends PointerType {
		public iface(Pointer address) {
			super(address);
		}
		public iface() {
			super();
		}
	};
	public static class timespec extends PointerType {
		public timespec(Pointer address) {
			super(address);
		}
		public timespec() {
			super();
		}
	};
}
