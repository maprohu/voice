package voice.linux.jna;
import com.ochafik.lang.jnaerator.runtime.CharByReference;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Callback;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.WString;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b></b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Library extends com.sun.jna.Library {
	public static final String JNA_LIBRARY_NAME = "";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Library.JNA_LIBRARY_NAME);
	public static final Library INSTANCE = (Library)Native.loadLibrary(Library.JNA_LIBRARY_NAME, Library.class);
	/**
	 * This is the structure from the libstdc++ codecvt class.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:165</i><br>
	 * enum values
	 */
	public static interface __codecvt_result {
		/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:167</i> */
		public static final int __codecvt_ok = 0;
		/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:168</i> */
		public static final int __codecvt_partial = 1;
		/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:169</i> */
		public static final int __codecvt_error = 2;
		/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:170</i> */
		public static final int __codecvt_noconv = 3;
	};
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _ISOC95_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _ISOC99_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _ISOC11_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _XOPEN_SOURCE = (int)700;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _XOPEN_SOURCE_EXTENDED = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _LARGEFILE64_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _DEFAULT_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _BSD_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _SVID_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_ISOC11 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_XOPEN = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_XOPEN_EXTENDED = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_UNIX98 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int _LARGEFILE_SOURCE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_XOPEN2K8XSI = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_XOPEN2KXSI = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_LARGEFILE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_LARGEFILE64 = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_MISC = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_BSD = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_SVID = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_GNU = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdc-predef.h</i> */
	public static final int _STDC_PREDEF_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdc-predef.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdc-predef.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdc-predef.h</i> */
	public static final int __STDC_ISO_10646__ = (int)201103;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdc-predef.h</i> */
	public static final int __STDC_NO_THREADS__ = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)19;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int SEEK_SET = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int SEEK_CUR = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int SEEK_END = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int SEEK_DATA = (int)3;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int SEEK_HOLE = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\xlocale.h</i> */
	public static final int _XLOCALE_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\time.h</i> */
	public static final int __clock_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\time.h</i> */
	public static final int __time_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\time.h</i> */
	public static final int __clockid_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\time.h</i> */
	public static final int __timer_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int _ENDIAN_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int __LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int __BIG_ENDIAN = (int)4321;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int __PDP_ENDIAN = (int)3412;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int __FLOAT_WORD_ORDER = (int)1234;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int BIG_ENDIAN = (int)4321;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int PDP_ENDIAN = (int)3412;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\endian.h</i> */
	public static final int BYTE_ORDER = (int)1234;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int _STDIO_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int __FILE_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int ____FILE_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\_G_config.h</i> */
	public static final int _G_config_h = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\wchar.h</i> */
	public static final int ____mbstate_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\_G_config.h</i> */
	public static final int _G_HAVE_MMAP = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\_G_config.h</i> */
	public static final int _G_HAVE_MREMAP = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\_G_config.h</i> */
	public static final int _G_IO_IO_FILE_VERSION = (int)0x20001;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\_G_config.h</i> */
	public static final int _G_BUFSIZ = (int)8192;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_BUFSIZ = (int)8192;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_UNIFIED_JUMPTABLES = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int EOF = (int)(-1);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_INPUT = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_OUTPUT = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_ATEND = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_APPEND = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_TRUNC = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_NOCREATE = (int)32;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_NOREPLACE = (int)64;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IOS_BIN = (int)128;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_MAGIC = (int)0xFBAD0000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _OLD_STDIO_MAGIC = (int)0xFABC0000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_MAGIC_MASK = (int)0xFFFF0000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_USER_BUF = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_UNBUFFERED = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_NO_READS = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_NO_WRITES = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_EOF_SEEN = (int)0x10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_ERR_SEEN = (int)0x20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_DELETE_DONT_CLOSE = (int)0x40;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_LINKED = (int)0x80;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_IN_BACKUP = (int)0x100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_LINE_BUF = (int)0x200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_TIED_PUT_GET = (int)0x400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_CURRENTLY_PUTTING = (int)0x800;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_IS_APPENDING = (int)0x1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_IS_FILEBUF = (int)0x2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_BAD_SEEN = (int)0x4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_USER_LOCK = (int)0x8000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_FLAGS2_MMAP = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_FLAGS2_NOTCANCEL = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_FLAGS2_USER_WBUF = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_SKIPWS = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_LEFT = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_RIGHT = (int)4;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_INTERNAL = (int)10;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_DEC = (int)20;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_OCT = (int)40;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_HEX = (int)100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_SHOWBASE = (int)200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_SHOWPOINT = (int)400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_UPPERCASE = (int)1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_SHOWPOS = (int)2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_SCIENTIFIC = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_FIXED = (int)10000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_UNITBUF = (int)20000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_STDIO = (int)40000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_DONT_CLOSE = (int)100000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\libio.h</i> */
	public static final int _IO_BOOLALPHA = (int)200000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int _IOFBF = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int _IOLBF = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int _IONBF = (int)2;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final int BUFSIZ = (int)8192;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h</i> */
	public static final String P_tmpdir = (String)"/tmp";
	/** <i>native declaration : ..\voice\local\headers\\usr\include\byteswap.h</i> */
	public static final int _BYTESWAP_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public static final int _STDLIB_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public static final int __ldiv_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public static final int __lldiv_t_defined = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public static final int RAND_MAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public static final int EXIT_FAILURE = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public static final int EXIT_SUCCESS = (int)0;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int _FCNTL_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFMT = (int)170000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFDIR = (int)040000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFCHR = (int)020000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFBLK = (int)060000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFREG = (int)100000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFIFO = (int)010000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFLNK = (int)120000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IFSOCK = (int)140000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_ISUID = (int)4000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_ISGID = (int)2000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_ISVTX = (int)1000;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IRUSR = (int)400;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IWUSR = (int)200;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IXUSR = (int)100;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IRWXU = (int)(400 | 200 | 100);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IRGRP = (int)(400 >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IWGRP = (int)(200 >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IXGRP = (int)(100 >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IRWXG = (int)((400 | 200 | 100) >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IROTH = (int)((400 >> 3) >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IWOTH = (int)((200 >> 3) >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IXOTH = (int)((100 >> 3) >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h</i> */
	public static final int S_IRWXO = (int)(((400 | 200 | 100) >> 3) >> 3);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\assert.h</i> */
	public static final int _ASSERT_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int _LIBC_LIMITS_H_ = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int MB_LEN_MAX = (int)16;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int _LIMITS_H = (int)1;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int CHAR_BIT = (int)8;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int SCHAR_MIN = (int)(-128);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int SCHAR_MAX = (int)127;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int UCHAR_MAX = (int)255;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int CHAR_MIN = (int)(-128);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int CHAR_MAX = (int)127;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int SHRT_MIN = (int)(-32768);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int SHRT_MAX = (int)32767;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int USHRT_MAX = (int)65535;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int INT_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int INT_MAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final long UINT_MAX = (long)4294967295L;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int LONG_MAX = (int)2147483647;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final int LONG_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final long ULONG_MAX = (long)4294967295L;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final long LLONG_MAX = (long)9223372036854775807L;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final long LLONG_MIN = (long)(-9223372036854775807L - 1L);
	/** <i>native declaration : ..\voice\local\headers\\usr\include\limits.h</i> */
	public static final long ULLONG_MAX = (long)-1L;
	/**
	 * Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.<br>
	 * Return number of bytes read.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:322</i>
	 */
	public interface __io_read_fn extends Callback {
		int apply(Pointer __cookie, Pointer __buf, NativeSize __nbytes);
	};
	/**
	 * Write N bytes pointed to by BUF to COOKIE.  Write all N bytes<br>
	 * unless there is an error.  Return number of bytes written.  If<br>
	 * there is an error, return 0 and do not write anything.  If the file<br>
	 * has been opened for append (__mode.__append set), then set the file<br>
	 * pointer to the end of the file and then do the write; if not, just<br>
	 * write at the current file pointer.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:330</i>
	 */
	public interface __io_write_fn extends Callback {
		int apply(Pointer __cookie, Pointer __buf, NativeSize __n);
	};
	/**
	 * Move COOKIE's file position to *POS bytes from the<br>
	 * beginning of the file (if W is SEEK_SET),<br>
	 * the current position (if W is SEEK_CUR),<br>
	 * or the end of the file (if W is SEEK_END).<br>
	 * Set *POS to the new file position.<br>
	 * Returns zero if successful, nonzero if not.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:339</i>
	 */
	public interface __io_seek_fn extends Callback {
		int apply(Pointer __cookie, LongByReference __pos, int __w);
	};
	/**
	 * Close COOKIE.<br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:342</i>
	 */
	public interface __io_close_fn extends Callback {
		int apply(Pointer __cookie);
	};
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public interface __compar_fn_t extends Callback {
		int apply(Pointer voidPtr1, Pointer voidPtr2);
	};
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h</i> */
	public interface __compar_d_fn_t extends Callback {
		int apply(Pointer voidPtr1, Pointer voidPtr2, Pointer voidPtr3);
	};
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:425</i> */
	public interface atexit___func_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:430</i> */
	public interface at_quick_exit___func_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:441</i> */
	public interface on_exit___func_callback extends Callback {
		void apply(int __status, Pointer __arg);
	};
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\getopt.h:150</i><br>
	 * @deprecated use the safer methods {@link #getopt(int, java.lang.String[], java.lang.String)} and {@link #getopt(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int getopt(int ___argc, PointerByReference ___argv, Pointer __shortopts);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\getopt.h:150</i>
	 */
	int getopt(int ___argc, String ___argv[], String __shortopts);
	/**
	 * Original signature : <code>int __underflow(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:374</i>
	 */
	int __underflow(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int __uflow(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:375</i>
	 */
	int __uflow(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int __overflow(_IO_FILE*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:376</i>
	 */
	int __overflow(_IO_FILE _IO_FILEPtr1, int int1);
	/**
	 * Original signature : <code>int _IO_getc(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:418</i>
	 */
	int _IO_getc(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_putc(int, _IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:419</i>
	 */
	int _IO_putc(int __c, _IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_feof(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:420</i>
	 */
	int _IO_feof(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_ferror(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:421</i>
	 */
	int _IO_ferror(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_peekc_locked(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:423</i>
	 */
	int _IO_peekc_locked(_IO_FILE __fp);
	/**
	 * This one is for Emacs.<br>
	 * Original signature : <code>void _IO_flockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:429</i>
	 */
	void _IO_flockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>void _IO_funlockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:430</i>
	 */
	void _IO_funlockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int _IO_ftrylockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:431</i>
	 */
	int _IO_ftrylockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int _IO_vfscanf(_IO_FILE*, const char*, __gnuc_va_list, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:448</i><br>
	 * @deprecated use the safer methods {@link #_IO_vfscanf(voice.linux.jna._IO_FILE, java.lang.String, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #_IO_vfscanf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int _IO_vfscanf(_IO_FILE _IO_FILEPtr1, Pointer charPtr1, Pointer __gnuc_va_list1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int _IO_vfscanf(_IO_FILE*, const char*, __gnuc_va_list, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:448</i>
	 */
	int _IO_vfscanf(_IO_FILE _IO_FILEPtr1, String charPtr1, Pointer __gnuc_va_list1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int _IO_vfprintf(_IO_FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:450</i><br>
	 * @deprecated use the safer methods {@link #_IO_vfprintf(voice.linux.jna._IO_FILE, java.lang.String, java.lang.Object)} and {@link #_IO_vfprintf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int _IO_vfprintf(_IO_FILE _IO_FILEPtr1, Pointer charPtr1, Object... __gnuc_va_list1);
	/**
	 * Original signature : <code>int _IO_vfprintf(_IO_FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:450</i>
	 */
	int _IO_vfprintf(_IO_FILE _IO_FILEPtr1, String charPtr1, Object... __gnuc_va_list1);
	/**
	 * Original signature : <code>__ssize_t _IO_padn(_IO_FILE*, int, __ssize_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:452</i>
	 */
	int _IO_padn(_IO_FILE _IO_FILEPtr1, int int1, int __ssize_t1);
	/**
	 * Original signature : <code>size_t _IO_sgetn(_IO_FILE*, void*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:453</i>
	 */
	NativeSize _IO_sgetn(_IO_FILE _IO_FILEPtr1, Pointer voidPtr1, NativeSize size_t1);
	/**
	 * Original signature : <code>__off64_t _IO_seekoff(_IO_FILE*, __off64_t, int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:455</i>
	 */
	long _IO_seekoff(_IO_FILE _IO_FILEPtr1, long __off64_t1, int int1, int int2);
	/**
	 * Original signature : <code>__off64_t _IO_seekpos(_IO_FILE*, __off64_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:456</i>
	 */
	long _IO_seekpos(_IO_FILE _IO_FILEPtr1, long __off64_t1, int int1);
	/**
	 * Original signature : <code>void _IO_free_backup_area(_IO_FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\libio.h:458</i>
	 */
	void _IO_free_backup_area(_IO_FILE _IO_FILEPtr1);
	/**
	 * Remove file FILENAME.<br>
	 * Original signature : <code>int remove(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:121</i><br>
	 * @deprecated use the safer methods {@link #remove(java.lang.String)} and {@link #remove(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int remove(Pointer __filename);
	/**
	 * Remove file FILENAME.<br>
	 * Original signature : <code>int remove(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:121</i>
	 */
	int remove(String __filename);
	/**
	 * Rename file OLD to NEW.<br>
	 * Original signature : <code>int rename(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:123</i><br>
	 * @deprecated use the safer methods {@link #rename(java.lang.String, java.lang.String)} and {@link #rename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rename(Pointer __old, Pointer __new);
	/**
	 * Rename file OLD to NEW.<br>
	 * Original signature : <code>int rename(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:123</i>
	 */
	int rename(String __old, String __new);
	/**
	 * Rename file OLD relative to OLDFD to NEW relative to NEWFD.<br>
	 * Original signature : <code>int renameat(int, const char*, int, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:128</i><br>
	 * @deprecated use the safer methods {@link #renameat(int, java.lang.String, int, java.lang.String)} and {@link #renameat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int renameat(int __oldfd, Pointer __old, int __newfd, Pointer __new);
	/**
	 * Rename file OLD relative to OLDFD to NEW relative to NEWFD.<br>
	 * Original signature : <code>int renameat(int, const char*, int, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:128</i>
	 */
	int renameat(int __oldfd, String __old, int __newfd, String __new);
	/**
	 * Create a temporary file and open it read/write.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* tmpfile()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:138</i>
	 */
	_IO_FILE tmpfile();
	/**
	 * Original signature : <code>FILE* tmpfile64()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:148</i>
	 */
	_IO_FILE tmpfile64();
	/**
	 * Generate a temporary filename.<br>
	 * Original signature : <code>char* tmpnam(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:152</i><br>
	 * @deprecated use the safer methods {@link #tmpnam(java.nio.ByteBuffer)} and {@link #tmpnam(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tmpnam(Pointer __s);
	/**
	 * Generate a temporary filename.<br>
	 * Original signature : <code>char* tmpnam(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:152</i>
	 */
	Pointer tmpnam(ByteBuffer __s);
	/**
	 * This is the reentrant variant of `tmpnam'.  The only difference is<br>
	 * that it does not allow S to be NULL.<br>
	 * Original signature : <code>char* tmpnam_r(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:158</i><br>
	 * @deprecated use the safer methods {@link #tmpnam_r(java.nio.ByteBuffer)} and {@link #tmpnam_r(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tmpnam_r(Pointer __s);
	/**
	 * This is the reentrant variant of `tmpnam'.  The only difference is<br>
	 * that it does not allow S to be NULL.<br>
	 * Original signature : <code>char* tmpnam_r(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:158</i>
	 */
	Pointer tmpnam_r(ByteBuffer __s);
	/**
	 * Generate a unique temporary filename using up to five characters of PFX<br>
	 * if it is not NULL.  The directory to put this file in is searched for<br>
	 * as follows: First the environment variable "TMPDIR" is checked.<br>
	 * If it contains the name of a writable directory, that directory is used.<br>
	 * If not and if DIR is not NULL, that value is checked.  If that fails,<br>
	 * P_tmpdir is tried and finally "/tmp".  The storage for the filename<br>
	 * is allocated by `malloc'.<br>
	 * Original signature : <code>char* tempnam(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:170</i><br>
	 * @deprecated use the safer methods {@link #tempnam(java.lang.String, java.lang.String)} and {@link #tempnam(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tempnam(Pointer __dir, Pointer __pfx);
	/**
	 * Generate a unique temporary filename using up to five characters of PFX<br>
	 * if it is not NULL.  The directory to put this file in is searched for<br>
	 * as follows: First the environment variable "TMPDIR" is checked.<br>
	 * If it contains the name of a writable directory, that directory is used.<br>
	 * If not and if DIR is not NULL, that value is checked.  If that fails,<br>
	 * P_tmpdir is tried and finally "/tmp".  The storage for the filename<br>
	 * is allocated by `malloc'.<br>
	 * Original signature : <code>char* tempnam(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:170</i>
	 */
	Pointer tempnam(String __dir, String __pfx);
	/**
	 * Close STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fclose(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:180</i>
	 */
	int fclose(_IO_FILE __stream);
	/**
	 * Flush STREAM, or all streams if STREAM is NULL.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fflush(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:185</i>
	 */
	int fflush(_IO_FILE __stream);
	/**
	 * Faster versions when locking is not required.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fflush_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:195</i>
	 */
	int fflush_unlocked(_IO_FILE __stream);
	/**
	 * Close all streams.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fcloseall()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:205</i>
	 */
	int fcloseall();
	/**
	 * Open a file and create a new stream for it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* fopen(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:215</i><br>
	 * @deprecated use the safer methods {@link #fopen(java.lang.String, java.lang.String)} and {@link #fopen(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fopen(Pointer __filename, Pointer __modes);
	/**
	 * Open a file and create a new stream for it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* fopen(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:215</i>
	 */
	_IO_FILE fopen(String __filename, String __modes);
	/**
	 * Open a file, replacing an existing stream with it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* freopen(const char*, const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:221</i><br>
	 * @deprecated use the safer methods {@link #freopen(java.lang.String, java.lang.String, voice.linux.jna._IO_FILE)} and {@link #freopen(com.sun.jna.Pointer, com.sun.jna.Pointer, voice.linux.jna._IO_FILE)} instead
	 */
	@Deprecated 
	_IO_FILE freopen(Pointer __filename, Pointer __modes, _IO_FILE __stream);
	/**
	 * Open a file, replacing an existing stream with it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* freopen(const char*, const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:221</i>
	 */
	_IO_FILE freopen(String __filename, String __modes, _IO_FILE __stream);
	/**
	 * Original signature : <code>FILE* fopen64(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:240</i><br>
	 * @deprecated use the safer methods {@link #fopen64(java.lang.String, java.lang.String)} and {@link #fopen64(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fopen64(Pointer __filename, Pointer __modes);
	/**
	 * Original signature : <code>FILE* fopen64(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:240</i>
	 */
	_IO_FILE fopen64(String __filename, String __modes);
	/**
	 * Original signature : <code>FILE* freopen64(const char*, const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:242</i><br>
	 * @deprecated use the safer methods {@link #freopen64(java.lang.String, java.lang.String, voice.linux.jna._IO_FILE)} and {@link #freopen64(com.sun.jna.Pointer, com.sun.jna.Pointer, voice.linux.jna._IO_FILE)} instead
	 */
	@Deprecated 
	_IO_FILE freopen64(Pointer __filename, Pointer __modes, _IO_FILE __stream);
	/**
	 * Original signature : <code>FILE* freopen64(const char*, const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:242</i>
	 */
	_IO_FILE freopen64(String __filename, String __modes, _IO_FILE __stream);
	/**
	 * Create a new stream that refers to an existing system file descriptor.<br>
	 * Original signature : <code>FILE* fdopen(int, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:249</i><br>
	 * @deprecated use the safer methods {@link #fdopen(int, java.lang.String)} and {@link #fdopen(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fdopen(int __fd, Pointer __modes);
	/**
	 * Create a new stream that refers to an existing system file descriptor.<br>
	 * Original signature : <code>FILE* fdopen(int, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:249</i>
	 */
	_IO_FILE fdopen(int __fd, String __modes);
	/**
	 * Create a new stream that refers to the given magic cookie,<br>
	 * and uses the given functions for input and output.<br>
	 * Original signature : <code>FILE* fopencookie(void*, const char*, _IO_cookie_io_functions_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:255</i><br>
	 * @deprecated use the safer methods {@link #fopencookie(com.sun.jna.Pointer, java.lang.String, voice.linux.jna._IO_cookie_io_functions_t.ByValue)} and {@link #fopencookie(com.sun.jna.Pointer, com.sun.jna.Pointer, voice.linux.jna._IO_cookie_io_functions_t.ByValue)} instead
	 */
	@Deprecated 
	_IO_FILE fopencookie(Pointer __magic_cookie, Pointer __modes, voice.linux.jna._IO_cookie_io_functions_t.ByValue __io_funcs);
	/**
	 * Create a new stream that refers to the given magic cookie,<br>
	 * and uses the given functions for input and output.<br>
	 * Original signature : <code>FILE* fopencookie(void*, const char*, _IO_cookie_io_functions_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:255</i>
	 */
	_IO_FILE fopencookie(Pointer __magic_cookie, String __modes, voice.linux.jna._IO_cookie_io_functions_t.ByValue __io_funcs);
	/**
	 * Create a new stream that refers to a memory buffer.<br>
	 * Original signature : <code>FILE* fmemopen(void*, size_t, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:262</i><br>
	 * @deprecated use the safer methods {@link #fmemopen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String)} and {@link #fmemopen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fmemopen(Pointer __s, NativeSize __len, Pointer __modes);
	/**
	 * Create a new stream that refers to a memory buffer.<br>
	 * Original signature : <code>FILE* fmemopen(void*, size_t, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:262</i>
	 */
	_IO_FILE fmemopen(Pointer __s, NativeSize __len, String __modes);
	/**
	 * Open a stream that writes into a malloc'd buffer that is expanded as<br>
	 * necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location<br>
	 * and the number of characters written on fflush or fclose.<br>
	 * Original signature : <code>FILE* open_memstream(char**, size_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:268</i>
	 */
	_IO_FILE open_memstream(PointerByReference __bufloc, NativeSizeByReference __sizeloc);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use buffer BUF, of size BUFSIZ.<br>
	 * Original signature : <code>void setbuf(FILE*, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:275</i><br>
	 * @deprecated use the safer methods {@link #setbuf(voice.linux.jna._IO_FILE, java.nio.ByteBuffer)} and {@link #setbuf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void setbuf(_IO_FILE __stream, Pointer __buf);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use buffer BUF, of size BUFSIZ.<br>
	 * Original signature : <code>void setbuf(FILE*, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:275</i>
	 */
	void setbuf(_IO_FILE __stream, ByteBuffer __buf);
	/**
	 * Make STREAM use buffering mode MODE.<br>
	 * If BUF is not NULL, use N bytes of it for buffering;<br>
	 * else allocate an internal buffer N bytes long.<br>
	 * Original signature : <code>int setvbuf(FILE*, char*, int, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:279</i><br>
	 * @deprecated use the safer methods {@link #setvbuf(voice.linux.jna._IO_FILE, java.nio.ByteBuffer, int, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #setvbuf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int setvbuf(_IO_FILE __stream, Pointer __buf, int __modes, NativeSize __n);
	/**
	 * Make STREAM use buffering mode MODE.<br>
	 * If BUF is not NULL, use N bytes of it for buffering;<br>
	 * else allocate an internal buffer N bytes long.<br>
	 * Original signature : <code>int setvbuf(FILE*, char*, int, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:279</i>
	 */
	int setvbuf(_IO_FILE __stream, ByteBuffer __buf, int __modes, NativeSize __n);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use SIZE bytes of BUF for buffering.<br>
	 * Original signature : <code>void setbuffer(FILE*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:286</i><br>
	 * @deprecated use the safer methods {@link #setbuffer(voice.linux.jna._IO_FILE, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #setbuffer(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	void setbuffer(_IO_FILE __stream, Pointer __buf, NativeSize __size);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use SIZE bytes of BUF for buffering.<br>
	 * Original signature : <code>void setbuffer(FILE*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:286</i>
	 */
	void setbuffer(_IO_FILE __stream, ByteBuffer __buf, NativeSize __size);
	/**
	 * Make STREAM line-buffered.<br>
	 * Original signature : <code>void setlinebuf(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:290</i>
	 */
	void setlinebuf(_IO_FILE __stream);
	/**
	 * Write formatted output to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fprintf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:299</i><br>
	 * @deprecated use the safer methods {@link #fprintf(voice.linux.jna._IO_FILE, java.lang.String, java.lang.Object)} and {@link #fprintf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int fprintf(_IO_FILE __stream, Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fprintf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:299</i>
	 */
	int fprintf(_IO_FILE __stream, String __format, Object... varArgs1);
	/**
	 * Write formatted output to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int printf(const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:305</i><br>
	 * @deprecated use the safer methods {@link #printf(java.lang.String, java.lang.Object)} and {@link #printf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int printf(Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int printf(const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:305</i>
	 */
	int printf(String __format, Object... varArgs1);
	/**
	 * Write formatted output to S.<br>
	 * Original signature : <code>int sprintf(char*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:307</i><br>
	 * @deprecated use the safer methods {@link #sprintf(java.nio.ByteBuffer, java.lang.String, java.lang.Object)} and {@link #sprintf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int sprintf(Pointer __s, Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to S.<br>
	 * Original signature : <code>int sprintf(char*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:307</i>
	 */
	int sprintf(ByteBuffer __s, String __format, Object... varArgs1);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfprintf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:314</i><br>
	 * @deprecated use the safer methods {@link #vfprintf(voice.linux.jna._IO_FILE, java.lang.String, java.lang.Object)} and {@link #vfprintf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vfprintf(_IO_FILE __s, Pointer __format, Object... __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfprintf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:314</i>
	 */
	int vfprintf(_IO_FILE __s, String __format, Object... __arg);
	/**
	 * Write formatted output to stdout from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vprintf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:320</i><br>
	 * @deprecated use the safer methods {@link #vprintf(java.lang.String, java.lang.Object)} and {@link #vprintf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vprintf(Pointer __format, Object... __arg);
	/**
	 * Write formatted output to stdout from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vprintf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:320</i>
	 */
	int vprintf(String __format, Object... __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * Original signature : <code>int vsprintf(char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:322</i><br>
	 * @deprecated use the safer methods {@link #vsprintf(java.nio.ByteBuffer, java.lang.String, java.lang.Object)} and {@link #vsprintf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vsprintf(Pointer __s, Pointer __format, Object... __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * Original signature : <code>int vsprintf(char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:322</i>
	 */
	int vsprintf(ByteBuffer __s, String __format, Object... __arg);
	/**
	 * Maximum chars of output to write in MAXLEN.<br>
	 * Original signature : <code>int snprintf(char*, size_t, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:329</i><br>
	 * @deprecated use the safer methods {@link #snprintf(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String, java.lang.Object)} and {@link #snprintf(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int snprintf(Pointer __s, NativeSize __maxlen, Pointer __format, Object... varArgs1);
	/**
	 * Maximum chars of output to write in MAXLEN.<br>
	 * Original signature : <code>int snprintf(char*, size_t, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:329</i>
	 */
	int snprintf(ByteBuffer __s, NativeSize __maxlen, String __format, Object... varArgs1);
	/**
	 * Original signature : <code>int vsnprintf(char*, size_t, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:333</i><br>
	 * @deprecated use the safer methods {@link #vsnprintf(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, java.lang.String, java.lang.Object)} and {@link #vsnprintf(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vsnprintf(Pointer __s, NativeSize __maxlen, Pointer __format, Object... __arg);
	/**
	 * Original signature : <code>int vsnprintf(char*, size_t, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:333</i>
	 */
	int vsnprintf(ByteBuffer __s, NativeSize __maxlen, String __format, Object... __arg);
	/**
	 * Write formatted output to a string dynamically allocated with `malloc'.<br>
	 * Store the address of the string in *PTR.<br>
	 * Original signature : <code>int vasprintf(char**, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:342</i><br>
	 * @deprecated use the safer methods {@link #vasprintf(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.Object)} and {@link #vasprintf(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vasprintf(PointerByReference __ptr, Pointer __f, Object... __arg);
	/**
	 * Write formatted output to a string dynamically allocated with `malloc'.<br>
	 * Store the address of the string in *PTR.<br>
	 * Original signature : <code>int vasprintf(char**, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:342</i>
	 */
	int vasprintf(PointerByReference __ptr, String __f, Object... __arg);
	/**
	 * Original signature : <code>int __asprintf(char**, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:345</i><br>
	 * @deprecated use the safer methods {@link #__asprintf(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.Object)} and {@link #__asprintf(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __asprintf(PointerByReference __ptr, Pointer __fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int __asprintf(char**, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:345</i>
	 */
	int __asprintf(PointerByReference __ptr, String __fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int asprintf(char**, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:348</i><br>
	 * @deprecated use the safer methods {@link #asprintf(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.Object)} and {@link #asprintf(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int asprintf(PointerByReference __ptr, Pointer __fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int asprintf(char**, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:348</i>
	 */
	int asprintf(PointerByReference __ptr, String __fmt, Object... varArgs1);
	/**
	 * Write formatted output to a file descriptor.<br>
	 * Original signature : <code>int vdprintf(int, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:355</i><br>
	 * @deprecated use the safer methods {@link #vdprintf(int, java.lang.String, java.lang.Object)} and {@link #vdprintf(int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vdprintf(int __fd, Pointer __fmt, Object... __arg);
	/**
	 * Write formatted output to a file descriptor.<br>
	 * Original signature : <code>int vdprintf(int, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:355</i>
	 */
	int vdprintf(int __fd, String __fmt, Object... __arg);
	/**
	 * Original signature : <code>int dprintf(int, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:358</i><br>
	 * @deprecated use the safer methods {@link #dprintf(int, java.lang.String, java.lang.Object)} and {@link #dprintf(int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int dprintf(int __fd, Pointer __fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int dprintf(int, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:358</i>
	 */
	int dprintf(int __fd, String __fmt, Object... varArgs1);
	/**
	 * Read formatted input from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fscanf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:368</i><br>
	 * @deprecated use the safer methods {@link #fscanf(voice.linux.jna._IO_FILE, java.lang.String, java.lang.Object)} and {@link #fscanf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int fscanf(_IO_FILE __stream, Pointer __format, Object... varArgs1);
	/**
	 * Read formatted input from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fscanf(FILE*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:368</i>
	 */
	int fscanf(_IO_FILE __stream, String __format, Object... varArgs1);
	/**
	 * Read formatted input from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int scanf(const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:374</i><br>
	 * @deprecated use the safer methods {@link #scanf(java.lang.String, java.lang.Object)} and {@link #scanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int scanf(Pointer __format, Object... varArgs1);
	/**
	 * Read formatted input from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int scanf(const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:374</i>
	 */
	int scanf(String __format, Object... varArgs1);
	/**
	 * Read formatted input from S.<br>
	 * Original signature : <code>int sscanf(const char*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:376</i><br>
	 * @deprecated use the safer methods {@link #sscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #sscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int sscanf(Pointer __s, Pointer __format, Object... varArgs1);
	/**
	 * Read formatted input from S.<br>
	 * Original signature : <code>int sscanf(const char*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:376</i>
	 */
	int sscanf(String __s, String __format, Object... varArgs1);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfscanf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:414</i><br>
	 * @deprecated use the safer methods {@link #vfscanf(voice.linux.jna._IO_FILE, java.lang.String, java.lang.Object)} and {@link #vfscanf(voice.linux.jna._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vfscanf(_IO_FILE __s, Pointer __format, Object... __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfscanf(FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:414</i>
	 */
	int vfscanf(_IO_FILE __s, String __format, Object... __arg);
	/**
	 * Read formatted input from stdin into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vscanf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:422</i><br>
	 * @deprecated use the safer methods {@link #vscanf(java.lang.String, java.lang.Object)} and {@link #vscanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vscanf(Pointer __format, Object... __arg);
	/**
	 * Read formatted input from stdin into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vscanf(const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:422</i>
	 */
	int vscanf(String __format, Object... __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * Original signature : <code>int vsscanf(const char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:426</i><br>
	 * @deprecated use the safer methods {@link #vsscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #vsscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vsscanf(Pointer __s, Pointer __format, Object... __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * Original signature : <code>int vsscanf(const char*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:426</i>
	 */
	int vsscanf(String __s, String __format, Object... __arg);
	/**
	 * Read a character from STREAM.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fgetc(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:474</i>
	 */
	int fgetc(_IO_FILE __stream);
	/**
	 * Original signature : <code>int getc(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:475</i>
	 */
	int getc(_IO_FILE __stream);
	/**
	 * Read a character from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getchar()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:481</i>
	 */
	int getchar();
	/**
	 * These are defined in POSIX.1:1996.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getc_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:493</i>
	 */
	int getc_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int getchar_unlocked()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:494</i>
	 */
	int getchar_unlocked();
	/**
	 * Faster version when locking is not necessary.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fgetc_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:504</i>
	 */
	int fgetc_unlocked(_IO_FILE __stream);
	/**
	 * Write a character to STREAM.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * These functions is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputc(int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:516</i>
	 */
	int fputc(int __c, _IO_FILE __stream);
	/**
	 * Original signature : <code>int putc(int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:517</i>
	 */
	int putc(int __c, _IO_FILE __stream);
	/**
	 * Write a character to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int putchar(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:523</i>
	 */
	int putchar(int __c);
	/**
	 * Faster version when locking is not necessary.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fputc_unlocked(int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:537</i>
	 */
	int fputc_unlocked(int __c, _IO_FILE __stream);
	/**
	 * These are defined in POSIX.1:1996.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int putc_unlocked(int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:545</i>
	 */
	int putc_unlocked(int __c, _IO_FILE __stream);
	/**
	 * Original signature : <code>int putchar_unlocked(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:546</i>
	 */
	int putchar_unlocked(int __c);
	/**
	 * Get a word (int) from STREAM.<br>
	 * Original signature : <code>int getw(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:553</i>
	 */
	int getw(_IO_FILE __stream);
	/**
	 * Write a word (int) to STREAM.<br>
	 * Original signature : <code>int putw(int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:556</i>
	 */
	int putw(int __w, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string of finite length from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* fgets(char*, int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:565</i><br>
	 * @deprecated use the safer methods {@link #fgets(java.nio.ByteBuffer, int, voice.linux.jna._IO_FILE)} and {@link #fgets(com.sun.jna.Pointer, int, voice.linux.jna._IO_FILE)} instead
	 */
	@Deprecated 
	Pointer fgets(Pointer __s, int __n, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string of finite length from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* fgets(char*, int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:565</i>
	 */
	Pointer fgets(ByteBuffer __s, int __n, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string from stdin, removing the newline.<br>
	 * DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.<br>
	 * The function has been officially removed in ISO C11.  This opportunity<br>
	 * is used to also remove it from the GNU feature list.  It is now only<br>
	 * available when explicitly using an old ISO C, Unix, or POSIX standard.<br>
	 * GCC defines _GNU_SOURCE when building C++ code and the function is still<br>
	 * in C++11, so it is also available for C++.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* gets(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:581</i><br>
	 * @deprecated use the safer methods {@link #gets(java.nio.ByteBuffer)} and {@link #gets(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gets(Pointer __s);
	/**
	 * Get a newline-terminated string from stdin, removing the newline.<br>
	 * DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.<br>
	 * The function has been officially removed in ISO C11.  This opportunity<br>
	 * is used to also remove it from the GNU feature list.  It is now only<br>
	 * available when explicitly using an old ISO C, Unix, or POSIX standard.<br>
	 * GCC defines _GNU_SOURCE when building C++ code and the function is still<br>
	 * in C++11, so it is also available for C++.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* gets(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:581</i>
	 */
	Pointer gets(ByteBuffer __s);
	/**
	 * This function does the same as `fgets' but does not lock the stream.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>char* fgets_unlocked(char*, int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:592</i><br>
	 * @deprecated use the safer methods {@link #fgets_unlocked(java.nio.ByteBuffer, int, voice.linux.jna._IO_FILE)} and {@link #fgets_unlocked(com.sun.jna.Pointer, int, voice.linux.jna._IO_FILE)} instead
	 */
	@Deprecated 
	Pointer fgets_unlocked(Pointer __s, int __n, _IO_FILE __stream);
	/**
	 * This function does the same as `fgets' but does not lock the stream.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>char* fgets_unlocked(char*, int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:592</i>
	 */
	Pointer fgets_unlocked(ByteBuffer __s, int __n, _IO_FILE __stream);
	/**
	 * Read up to (and including) a DELIMITER from STREAM into *LINEPTR<br>
	 * (and null-terminate it). *LINEPTR is a pointer returned from malloc (or<br>
	 * NULL), pointing to *N characters of space.  It is realloc'd as<br>
	 * necessary.  Returns the number of characters read (not including the<br>
	 * null terminator), or -1 on error or EOF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>__ssize_t __getdelim(char**, size_t*, int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:608</i>
	 */
	int __getdelim(PointerByReference __lineptr, NativeSizeByReference __n, int __delimiter, _IO_FILE __stream);
	/**
	 * Original signature : <code>__ssize_t getdelim(char**, size_t*, int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:611</i>
	 */
	int getdelim(PointerByReference __lineptr, NativeSizeByReference __n, int __delimiter, _IO_FILE __stream);
	/**
	 * Like `getdelim', but reads up to a newline.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>__ssize_t getline(char**, size_t*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:621</i>
	 */
	int getline(PointerByReference __lineptr, NativeSizeByReference __n, _IO_FILE __stream);
	/**
	 * Write a string to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputs(const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:632</i><br>
	 * @deprecated use the safer methods {@link #fputs(java.lang.String, voice.linux.jna._IO_FILE)} and {@link #fputs(com.sun.jna.Pointer, voice.linux.jna._IO_FILE)} instead
	 */
	@Deprecated 
	int fputs(Pointer __s, _IO_FILE __stream);
	/**
	 * Write a string to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputs(const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:632</i>
	 */
	int fputs(String __s, _IO_FILE __stream);
	/**
	 * Write a string, followed by a newline, to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int puts(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:638</i><br>
	 * @deprecated use the safer methods {@link #puts(java.lang.String)} and {@link #puts(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int puts(Pointer __s);
	/**
	 * Write a string, followed by a newline, to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int puts(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:638</i>
	 */
	int puts(String __s);
	/**
	 * Push a character back onto the input buffer of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int ungetc(int, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:645</i>
	 */
	int ungetc(int __c, _IO_FILE __stream);
	/**
	 * Read chunks of generic data from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>size_t fread(void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:652</i>
	 */
	NativeSize fread(Pointer __ptr, NativeSize __size, NativeSize __n, _IO_FILE __stream);
	/**
	 * Write chunks of generic data to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>size_t fwrite(const void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:658</i>
	 */
	NativeSize fwrite(Pointer __ptr, NativeSize __size, NativeSize __n, _IO_FILE __s);
	/**
	 * This function does the same as `fputs' but does not lock the stream.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fputs_unlocked(const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:669</i><br>
	 * @deprecated use the safer methods {@link #fputs_unlocked(java.lang.String, voice.linux.jna._IO_FILE)} and {@link #fputs_unlocked(com.sun.jna.Pointer, voice.linux.jna._IO_FILE)} instead
	 */
	@Deprecated 
	int fputs_unlocked(Pointer __s, _IO_FILE __stream);
	/**
	 * This function does the same as `fputs' but does not lock the stream.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fputs_unlocked(const char*, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:669</i>
	 */
	int fputs_unlocked(String __s, _IO_FILE __stream);
	/**
	 * Faster versions when locking is not necessary.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>size_t fread_unlocked(void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:680</i>
	 */
	NativeSize fread_unlocked(Pointer __ptr, NativeSize __size, NativeSize __n, _IO_FILE __stream);
	/**
	 * Original signature : <code>size_t fwrite_unlocked(const void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:682</i>
	 */
	NativeSize fwrite_unlocked(Pointer __ptr, NativeSize __size, NativeSize __n, _IO_FILE __stream);
	/**
	 * Seek to a certain position on STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fseek(FILE*, long long, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:692</i>
	 */
	int fseek(_IO_FILE __stream, long __off, int __whence);
	/**
	 * Return the current position of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>long long ftell(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:697</i>
	 */
	long ftell(_IO_FILE __stream);
	/**
	 * Rewind to the beginning of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void rewind(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:702</i>
	 */
	void rewind(_IO_FILE __stream);
	/**
	 * Seek to a certain position on STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fseeko(FILE*, __off_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:716</i>
	 */
	int fseeko(_IO_FILE __stream, long __off, int __whence);
	/**
	 * Return the current position of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>__off_t ftello(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:721</i>
	 */
	long ftello(_IO_FILE __stream);
	/**
	 * Get STREAM's position.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fgetpos(FILE*, fpos_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:741</i>
	 */
	int fgetpos(_IO_FILE __stream, _G_fpos_t __pos);
	/**
	 * Set STREAM's position.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fsetpos(FILE*, const fpos_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:746</i>
	 */
	int fsetpos(_IO_FILE __stream, _G_fpos_t __pos);
	/**
	 * Original signature : <code>int fseeko64(FILE*, __off64_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:761</i>
	 */
	int fseeko64(_IO_FILE __stream, long __off, int __whence);
	/**
	 * Original signature : <code>__off64_t ftello64(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:762</i>
	 */
	long ftello64(_IO_FILE __stream);
	/**
	 * Original signature : <code>int fgetpos64(FILE*, fpos64_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:763</i>
	 */
	int fgetpos64(_IO_FILE __stream, _G_fpos64_t __pos);
	/**
	 * Original signature : <code>int fsetpos64(FILE*, const fpos64_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:764</i>
	 */
	int fsetpos64(_IO_FILE __stream, _G_fpos64_t __pos);
	/**
	 * Clear the error and EOF indicators for STREAM.<br>
	 * Original signature : <code>void clearerr(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:769</i>
	 */
	void clearerr(_IO_FILE __stream);
	/**
	 * Return the EOF indicator for STREAM.<br>
	 * Original signature : <code>int feof(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:771</i>
	 */
	int feof(_IO_FILE __stream);
	/**
	 * Return the error indicator for STREAM.<br>
	 * Original signature : <code>int ferror(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:773</i>
	 */
	int ferror(_IO_FILE __stream);
	/**
	 * Faster versions when locking is not required.<br>
	 * Original signature : <code>void clearerr_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:778</i>
	 */
	void clearerr_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int feof_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:779</i>
	 */
	int feof_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int ferror_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:780</i>
	 */
	int ferror_unlocked(_IO_FILE __stream);
	/**
	 * Print a message describing the meaning of the value of errno.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void perror(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:789</i><br>
	 * @deprecated use the safer methods {@link #perror(java.lang.String)} and {@link #perror(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void perror(Pointer __s);
	/**
	 * Print a message describing the meaning of the value of errno.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void perror(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:789</i>
	 */
	void perror(String __s);
	/**
	 * Return the system file descriptor for STREAM.<br>
	 * Original signature : <code>int fileno(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:670</i>
	 */
	int fileno(_IO_FILE __stream);
	/**
	 * Faster version when locking is not required.<br>
	 * Original signature : <code>int fileno_unlocked(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:675</i>
	 */
	int fileno_unlocked(_IO_FILE __stream);
	/**
	 * Create a new stream connected to a pipe running the given command.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* popen(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:685</i><br>
	 * @deprecated use the safer methods {@link #popen(java.lang.String, java.lang.String)} and {@link #popen(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE popen(Pointer __command, Pointer __modes);
	/**
	 * Create a new stream connected to a pipe running the given command.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* popen(const char*, const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:685</i>
	 */
	_IO_FILE popen(String __command, String __modes);
	/**
	 * Close a stream opened by popen and return the status of its child.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int pclose(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:691</i>
	 */
	int pclose(_IO_FILE __stream);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:697</i><br>
	 * @deprecated use the safer methods {@link #ctermid(java.nio.ByteBuffer)} and {@link #ctermid(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ctermid(Pointer __s);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:697</i>
	 */
	Pointer ctermid(ByteBuffer __s);
	/**
	 * Return the name of the current user.<br>
	 * Original signature : <code>char* cuserid(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:703</i><br>
	 * @deprecated use the safer methods {@link #cuserid(java.nio.ByteBuffer)} and {@link #cuserid(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer cuserid(Pointer __s);
	/**
	 * Return the name of the current user.<br>
	 * Original signature : <code>char* cuserid(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:703</i>
	 */
	Pointer cuserid(ByteBuffer __s);
	/**
	 * Write formatted output to an obstack.<br>
	 * Original signature : <code>int obstack_printf(obstack*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:711</i><br>
	 * @deprecated use the safer methods {@link #obstack_printf(voice.linux.jna.Library.obstack, java.lang.String, java.lang.Object)} and {@link #obstack_printf(voice.linux.jna.Library.obstack, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int obstack_printf(Library.obstack __obstack, Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to an obstack.<br>
	 * Original signature : <code>int obstack_printf(obstack*, const char*, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:711</i>
	 */
	int obstack_printf(Library.obstack __obstack, String __format, Object... varArgs1);
	/**
	 * Original signature : <code>int obstack_vprintf(obstack*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:714</i><br>
	 * @deprecated use the safer methods {@link #obstack_vprintf(voice.linux.jna.Library.obstack, java.lang.String, java.lang.Object)} and {@link #obstack_vprintf(voice.linux.jna.Library.obstack, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int obstack_vprintf(Library.obstack __obstack, Pointer __format, Object... __args);
	/**
	 * Original signature : <code>int obstack_vprintf(obstack*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:714</i>
	 */
	int obstack_vprintf(Library.obstack __obstack, String __format, Object... __args);
	/**
	 * Acquire ownership of STREAM.<br>
	 * Original signature : <code>void flockfile(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:725</i>
	 */
	void flockfile(_IO_FILE __stream);
	/**
	 * Try to acquire ownership of STREAM but do not block if it is not<br>
	 * possible.<br>
	 * Original signature : <code>int ftrylockfile(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:729</i>
	 */
	int ftrylockfile(_IO_FILE __stream);
	/**
	 * Relinquish the ownership granted for STREAM.<br>
	 * Original signature : <code>void funlockfile(FILE*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdio.h:732</i>
	 */
	void funlockfile(_IO_FILE __stream);
	/**
	 * Maximum length of a multibyte character in the current locale.<br>
	 * Original signature : <code>size_t __ctype_get_mb_cur_max()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:130</i>
	 */
	NativeSize __ctype_get_mb_cur_max();
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double atof(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:135</i><br>
	 * @deprecated use the safer methods {@link #atof(java.lang.String)} and {@link #atof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	double atof(Pointer __nptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double atof(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:135</i>
	 */
	double atof(String __nptr);
	/**
	 * Convert a string to an integer.<br>
	 * Original signature : <code>int atoi(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:138</i><br>
	 * @deprecated use the safer methods {@link #atoi(java.lang.String)} and {@link #atoi(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int atoi(Pointer __nptr);
	/**
	 * Convert a string to an integer.<br>
	 * Original signature : <code>int atoi(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:138</i>
	 */
	int atoi(String __nptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long long atol(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:141</i><br>
	 * @deprecated use the safer methods {@link #atol(java.lang.String)} and {@link #atol(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long atol(Pointer __nptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long long atol(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:141</i>
	 */
	long atol(String __nptr);
	/**
	 * Convert a string to a long long integer.<br>
	 * Original signature : <code>long long long atoll(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:148</i><br>
	 * @deprecated use the safer methods {@link #atoll(java.lang.String)} and {@link #atoll(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long atoll(Pointer __nptr);
	/**
	 * Convert a string to a long long integer.<br>
	 * Original signature : <code>long long long atoll(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:148</i>
	 */
	long atoll(String __nptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double strtod(const char*, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:155</i><br>
	 * @deprecated use the safer methods {@link #strtod(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtod(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double strtod(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double strtod(const char*, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:155</i>
	 */
	double strtod(String __nptr, PointerByReference __endptr);
	/**
	 * Likewise for `float' and `long double' sizes of floating-point numbers.<br>
	 * Original signature : <code>float strtof(const char*, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:163</i><br>
	 * @deprecated use the safer methods {@link #strtof(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtof(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	float strtof(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Likewise for `float' and `long double' sizes of floating-point numbers.<br>
	 * Original signature : <code>float strtof(const char*, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:163</i>
	 */
	float strtof(String __nptr, PointerByReference __endptr);
	/**
	 * Original signature : <code>long double strtold(const char*, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:166</i><br>
	 * @deprecated use the safer methods {@link #strtold(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtold(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double strtold(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Original signature : <code>long double strtold(const char*, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:166</i>
	 */
	double strtold(String __nptr, PointerByReference __endptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long long strtol(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:174</i><br>
	 * @deprecated use the safer methods {@link #strtol(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtol(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	long strtol(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long long strtol(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:174</i>
	 */
	long strtol(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned long integer.<br>
	 * Original signature : <code>long long strtoul(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:178</i><br>
	 * @deprecated use the safer methods {@link #strtoul(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoul(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	long strtoul(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned long integer.<br>
	 * Original signature : <code>long long strtoul(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:178</i>
	 */
	long strtoul(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long long strtoq(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:186</i><br>
	 * @deprecated use the safer methods {@link #strtoq(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoq(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	long strtoq(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long long strtoq(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:186</i>
	 */
	long strtoq(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long long strtouq(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:191</i><br>
	 * @deprecated use the safer methods {@link #strtouq(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtouq(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	long strtouq(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long long strtouq(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:191</i>
	 */
	long strtouq(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long long strtoll(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:200</i><br>
	 * @deprecated use the safer methods {@link #strtoll(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoll(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	long strtoll(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long long strtoll(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:200</i>
	 */
	long strtoll(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long long strtoull(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:205</i><br>
	 * @deprecated use the safer methods {@link #strtoull(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoull(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	long strtoull(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long long strtoull(const char*, char**, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:205</i>
	 */
	long strtoull(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Special versions of the functions above which take the locale to<br>
	 * use as an additional parameter.<br>
	 * Original signature : <code>long long strtol_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:4</i><br>
	 * @deprecated use the safer methods {@link #strtol_l(java.lang.String, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} and {@link #strtol_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	long strtol_l(Pointer __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Special versions of the functions above which take the locale to<br>
	 * use as an additional parameter.<br>
	 * Original signature : <code>long long strtol_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:4</i>
	 */
	long strtol_l(String __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>long long strtoul_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:8</i><br>
	 * @deprecated use the safer methods {@link #strtoul_l(java.lang.String, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} and {@link #strtoul_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	long strtoul_l(Pointer __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>long long strtoul_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:8</i>
	 */
	long strtoul_l(String __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>long long long strtoll_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:14</i><br>
	 * @deprecated use the safer methods {@link #strtoll_l(java.lang.String, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} and {@link #strtoll_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	long strtoll_l(Pointer __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>long long long strtoll_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:14</i>
	 */
	long strtoll_l(String __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>long long long strtoull_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:20</i><br>
	 * @deprecated use the safer methods {@link #strtoull_l(java.lang.String, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} and {@link #strtoull_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	long strtoull_l(Pointer __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>long long long strtoull_l(const char*, char**, int, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:20</i>
	 */
	long strtoull_l(String __nptr, PointerByReference __endptr, int __base, __locale_struct __loc);
	/**
	 * Original signature : <code>double strtod_l(const char*, char**, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:25</i><br>
	 * @deprecated use the safer methods {@link #strtod_l(java.lang.String, com.sun.jna.ptr.PointerByReference, voice.linux.jna.__locale_struct)} and {@link #strtod_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	double strtod_l(Pointer __nptr, PointerByReference __endptr, __locale_struct __loc);
	/**
	 * Original signature : <code>double strtod_l(const char*, char**, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:25</i>
	 */
	double strtod_l(String __nptr, PointerByReference __endptr, __locale_struct __loc);
	/**
	 * Original signature : <code>float strtof_l(const char*, char**, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:29</i><br>
	 * @deprecated use the safer methods {@link #strtof_l(java.lang.String, com.sun.jna.ptr.PointerByReference, voice.linux.jna.__locale_struct)} and {@link #strtof_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	float strtof_l(Pointer __nptr, PointerByReference __endptr, __locale_struct __loc);
	/**
	 * Original signature : <code>float strtof_l(const char*, char**, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:29</i>
	 */
	float strtof_l(String __nptr, PointerByReference __endptr, __locale_struct __loc);
	/**
	 * Original signature : <code>long double strtold_l(const char*, char**, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:33</i><br>
	 * @deprecated use the safer methods {@link #strtold_l(java.lang.String, com.sun.jna.ptr.PointerByReference, voice.linux.jna.__locale_struct)} and {@link #strtold_l(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, voice.linux.jna.__locale_struct)} instead
	 */
	@Deprecated 
	double strtold_l(Pointer __nptr, PointerByReference __endptr, __locale_struct __loc);
	/**
	 * Original signature : <code>long double strtold_l(const char*, char**, __locale_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:33</i>
	 */
	double strtold_l(String __nptr, PointerByReference __endptr, __locale_struct __loc);
	/**
	 * Convert N to base 64 using the digits "./0-9A-Za-z", least-significant<br>
	 * digit first.  Returns a pointer to static storage overwritten by the<br>
	 * next call.<br>
	 * Original signature : <code>char* l64a(long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:70</i>
	 */
	Pointer l64a(long __n);
	/**
	 * Read a number from a string S in base 64 as above.<br>
	 * Original signature : <code>long long a64l(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:73</i><br>
	 * @deprecated use the safer methods {@link #a64l(java.lang.String)} and {@link #a64l(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long a64l(Pointer __s);
	/**
	 * Read a number from a string S in base 64 as above.<br>
	 * Original signature : <code>long long a64l(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:73</i>
	 */
	long a64l(String __s);
	/**
	 * Return a random long integer between 0 and RAND_MAX inclusive.<br>
	 * Original signature : <code>long long random()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:7</i>
	 */
	long random();
	/**
	 * Seed the random number generator with the given number.<br>
	 * Original signature : <code>void srandom(unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:10</i>
	 */
	void srandom(int __seed);
	/**
	 * Initialize the random number generator to use state buffer STATEBUF,<br>
	 * of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,<br>
	 * 32, 64, 128 and 256, the bigger the better; values less than 8 will<br>
	 * cause an error and values greater than 256 will be rounded down.<br>
	 * Original signature : <code>char* initstate(unsigned int, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:16</i><br>
	 * @deprecated use the safer methods {@link #initstate(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #initstate(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer initstate(int __seed, Pointer __statebuf, NativeSize __statelen);
	/**
	 * Initialize the random number generator to use state buffer STATEBUF,<br>
	 * of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,<br>
	 * 32, 64, 128 and 256, the bigger the better; values less than 8 will<br>
	 * cause an error and values greater than 256 will be rounded down.<br>
	 * Original signature : <code>char* initstate(unsigned int, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:16</i>
	 */
	Pointer initstate(int __seed, ByteBuffer __statebuf, NativeSize __statelen);
	/**
	 * Switch the random number generator to state buffer STATEBUF,<br>
	 * which should have been previously initialized by `initstate'.<br>
	 * Original signature : <code>char* setstate(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:21</i><br>
	 * @deprecated use the safer methods {@link #setstate(java.nio.ByteBuffer)} and {@link #setstate(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer setstate(Pointer __statebuf);
	/**
	 * Switch the random number generator to state buffer STATEBUF,<br>
	 * which should have been previously initialized by `initstate'.<br>
	 * Original signature : <code>char* setstate(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:21</i>
	 */
	Pointer setstate(ByteBuffer __statebuf);
	/**
	 * Original signature : <code>int random_r(random_data*, int32_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:40</i><br>
	 * @deprecated use the safer methods {@link #random_r(voice.linux.jna.random_data, java.nio.IntBuffer)} and {@link #random_r(voice.linux.jna.random_data, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int random_r(random_data __buf, IntByReference __result);
	/**
	 * Original signature : <code>int random_r(random_data*, int32_t*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:40</i>
	 */
	int random_r(random_data __buf, IntBuffer __result);
	/**
	 * Original signature : <code>int srandom_r(unsigned int, random_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:43</i>
	 */
	int srandom_r(int __seed, random_data __buf);
	/**
	 * Original signature : <code>int initstate_r(unsigned int, char*, size_t, random_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:46</i><br>
	 * @deprecated use the safer methods {@link #initstate_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, voice.linux.jna.random_data)} and {@link #initstate_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, voice.linux.jna.random_data)} instead
	 */
	@Deprecated 
	int initstate_r(int __seed, Pointer __statebuf, NativeSize __statelen, random_data __buf);
	/**
	 * Original signature : <code>int initstate_r(unsigned int, char*, size_t, random_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:46</i>
	 */
	int initstate_r(int __seed, ByteBuffer __statebuf, NativeSize __statelen, random_data __buf);
	/**
	 * Original signature : <code>int setstate_r(char*, random_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:51</i><br>
	 * @deprecated use the safer methods {@link #setstate_r(java.nio.ByteBuffer, voice.linux.jna.random_data)} and {@link #setstate_r(com.sun.jna.Pointer, voice.linux.jna.random_data)} instead
	 */
	@Deprecated 
	int setstate_r(Pointer __statebuf, random_data __buf);
	/**
	 * Original signature : <code>int setstate_r(char*, random_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:51</i>
	 */
	int setstate_r(ByteBuffer __statebuf, random_data __buf);
	/**
	 * Return a random integer between 0 and RAND_MAX inclusive.<br>
	 * Original signature : <code>int rand()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:60</i>
	 */
	int rand();
	/**
	 * Seed the random number generator with the given number.<br>
	 * Original signature : <code>void srand(unsigned int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:62</i>
	 */
	void srand(int __seed);
	/**
	 * Reentrant interface according to POSIX.1.<br>
	 * Original signature : <code>int rand_r(unsigned int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:67</i><br>
	 * @deprecated use the safer methods {@link #rand_r(java.nio.IntBuffer)} and {@link #rand_r(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int rand_r(IntByReference __seed);
	/**
	 * Reentrant interface according to POSIX.1.<br>
	 * Original signature : <code>int rand_r(unsigned int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:67</i>
	 */
	int rand_r(IntBuffer __seed);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>double drand48()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:75</i>
	 */
	double drand48();
	/**
	 * Original signature : <code>double erand48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:76</i><br>
	 * @deprecated use the safer methods {@link #erand48(java.nio.ShortBuffer)} and {@link #erand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	double erand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>double erand48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:76</i>
	 */
	double erand48(ShortBuffer __xsubi);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>long long lrand48()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:79</i>
	 */
	long lrand48();
	/**
	 * Original signature : <code>long long nrand48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:80</i><br>
	 * @deprecated use the safer methods {@link #nrand48(java.nio.ShortBuffer)} and {@link #nrand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	long nrand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>long long nrand48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:80</i>
	 */
	long nrand48(ShortBuffer __xsubi);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>long long mrand48()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:84</i>
	 */
	long mrand48();
	/**
	 * Original signature : <code>long long jrand48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:85</i><br>
	 * @deprecated use the safer methods {@link #jrand48(java.nio.ShortBuffer)} and {@link #jrand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	long jrand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>long long jrand48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:85</i>
	 */
	long jrand48(ShortBuffer __xsubi);
	/**
	 * Seed random number generator.<br>
	 * Original signature : <code>void srand48(long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:89</i>
	 */
	void srand48(long __seedval);
	/**
	 * Original signature : <code>short* seed48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:90</i><br>
	 * @deprecated use the safer methods {@link #seed48(java.nio.ShortBuffer)} and {@link #seed48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	ShortByReference seed48(ShortByReference __seed16v);
	/**
	 * Original signature : <code>short* seed48(unsigned short[3])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:90</i>
	 */
	ShortByReference seed48(ShortBuffer __seed16v);
	/**
	 * Original signature : <code>void lcong48(unsigned short[7])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:92</i><br>
	 * @deprecated use the safer methods {@link #lcong48(java.nio.ShortBuffer)} and {@link #lcong48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	void lcong48(ShortByReference __param);
	/**
	 * Original signature : <code>void lcong48(unsigned short[7])</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:92</i>
	 */
	void lcong48(ShortBuffer __param);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>int drand48_r(drand48_data*, double*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:109</i><br>
	 * @deprecated use the safer methods {@link #drand48_r(voice.linux.jna.drand48_data, java.nio.DoubleBuffer)} and {@link #drand48_r(voice.linux.jna.drand48_data, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int drand48_r(drand48_data __buffer, DoubleByReference __result);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>int drand48_r(drand48_data*, double*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:109</i>
	 */
	int drand48_r(drand48_data __buffer, DoubleBuffer __result);
	/**
	 * Original signature : <code>int erand48_r(unsigned short[3], drand48_data*, double*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:111</i><br>
	 * @deprecated use the safer methods {@link #erand48_r(java.nio.ShortBuffer, voice.linux.jna.drand48_data, java.nio.DoubleBuffer)} and {@link #erand48_r(com.sun.jna.ptr.ShortByReference, voice.linux.jna.drand48_data, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int erand48_r(ShortByReference __xsubi, drand48_data __buffer, DoubleByReference __result);
	/**
	 * Original signature : <code>int erand48_r(unsigned short[3], drand48_data*, double*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:111</i>
	 */
	int erand48_r(ShortBuffer __xsubi, drand48_data __buffer, DoubleBuffer __result);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>int lrand48_r(drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:116</i><br>
	 * @deprecated use the safer methods {@link #lrand48_r(voice.linux.jna.drand48_data, java.nio.LongBuffer)} and {@link #lrand48_r(voice.linux.jna.drand48_data, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int lrand48_r(drand48_data __buffer, LongByReference __result);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>int lrand48_r(drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:116</i>
	 */
	int lrand48_r(drand48_data __buffer, LongBuffer __result);
	/**
	 * Original signature : <code>int nrand48_r(unsigned short[3], drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:119</i><br>
	 * @deprecated use the safer methods {@link #nrand48_r(java.nio.ShortBuffer, voice.linux.jna.drand48_data, java.nio.LongBuffer)} and {@link #nrand48_r(com.sun.jna.ptr.ShortByReference, voice.linux.jna.drand48_data, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int nrand48_r(ShortByReference __xsubi, drand48_data __buffer, LongByReference __result);
	/**
	 * Original signature : <code>int nrand48_r(unsigned short[3], drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:119</i>
	 */
	int nrand48_r(ShortBuffer __xsubi, drand48_data __buffer, LongBuffer __result);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>int mrand48_r(drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:125</i><br>
	 * @deprecated use the safer methods {@link #mrand48_r(voice.linux.jna.drand48_data, java.nio.LongBuffer)} and {@link #mrand48_r(voice.linux.jna.drand48_data, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int mrand48_r(drand48_data __buffer, LongByReference __result);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>int mrand48_r(drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:125</i>
	 */
	int mrand48_r(drand48_data __buffer, LongBuffer __result);
	/**
	 * Original signature : <code>int jrand48_r(unsigned short[3], drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:128</i><br>
	 * @deprecated use the safer methods {@link #jrand48_r(java.nio.ShortBuffer, voice.linux.jna.drand48_data, java.nio.LongBuffer)} and {@link #jrand48_r(com.sun.jna.ptr.ShortByReference, voice.linux.jna.drand48_data, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int jrand48_r(ShortByReference __xsubi, drand48_data __buffer, LongByReference __result);
	/**
	 * Original signature : <code>int jrand48_r(unsigned short[3], drand48_data*, long long*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:128</i>
	 */
	int jrand48_r(ShortBuffer __xsubi, drand48_data __buffer, LongBuffer __result);
	/**
	 * Seed random number generator.<br>
	 * Original signature : <code>int srand48_r(long long, drand48_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:134</i>
	 */
	int srand48_r(long __seedval, drand48_data __buffer);
	/**
	 * Original signature : <code>int seed48_r(unsigned short[3], drand48_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:137</i><br>
	 * @deprecated use the safer methods {@link #seed48_r(java.nio.ShortBuffer, voice.linux.jna.drand48_data)} and {@link #seed48_r(com.sun.jna.ptr.ShortByReference, voice.linux.jna.drand48_data)} instead
	 */
	@Deprecated 
	int seed48_r(ShortByReference __seed16v, drand48_data __buffer);
	/**
	 * Original signature : <code>int seed48_r(unsigned short[3], drand48_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:137</i>
	 */
	int seed48_r(ShortBuffer __seed16v, drand48_data __buffer);
	/**
	 * Original signature : <code>int lcong48_r(unsigned short[7], drand48_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:140</i><br>
	 * @deprecated use the safer methods {@link #lcong48_r(java.nio.ShortBuffer, voice.linux.jna.drand48_data)} and {@link #lcong48_r(com.sun.jna.ptr.ShortByReference, voice.linux.jna.drand48_data)} instead
	 */
	@Deprecated 
	int lcong48_r(ShortByReference __param, drand48_data __buffer);
	/**
	 * Original signature : <code>int lcong48_r(unsigned short[7], drand48_data*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:140</i>
	 */
	int lcong48_r(ShortBuffer __param, drand48_data __buffer);
	/**
	 * Allocate SIZE bytes of memory.<br>
	 * Original signature : <code>void* malloc(size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:152</i>
	 */
	Pointer malloc(NativeSize __size);
	/**
	 * Allocate NMEMB elements of SIZE bytes each, all initialized to 0.<br>
	 * Original signature : <code>void* calloc(size_t, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:154</i>
	 */
	Pointer calloc(NativeSize __nmemb, NativeSize __size);
	/**
	 * __attribute_malloc__ is not used, because if realloc returns<br>
	 * the same pointer that was passed to it, aliasing needs to be allowed<br>
	 * between objects pointed by the old and new pointers.<br>
	 * Original signature : <code>void* realloc(void*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:166</i>
	 */
	Pointer realloc(Pointer __ptr, NativeSize __size);
	/**
	 * Free a block allocated by `malloc', `realloc' or `calloc'.<br>
	 * Original signature : <code>void free(void*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:169</i>
	 */
	void free(Pointer __ptr);
	/**
	 * Free a block.  An alias for `free'.	(Sun Unices).<br>
	 * Original signature : <code>void cfree(void*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:174</i>
	 */
	void cfree(Pointer __ptr);
	/**
	 * Allocate SIZE bytes on a page boundary.  The storage cannot be freed.<br>
	 * Original signature : <code>void* valloc(size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:404</i>
	 */
	Pointer valloc(NativeSize __size);
	/**
	 * Allocate memory of SIZE bytes with an alignment of ALIGNMENT.<br>
	 * Original signature : <code>int posix_memalign(void**, size_t, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:409</i>
	 */
	int posix_memalign(PointerByReference __memptr, NativeSize __alignment, NativeSize __size);
	/**
	 * ISO C variant of aligned allocation.<br>
	 * Original signature : <code>void* aligned_alloc(size_t, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:415</i>
	 */
	Pointer aligned_alloc(NativeSize __alignment, NativeSize __size);
	/**
	 * Abort execution and generate a core-dump.<br>
	 * Original signature : <code>void abort()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:421</i>
	 */
	void abort();
	/**
	 * Register a function to be called when `exit' is called.<br>
	 * Original signature : <code>int atexit(atexit___func_callback*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:425</i>
	 */
	int atexit(Library.atexit___func_callback __func);
	/**
	 * Register a function to be called when `quick_exit' is called.<br>
	 * Original signature : <code>int at_quick_exit(at_quick_exit___func_callback*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:430</i>
	 */
	int at_quick_exit(Library.at_quick_exit___func_callback __func);
	/**
	 * Register a function to be called with the status<br>
	 * given to `exit' and the given argument.<br>
	 * Original signature : <code>int on_exit(on_exit___func_callback*, void*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:441</i>
	 */
	int on_exit(Library.on_exit___func_callback __func, Pointer __arg);
	/**
	 * Call all functions registered with `atexit' and `on_exit',<br>
	 * in the reverse of the order in which they were registered,<br>
	 * perform stdio cleanup, and terminate program execution with STATUS.<br>
	 * Original signature : <code>void exit(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:449</i>
	 */
	void exit(int __status);
	/**
	 * Call all functions registered with `at_quick_exit' in the reverse<br>
	 * of the order in which they were registered and terminate program<br>
	 * execution with STATUS.<br>
	 * Original signature : <code>void quick_exit(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:455</i>
	 */
	void quick_exit(int __status);
	/**
	 * Terminate the program with STATUS without calling any of the<br>
	 * functions registered with `atexit' or `on_exit'.<br>
	 * Original signature : <code>void _Exit(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:463</i>
	 */
	void _Exit(int __status);
	/**
	 * Return the value of envariable NAME, or NULL if it doesn't exist.<br>
	 * Original signature : <code>char* getenv(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:470</i><br>
	 * @deprecated use the safer methods {@link #getenv(java.lang.String)} and {@link #getenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getenv(Pointer __name);
	/**
	 * Return the value of envariable NAME, or NULL if it doesn't exist.<br>
	 * Original signature : <code>char* getenv(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:470</i>
	 */
	Pointer getenv(String __name);
	/**
	 * This function is similar to the above but returns NULL if the<br>
	 * programs is running with SUID or SGID enabled.<br>
	 * Original signature : <code>char* secure_getenv(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:476</i><br>
	 * @deprecated use the safer methods {@link #secure_getenv(java.lang.String)} and {@link #secure_getenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer secure_getenv(Pointer __name);
	/**
	 * This function is similar to the above but returns NULL if the<br>
	 * programs is running with SUID or SGID enabled.<br>
	 * Original signature : <code>char* secure_getenv(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:476</i>
	 */
	Pointer secure_getenv(String __name);
	/**
	 * Put STRING, which is of the form "NAME=VALUE", in the environment.<br>
	 * If there is no `=', remove NAME from the environment.<br>
	 * Original signature : <code>int putenv(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:484</i><br>
	 * @deprecated use the safer methods {@link #putenv(java.nio.ByteBuffer)} and {@link #putenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int putenv(Pointer __string);
	/**
	 * Put STRING, which is of the form "NAME=VALUE", in the environment.<br>
	 * If there is no `=', remove NAME from the environment.<br>
	 * Original signature : <code>int putenv(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:484</i>
	 */
	int putenv(ByteBuffer __string);
	/**
	 * Set NAME to VALUE in the environment.<br>
	 * If REPLACE is nonzero, overwrite an existing value.<br>
	 * Original signature : <code>int setenv(const char*, const char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:490</i><br>
	 * @deprecated use the safer methods {@link #setenv(java.lang.String, java.lang.String, int)} and {@link #setenv(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int setenv(Pointer __name, Pointer __value, int __replace);
	/**
	 * Set NAME to VALUE in the environment.<br>
	 * If REPLACE is nonzero, overwrite an existing value.<br>
	 * Original signature : <code>int setenv(const char*, const char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:490</i>
	 */
	int setenv(String __name, String __value, int __replace);
	/**
	 * Remove the variable NAME from the environment.<br>
	 * Original signature : <code>int unsetenv(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:494</i><br>
	 * @deprecated use the safer methods {@link #unsetenv(java.lang.String)} and {@link #unsetenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unsetenv(Pointer __name);
	/**
	 * Remove the variable NAME from the environment.<br>
	 * Original signature : <code>int unsetenv(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:494</i>
	 */
	int unsetenv(String __name);
	/**
	 * The `clearenv' was planned to be added to POSIX.1 but probably<br>
	 * never made it.  Nevertheless the POSIX.9 standard (POSIX bindings<br>
	 * for Fortran 77) requires this function.<br>
	 * Original signature : <code>int clearenv()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:501</i>
	 */
	int clearenv();
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the file name unique.<br>
	 * Always returns TEMPLATE, it's either a temporary file name or a null<br>
	 * string if it cannot get a unique file name.<br>
	 * Original signature : <code>char* mktemp(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:512</i><br>
	 * @deprecated use the safer methods {@link #mktemp(java.nio.ByteBuffer)} and {@link #mktemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer mktemp(Pointer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the file name unique.<br>
	 * Always returns TEMPLATE, it's either a temporary file name or a null<br>
	 * string if it cannot get a unique file name.<br>
	 * Original signature : <code>char* mktemp(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:512</i>
	 */
	Pointer mktemp(ByteBuffer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the filename unique.<br>
	 * Returns a file descriptor open on the file for reading and writing,<br>
	 * or -1 if it cannot create a uniquely-named file.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemp(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:526</i><br>
	 * @deprecated use the safer methods {@link #mkstemp(java.nio.ByteBuffer)} and {@link #mkstemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int mkstemp(Pointer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the filename unique.<br>
	 * Returns a file descriptor open on the file for reading and writing,<br>
	 * or -1 if it cannot create a uniquely-named file.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemp(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:526</i>
	 */
	int mkstemp(ByteBuffer __template);
	/**
	 * Original signature : <code>int mkstemp64(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:536</i><br>
	 * @deprecated use the safer methods {@link #mkstemp64(java.nio.ByteBuffer)} and {@link #mkstemp64(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int mkstemp64(Pointer __template);
	/**
	 * Original signature : <code>int mkstemp64(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:536</i>
	 */
	int mkstemp64(ByteBuffer __template);
	/**
	 * Similar to mkstemp, but the template can have a suffix after the<br>
	 * XXXXXX.  The length of the suffix is specified in the second<br>
	 * parameter.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemps(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:548</i><br>
	 * @deprecated use the safer methods {@link #mkstemps(java.nio.ByteBuffer, int)} and {@link #mkstemps(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkstemps(Pointer __template, int __suffixlen);
	/**
	 * Similar to mkstemp, but the template can have a suffix after the<br>
	 * XXXXXX.  The length of the suffix is specified in the second<br>
	 * parameter.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemps(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:548</i>
	 */
	int mkstemps(ByteBuffer __template, int __suffixlen);
	/**
	 * Original signature : <code>int mkstemps64(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:558</i><br>
	 * @deprecated use the safer methods {@link #mkstemps64(java.nio.ByteBuffer, int)} and {@link #mkstemps64(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkstemps64(Pointer __template, int __suffixlen);
	/**
	 * Original signature : <code>int mkstemps64(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:558</i>
	 */
	int mkstemps64(ByteBuffer __template, int __suffixlen);
	/**
	 * Create a unique temporary directory from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the directory name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique name.<br>
	 * The directory is created mode 700.<br>
	 * Original signature : <code>char* mkdtemp(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:569</i><br>
	 * @deprecated use the safer methods {@link #mkdtemp(java.nio.ByteBuffer)} and {@link #mkdtemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer mkdtemp(Pointer __template);
	/**
	 * Create a unique temporary directory from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the directory name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique name.<br>
	 * The directory is created mode 700.<br>
	 * Original signature : <code>char* mkdtemp(char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:569</i>
	 */
	Pointer mkdtemp(ByteBuffer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE similar to<br>
	 * mkstemp.  But allow the caller to pass additional flags which are<br>
	 * used in the open call to create the file..<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkostemp(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:580</i><br>
	 * @deprecated use the safer methods {@link #mkostemp(java.nio.ByteBuffer, int)} and {@link #mkostemp(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkostemp(Pointer __template, int __flags);
	/**
	 * Generate a unique temporary file name from TEMPLATE similar to<br>
	 * mkstemp.  But allow the caller to pass additional flags which are<br>
	 * used in the open call to create the file..<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkostemp(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:580</i>
	 */
	int mkostemp(ByteBuffer __template, int __flags);
	/**
	 * Original signature : <code>int mkostemp64(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:590</i><br>
	 * @deprecated use the safer methods {@link #mkostemp64(java.nio.ByteBuffer, int)} and {@link #mkostemp64(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkostemp64(Pointer __template, int __flags);
	/**
	 * Original signature : <code>int mkostemp64(char*, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:590</i>
	 */
	int mkostemp64(ByteBuffer __template, int __flags);
	/**
	 * Similar to mkostemp, but the template can have a suffix after the<br>
	 * XXXXXX.  The length of the suffix is specified in the second<br>
	 * parameter.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkostemps(char*, int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:600</i><br>
	 * @deprecated use the safer methods {@link #mkostemps(java.nio.ByteBuffer, int, int)} and {@link #mkostemps(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int mkostemps(Pointer __template, int __suffixlen, int __flags);
	/**
	 * Similar to mkostemp, but the template can have a suffix after the<br>
	 * XXXXXX.  The length of the suffix is specified in the second<br>
	 * parameter.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkostemps(char*, int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:600</i>
	 */
	int mkostemps(ByteBuffer __template, int __suffixlen, int __flags);
	/**
	 * Original signature : <code>int mkostemps64(char*, int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:612</i><br>
	 * @deprecated use the safer methods {@link #mkostemps64(java.nio.ByteBuffer, int, int)} and {@link #mkostemps64(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int mkostemps64(Pointer __template, int __suffixlen, int __flags);
	/**
	 * Original signature : <code>int mkostemps64(char*, int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:612</i>
	 */
	int mkostemps64(ByteBuffer __template, int __suffixlen, int __flags);
	/**
	 * Execute the given line as a shell command.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int system(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:623</i><br>
	 * @deprecated use the safer methods {@link #system(java.lang.String)} and {@link #system(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int system(Pointer __command);
	/**
	 * Execute the given line as a shell command.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int system(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:623</i>
	 */
	int system(String __command);
	/**
	 * Return a malloc'd string containing the canonical absolute name of the<br>
	 * existing named file.<br>
	 * Original signature : <code>char* canonicalize_file_name(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:630</i><br>
	 * @deprecated use the safer methods {@link #canonicalize_file_name(java.lang.String)} and {@link #canonicalize_file_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer canonicalize_file_name(Pointer __name);
	/**
	 * Return a malloc'd string containing the canonical absolute name of the<br>
	 * existing named file.<br>
	 * Original signature : <code>char* canonicalize_file_name(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:630</i>
	 */
	Pointer canonicalize_file_name(String __name);
	/**
	 * Return the canonical absolute name of file NAME.  If RESOLVED is<br>
	 * null, the result is malloc'd; otherwise, if the canonical name is<br>
	 * PATH_MAX chars or more, returns null with `errno' set to<br>
	 * ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,<br>
	 * returns the name in RESOLVED.<br>
	 * Original signature : <code>char* realpath(const char*, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:640</i><br>
	 * @deprecated use the safer methods {@link #realpath(java.lang.String, java.nio.ByteBuffer)} and {@link #realpath(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer realpath(Pointer __name, Pointer __resolved);
	/**
	 * Return the canonical absolute name of file NAME.  If RESOLVED is<br>
	 * null, the result is malloc'd; otherwise, if the canonical name is<br>
	 * PATH_MAX chars or more, returns null with `errno' set to<br>
	 * ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,<br>
	 * returns the name in RESOLVED.<br>
	 * Original signature : <code>char* realpath(const char*, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:640</i>
	 */
	Pointer realpath(String __name, ByteBuffer __resolved);
	/**
	 * Do a binary search for KEY in BASE, which consists of NMEMB elements<br>
	 * of SIZE bytes each, using COMPAR to perform the comparisons.<br>
	 * Original signature : <code>void* bsearch(const void*, const void*, size_t, size_t, __compar_fn_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:661</i>
	 */
	Pointer bsearch(Pointer __key, Pointer __base, NativeSize __nmemb, NativeSize __size, Library.__compar_fn_t __compar);
	/**
	 * Sort NMEMB elements of BASE, of SIZE bytes each,<br>
	 * using COMPAR to perform the comparisons.<br>
	 * Original signature : <code>void qsort(void*, size_t, size_t, __compar_fn_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:671</i>
	 */
	void qsort(Pointer __base, NativeSize __nmemb, NativeSize __size, Library.__compar_fn_t __compar);
	/**
	 * Original signature : <code>void qsort_r(void*, size_t, size_t, __compar_d_fn_t, void*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:674</i>
	 */
	void qsort_r(Pointer __base, NativeSize __nmemb, NativeSize __size, Library.__compar_d_fn_t __compar, Pointer __arg);
	/**
	 * Return the absolute value of X.<br>
	 * Original signature : <code>int abs(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:681</i>
	 */
	int abs(int __x);
	/**
	 * Original signature : <code>long long labs(long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:682</i>
	 */
	long labs(long __x);
	/**
	 * Original signature : <code>long long long llabs(long long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:686</i>
	 */
	long llabs(long __x);
	/**
	 * GCC may have built-ins for these someday.<br>
	 * Original signature : <code>div_t div(int, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:695</i>
	 */
	voice.linux.jna.div_t.ByValue div(int __numer, int __denom);
	/**
	 * Original signature : <code>ldiv_t ldiv(long long, long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:697</i>
	 */
	voice.linux.jna.ldiv_t.ByValue ldiv(long __numer, long __denom);
	/**
	 * Original signature : <code>lldiv_t lldiv(long long long, long long long)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:703</i>
	 */
	voice.linux.jna.lldiv_t.ByValue lldiv(long __numer, long __denom);
	/**
	 * Convert VALUE to a string with NDIGIT digits and return a pointer to<br>
	 * this.  Set *DECPT with the position of the decimal character and *SIGN<br>
	 * with the sign of the number.<br>
	 * Original signature : <code>char* ecvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:718</i><br>
	 * @deprecated use the safer methods {@link #ecvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #ecvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer ecvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Convert VALUE to a string with NDIGIT digits and return a pointer to<br>
	 * this.  Set *DECPT with the position of the decimal character and *SIGN<br>
	 * with the sign of the number.<br>
	 * Original signature : <code>char* ecvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:718</i>
	 */
	Pointer ecvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT<br>
	 * with the position of the decimal character and *SIGN with the sign of<br>
	 * the number.<br>
	 * Original signature : <code>char* fcvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:724</i><br>
	 * @deprecated use the safer methods {@link #fcvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #fcvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer fcvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT<br>
	 * with the position of the decimal character and *SIGN with the sign of<br>
	 * the number.<br>
	 * Original signature : <code>char* fcvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:724</i>
	 */
	Pointer fcvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * If possible convert VALUE to a string with NDIGIT significant digits.<br>
	 * Otherwise use exponential representation.  The resulting string will<br>
	 * be written to BUF.<br>
	 * Original signature : <code>char* gcvt(double, int, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:730</i><br>
	 * @deprecated use the safer methods {@link #gcvt(double, int, java.nio.ByteBuffer)} and {@link #gcvt(double, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gcvt(double __value, int __ndigit, Pointer __buf);
	/**
	 * If possible convert VALUE to a string with NDIGIT significant digits.<br>
	 * Otherwise use exponential representation.  The resulting string will<br>
	 * be written to BUF.<br>
	 * Original signature : <code>char* gcvt(double, int, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:730</i>
	 */
	Pointer gcvt(double __value, int __ndigit, ByteBuffer __buf);
	/**
	 * Long double versions of above functions.<br>
	 * Original signature : <code>char* qecvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:736</i><br>
	 * @deprecated use the safer methods {@link #qecvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #qecvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer qecvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Long double versions of above functions.<br>
	 * Original signature : <code>char* qecvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:736</i>
	 */
	Pointer qecvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Original signature : <code>char* qfcvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:739</i><br>
	 * @deprecated use the safer methods {@link #qfcvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #qfcvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer qfcvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Original signature : <code>char* qfcvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:739</i>
	 */
	Pointer qfcvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Original signature : <code>char* qgcvt(long double, int, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:742</i><br>
	 * @deprecated use the safer methods {@link #qgcvt(double, int, java.nio.ByteBuffer)} and {@link #qgcvt(double, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer qgcvt(double __value, int __ndigit, Pointer __buf);
	/**
	 * Original signature : <code>char* qgcvt(long double, int, char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:742</i>
	 */
	Pointer qgcvt(double __value, int __ndigit, ByteBuffer __buf);
	/**
	 * Reentrant version of the functions above which provide their own<br>
	 * buffers.<br>
	 * Original signature : <code>int ecvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:748</i><br>
	 * @deprecated use the safer methods {@link #ecvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ecvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int ecvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSize __len);
	/**
	 * Reentrant version of the functions above which provide their own<br>
	 * buffers.<br>
	 * Original signature : <code>int ecvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:748</i>
	 */
	int ecvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSize __len);
	/**
	 * Original signature : <code>int fcvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:751</i><br>
	 * @deprecated use the safer methods {@link #fcvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #fcvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int fcvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSize __len);
	/**
	 * Original signature : <code>int fcvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:751</i>
	 */
	int fcvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSize __len);
	/**
	 * Original signature : <code>int qecvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:755</i><br>
	 * @deprecated use the safer methods {@link #qecvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #qecvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int qecvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSize __len);
	/**
	 * Original signature : <code>int qecvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:755</i>
	 */
	int qecvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSize __len);
	/**
	 * Original signature : <code>int qfcvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:759</i><br>
	 * @deprecated use the safer methods {@link #qfcvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #qfcvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int qfcvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSize __len);
	/**
	 * Original signature : <code>int qfcvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:759</i>
	 */
	int qfcvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSize __len);
	/**
	 * Return the length of the multibyte character<br>
	 * in S, which is no longer than N.<br>
	 * Original signature : <code>int mblen(const char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:769</i><br>
	 * @deprecated use the safer methods {@link #mblen(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #mblen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int mblen(Pointer __s, NativeSize __n);
	/**
	 * Return the length of the multibyte character<br>
	 * in S, which is no longer than N.<br>
	 * Original signature : <code>int mblen(const char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:769</i>
	 */
	int mblen(String __s, NativeSize __n);
	/**
	 * Return the length of the given multibyte character,<br>
	 * putting its `wchar_t' representation in *PWC.<br>
	 * Original signature : <code>int mbtowc(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:772</i><br>
	 * @deprecated use the safer methods {@link #mbtowc(java.nio.CharBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #mbtowc(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int mbtowc(CharByReference __pwc, Pointer __s, NativeSize __n);
	/**
	 * Return the length of the given multibyte character,<br>
	 * putting its `wchar_t' representation in *PWC.<br>
	 * Original signature : <code>int mbtowc(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:772</i>
	 */
	int mbtowc(CharBuffer __pwc, String __s, NativeSize __n);
	/**
	 * Put the multibyte character represented<br>
	 * by WCHAR in S, returning its length.<br>
	 * Original signature : <code>int wctomb(char*, wchar_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:776</i><br>
	 * @deprecated use the safer methods {@link #wctomb(java.nio.ByteBuffer, char)} and {@link #wctomb(com.sun.jna.Pointer, char)} instead
	 */
	@Deprecated 
	int wctomb(Pointer __s, char __wchar);
	/**
	 * Put the multibyte character represented<br>
	 * by WCHAR in S, returning its length.<br>
	 * Original signature : <code>int wctomb(char*, wchar_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:776</i>
	 */
	int wctomb(ByteBuffer __s, char __wchar);
	/**
	 * Convert a multibyte string to a wide char string.<br>
	 * Original signature : <code>size_t mbstowcs(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:780</i><br>
	 * @deprecated use the safer methods {@link #mbstowcs(java.nio.CharBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #mbstowcs(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeSize mbstowcs(CharByReference __pwcs, Pointer __s, NativeSize __n);
	/**
	 * Convert a multibyte string to a wide char string.<br>
	 * Original signature : <code>size_t mbstowcs(wchar_t*, const char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:780</i>
	 */
	NativeSize mbstowcs(CharBuffer __pwcs, String __s, NativeSize __n);
	/**
	 * Convert a wide char string to multibyte string.<br>
	 * Original signature : <code>size_t wcstombs(char*, const wchar_t*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:783</i><br>
	 * @deprecated use the safer methods {@link #wcstombs(java.nio.ByteBuffer, com.sun.jna.WString, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #wcstombs(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.CharByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	NativeSize wcstombs(Pointer __s, CharByReference __pwcs, NativeSize __n);
	/**
	 * Convert a wide char string to multibyte string.<br>
	 * Original signature : <code>size_t wcstombs(char*, const wchar_t*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:783</i>
	 */
	NativeSize wcstombs(ByteBuffer __s, WString __pwcs, NativeSize __n);
	/**
	 * Determine whether the string value of RESPONSE matches the affirmation<br>
	 * or negative response expression as specified by the LC_MESSAGES category<br>
	 * in the program's current locale.  Returns 1 if affirmative, 0 if<br>
	 * negative, and -1 if not matching.<br>
	 * Original signature : <code>int rpmatch(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:794</i><br>
	 * @deprecated use the safer methods {@link #rpmatch(java.lang.String)} and {@link #rpmatch(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rpmatch(Pointer __response);
	/**
	 * Determine whether the string value of RESPONSE matches the affirmation<br>
	 * or negative response expression as specified by the LC_MESSAGES category<br>
	 * in the program's current locale.  Returns 1 if affirmative, 0 if<br>
	 * negative, and -1 if not matching.<br>
	 * Original signature : <code>int rpmatch(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:794</i>
	 */
	int rpmatch(String __response);
	/**
	 * Parse comma separated suboption from *OPTIONP and match against<br>
	 * strings in TOKENS.  If found return index and set *VALUEP to<br>
	 * optional value introduced by an equal sign.  If the suboption is<br>
	 * not part of TOKENS return in *VALUEP beginning of unknown<br>
	 * suboption.  On exit *OPTIONP is set to the beginning of the next<br>
	 * token or at the terminating NUL character.<br>
	 * Original signature : <code>int getsubopt(char**, const char**, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:805</i><br>
	 * @deprecated use the safer methods {@link #getsubopt(com.sun.jna.ptr.PointerByReference, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #getsubopt(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int getsubopt(PointerByReference __optionp, PointerByReference __tokens, PointerByReference __valuep);
	/**
	 * Parse comma separated suboption from *OPTIONP and match against<br>
	 * strings in TOKENS.  If found return index and set *VALUEP to<br>
	 * optional value introduced by an equal sign.  If the suboption is<br>
	 * not part of TOKENS return in *VALUEP beginning of unknown<br>
	 * suboption.  On exit *OPTIONP is set to the beginning of the next<br>
	 * token or at the terminating NUL character.<br>
	 * Original signature : <code>int getsubopt(char**, const char**, char**)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:805</i>
	 */
	int getsubopt(PointerByReference __optionp, String __tokens[], PointerByReference __valuep);
	/**
	 * Setup DES tables according KEY.<br>
	 * Original signature : <code>void setkey(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:814</i><br>
	 * @deprecated use the safer methods {@link #setkey(java.lang.String)} and {@link #setkey(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void setkey(Pointer __key);
	/**
	 * Setup DES tables according KEY.<br>
	 * Original signature : <code>void setkey(const char*)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:814</i>
	 */
	void setkey(String __key);
	/**
	 * Return a master pseudo-terminal handle.<br>
	 * Original signature : <code>int posix_openpt(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:822</i>
	 */
	int posix_openpt(int __oflag);
	/**
	 * Chown the slave to the calling user.<br>
	 * Original signature : <code>int grantpt(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:830</i>
	 */
	int grantpt(int __fd);
	/**
	 * Release an internal lock so the slave can be opened.<br>
	 * Call after grantpt().<br>
	 * Original signature : <code>int unlockpt(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:834</i>
	 */
	int unlockpt(int __fd);
	/**
	 * Return the pathname of the pseudo terminal slave associated with<br>
	 * the master FD is open on, or NULL on errors.<br>
	 * The returned storage is good until the next call to this function.<br>
	 * Original signature : <code>char* ptsname(int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:839</i>
	 */
	Pointer ptsname(int __fd);
	/**
	 * Store at most BUFLEN characters of the pathname of the slave pseudo<br>
	 * terminal associated with the master FD is open on in BUF.<br>
	 * Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ptsname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:846</i><br>
	 * @deprecated use the safer methods {@link #ptsname_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ptsname_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int ptsname_r(int __fd, Pointer __buf, NativeSize __buflen);
	/**
	 * Store at most BUFLEN characters of the pathname of the slave pseudo<br>
	 * terminal associated with the master FD is open on in BUF.<br>
	 * Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ptsname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:846</i>
	 */
	int ptsname_r(int __fd, ByteBuffer __buf, NativeSize __buflen);
	/**
	 * Open a master pseudo terminal and return its file descriptor.<br>
	 * Original signature : <code>int getpt()</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:850</i>
	 */
	int getpt();
	/**
	 * Put the 1 minute, 5 minute and 15 minute load averages into the first<br>
	 * NELEM elements of LOADAVG.  Return the number written (never more than<br>
	 * three, but may be less than NELEM), or -1 if an error occurred.<br>
	 * Original signature : <code>int getloadavg(double[], int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:857</i><br>
	 * @deprecated use the safer methods {@link #getloadavg(java.nio.DoubleBuffer, int)} and {@link #getloadavg(com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	int getloadavg(DoubleByReference __loadavg, int __nelem);
	/**
	 * Put the 1 minute, 5 minute and 15 minute load averages into the first<br>
	 * NELEM elements of LOADAVG.  Return the number written (never more than<br>
	 * three, but may be less than NELEM), or -1 if an error occurred.<br>
	 * Original signature : <code>int getloadavg(double[], int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\stdlib.h:857</i>
	 */
	int getloadavg(DoubleBuffer __loadavg, int __nelem);
	/**
	 * Do the file control operation described by CMD on FD.<br>
	 * The remaining arguments are interpreted depending on CMD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int fcntl(int, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:124</i>
	 */
	int fcntl(int __fd, int __cmd, Object... varArgs1);
	/**
	 * Open FILE and return a new file descriptor for it, or -1 on error.<br>
	 * OFLAG determines the type of access used.  If O_CREAT or O_TMPFILE is set<br>
	 * in OFLAG, the third argument is taken as a `mode_t', the mode of the<br>
	 * created file.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int open(const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:134</i><br>
	 * @deprecated use the safer methods {@link #open(java.lang.String, int, java.lang.Object)} and {@link #open(com.sun.jna.Pointer, int, java.lang.Object)} instead
	 */
	@Deprecated 
	int open(Pointer __file, int __oflag, Object... varArgs1);
	/**
	 * Open FILE and return a new file descriptor for it, or -1 on error.<br>
	 * OFLAG determines the type of access used.  If O_CREAT or O_TMPFILE is set<br>
	 * in OFLAG, the third argument is taken as a `mode_t', the mode of the<br>
	 * created file.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int open(const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:134</i>
	 */
	int open(String __file, int __oflag, Object... varArgs1);
	/**
	 * Original signature : <code>int open64(const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:144</i><br>
	 * @deprecated use the safer methods {@link #open64(java.lang.String, int, java.lang.Object)} and {@link #open64(com.sun.jna.Pointer, int, java.lang.Object)} instead
	 */
	@Deprecated 
	int open64(Pointer __file, int __oflag, Object... varArgs1);
	/**
	 * Original signature : <code>int open64(const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:144</i>
	 */
	int open64(String __file, int __oflag, Object... varArgs1);
	/**
	 * Similar to `open' but a relative path name is interpreted relative to<br>
	 * the directory for which FD is a descriptor.<br>
	 * NOTE: some other `openat' implementation support additional functionality<br>
	 * through this interface, especially using the O_XATTR flag.  This is not<br>
	 * yet supported here.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int openat(int, const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:158</i><br>
	 * @deprecated use the safer methods {@link #openat(int, java.lang.String, int, java.lang.Object)} and {@link #openat(int, com.sun.jna.Pointer, int, java.lang.Object)} instead
	 */
	@Deprecated 
	int openat(int __fd, Pointer __file, int __oflag, Object... varArgs1);
	/**
	 * Similar to `open' but a relative path name is interpreted relative to<br>
	 * the directory for which FD is a descriptor.<br>
	 * NOTE: some other `openat' implementation support additional functionality<br>
	 * through this interface, especially using the O_XATTR flag.  This is not<br>
	 * yet supported here.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int openat(int, const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:158</i>
	 */
	int openat(int __fd, String __file, int __oflag, Object... varArgs1);
	/**
	 * Original signature : <code>int openat64(int, const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:169</i><br>
	 * @deprecated use the safer methods {@link #openat64(int, java.lang.String, int, java.lang.Object)} and {@link #openat64(int, com.sun.jna.Pointer, int, java.lang.Object)} instead
	 */
	@Deprecated 
	int openat64(int __fd, Pointer __file, int __oflag, Object... varArgs1);
	/**
	 * Original signature : <code>int openat64(int, const char*, int, null)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:169</i>
	 */
	int openat64(int __fd, String __file, int __oflag, Object... varArgs1);
	/**
	 * Create and open FILE, with mode MODE.  This takes an `int' MODE<br>
	 * argument because that is what `mode_t' will be widened to.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int creat(const char*, mode_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:180</i><br>
	 * @deprecated use the safer methods {@link #creat(java.lang.String, int)} and {@link #creat(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int creat(Pointer __file, int __mode);
	/**
	 * Create and open FILE, with mode MODE.  This takes an `int' MODE<br>
	 * argument because that is what `mode_t' will be widened to.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int creat(const char*, mode_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:180</i>
	 */
	int creat(String __file, int __mode);
	/**
	 * Original signature : <code>int creat64(const char*, mode_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:190</i><br>
	 * @deprecated use the safer methods {@link #creat64(java.lang.String, int)} and {@link #creat64(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int creat64(Pointer __file, int __mode);
	/**
	 * Original signature : <code>int creat64(const char*, mode_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:190</i>
	 */
	int creat64(String __file, int __mode);
	/**
	 * Advice the system about the expected behaviour of the application with<br>
	 * respect to the file associated with FD.<br>
	 * Original signature : <code>int posix_fadvise(int, off_t, off_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:226</i>
	 */
	int posix_fadvise(int __fd, long __offset, long __len, int __advise);
	/**
	 * Original signature : <code>int posix_fadvise64(int, off64_t, off64_t, int)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:238</i>
	 */
	int posix_fadvise64(int __fd, long __offset, long __len, int __advise);
	/**
	 * Reserve storage for the data of the file associated with FD.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int posix_fallocate(int, off_t, off_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:248</i>
	 */
	int posix_fallocate(int __fd, long __offset, long __len);
	/**
	 * Original signature : <code>int posix_fallocate64(int, off64_t, off64_t)</code><br>
	 * <i>native declaration : ..\voice\local\headers\\usr\include\fcntl.h:259</i>
	 */
	int posix_fallocate64(int __fd, long __offset, long __len);
	public static class __locale_data extends PointerType {
		public __locale_data(Pointer address) {
			super(address);
		}
		public __locale_data() {
			super();
		}
	};
	public static class obstack extends PointerType {
		public obstack(Pointer address) {
			super(address);
		}
		public obstack() {
			super();
		}
	};
	public static class _IO_lock_t extends PointerType {
		public _IO_lock_t(Pointer address) {
			super(address);
		}
		public _IO_lock_t() {
			super();
		}
	};
}
