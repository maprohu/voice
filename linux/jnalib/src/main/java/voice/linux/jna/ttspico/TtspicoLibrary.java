package voice.linux.jna.ttspico;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b>ttspico</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface TtspicoLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "ttspico";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(TtspicoLibrary.JNA_LIBRARY_NAME);
	public static final TtspicoLibrary INSTANCE = (TtspicoLibrary)Native.loadLibrary(TtspicoLibrary.JNA_LIBRARY_NAME, TtspicoLibrary.class);
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_VOICE_NAME_SIZE = (int)32;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_RESOURCE_NAME_SIZE = (int)32;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_DATAPATH_NAME_SIZE = (int)128;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_FILE_NAME_SIZE = (int)64;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_NUM_RESOURCES = (int)64;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_NUM_VOICE_DEFINITIONS = (int)64;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_NUM_RSRC_PER_VOICE = (int)16;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_MAX_FOREIGN_HEADER_LEN = (int)64;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_RESET_FULL = (int)0;
	/** <i>native declaration : picodefs.h</i> */
	public static final int PICO_RESET_SOFT = (int)0x10;
	/** <i>native declaration : picoapi.h</i> */
	public static final int PICO_INT16_MAX = (int)32767;
	/** <i>native declaration : picoapi.h</i> */
	public static final int PICO_UINT16_MAX = (int)0xffff;
	/** <i>native declaration : picoapi.h</i> */
	public static final int PICO_INT32_MAX = (int)2147483647;
	/** <i>native declaration : picoapi.h</i> */
	public static final long PICO_UINT32_MAX = (long)0xffffffffL;
	/** <i>native declaration : picoapi.h</i> */
	public static final int PICO_RETSTRINGSIZE = (int)200;
	/**
	 * Initializes the Pico system and returns its handle in 'outSystem'.<br>
	 * 'memory' and 'size' define the location and maximum size of memory<br>
	 * in number of bytes that the Pico system will use. The minimum size<br>
	 * required depends on the number of engines and configurations of<br>
	 * lingware to be used. No additional memory will be allocated by the<br>
	 * Pico system. This function must be called before any other API<br>
	 * function is called. It may only be called once (e.g. at application<br>
	 * startup), unless a call to 'pico_terminate'.<br>
	 * Original signature : <code>pico_Status pico_initialize(void*, const pico_Uint32, pico_System*)</code><br>
	 * <i>native declaration : picoapi.h:194</i><br>
	 * @deprecated use the safer method {@link #pico_initialize(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pico_initialize(Pointer memory, int size, Pointer outSystem);
	/**
	 * Initializes the Pico system and returns its handle in 'outSystem'.<br>
	 * 'memory' and 'size' define the location and maximum size of memory<br>
	 * in number of bytes that the Pico system will use. The minimum size<br>
	 * required depends on the number of engines and configurations of<br>
	 * lingware to be used. No additional memory will be allocated by the<br>
	 * Pico system. This function must be called before any other API<br>
	 * function is called. It may only be called once (e.g. at application<br>
	 * startup), unless a call to 'pico_terminate'.<br>
	 * Original signature : <code>pico_Status pico_initialize(void*, const pico_Uint32, pico_System*)</code><br>
	 * <i>native declaration : picoapi.h:194</i>
	 */
	int pico_initialize(Pointer memory, int size, PointerByReference outSystem);
	/**
	 * Terminates the Pico system. Lingware resources still being loaded<br>
	 * are unloaded automatically. The memory area provided to Pico in<br>
	 * 'pico_initialize' is released. The system handle becomes<br>
	 * invalid. It is not allowed to call this function as long as Pico<br>
	 * engine instances are existing. No API function may be called after<br>
	 * this function, except for 'pico_initialize', which reinitializes<br>
	 * the system.<br>
	 * Original signature : <code>pico_Status pico_terminate(pico_System*)</code><br>
	 * <i>native declaration : picoapi.h:209</i><br>
	 * @deprecated use the safer method {@link #pico_terminate(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pico_terminate(Pointer system);
	/**
	 * Terminates the Pico system. Lingware resources still being loaded<br>
	 * are unloaded automatically. The memory area provided to Pico in<br>
	 * 'pico_initialize' is released. The system handle becomes<br>
	 * invalid. It is not allowed to call this function as long as Pico<br>
	 * engine instances are existing. No API function may be called after<br>
	 * this function, except for 'pico_initialize', which reinitializes<br>
	 * the system.<br>
	 * Original signature : <code>pico_Status pico_terminate(pico_System*)</code><br>
	 * <i>native declaration : picoapi.h:209</i>
	 */
	int pico_terminate(PointerByReference system);
	/**
	 * Returns in 'outMessage' a description of the system status or of an<br>
	 * error that occurred with the most recently called system-level API<br>
	 * function.<br>
	 * Original signature : <code>pico_Status pico_getSystemStatusMessage(pico_System, pico_Status, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:221</i><br>
	 * @deprecated use the safer methods {@link #pico_getSystemStatusMessage(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, int, java.nio.ByteBuffer)} and {@link #pico_getSystemStatusMessage(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_getSystemStatusMessage(Pointer system, int errCode, Pointer outMessage);
	/**
	 * Returns in 'outMessage' a description of the system status or of an<br>
	 * error that occurred with the most recently called system-level API<br>
	 * function.<br>
	 * Original signature : <code>pico_Status pico_getSystemStatusMessage(pico_System, pico_Status, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:221</i>
	 */
	int pico_getSystemStatusMessage(TtspicoLibrary.pico_System system, int errCode, ByteBuffer outMessage);
	/**
	 * Returns in 'outNrOfWarnings' the number of warnings that occurred<br>
	 * with the most recently called system-level API function.<br>
	 * Original signature : <code>pico_Status pico_getNrSystemWarnings(pico_System, pico_Int32*)</code><br>
	 * <i>native declaration : picoapi.h:231</i><br>
	 * @deprecated use the safer methods {@link #pico_getNrSystemWarnings(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, java.nio.IntBuffer)} and {@link #pico_getNrSystemWarnings(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pico_getNrSystemWarnings(Pointer system, IntByReference outNrOfWarnings);
	/**
	 * Returns in 'outNrOfWarnings' the number of warnings that occurred<br>
	 * with the most recently called system-level API function.<br>
	 * Original signature : <code>pico_Status pico_getNrSystemWarnings(pico_System, pico_Int32*)</code><br>
	 * <i>native declaration : picoapi.h:231</i>
	 */
	int pico_getNrSystemWarnings(TtspicoLibrary.pico_System system, IntBuffer outNrOfWarnings);
	/**
	 * Returns in 'outMessage' a description of a warning that occurred<br>
	 * with the most recently called system-level API function.<br>
	 * 'warningIndex' must be in the range 0..N-1 where N is the number of<br>
	 * warnings returned by 'pico_getNrSystemWarnings'. 'outCode' returns<br>
	 * the warning as an integer code (cf. PICO_WARN_*).<br>
	 * Original signature : <code>pico_Status pico_getSystemWarning(pico_System, const pico_Int32, pico_Status*, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:243</i><br>
	 * @deprecated use the safer methods {@link #pico_getSystemWarning(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, int, java.nio.IntBuffer, java.nio.ByteBuffer)} and {@link #pico_getSystemWarning(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_getSystemWarning(Pointer system, int warningIndex, IntByReference outCode, Pointer outMessage);
	/**
	 * Returns in 'outMessage' a description of a warning that occurred<br>
	 * with the most recently called system-level API function.<br>
	 * 'warningIndex' must be in the range 0..N-1 where N is the number of<br>
	 * warnings returned by 'pico_getNrSystemWarnings'. 'outCode' returns<br>
	 * the warning as an integer code (cf. PICO_WARN_*).<br>
	 * Original signature : <code>pico_Status pico_getSystemWarning(pico_System, const pico_Int32, pico_Status*, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:243</i>
	 */
	int pico_getSystemWarning(TtspicoLibrary.pico_System system, int warningIndex, IntBuffer outCode, ByteBuffer outMessage);
	/**
	 * Loads a resource file into the Pico system. The number of resource<br>
	 * files loaded in parallel is limited by PICO_MAX_NUM_RESOURCES.<br>
	 * Loading of a resource file may be done at any time (even in<br>
	 * parallel to a running engine doing TTS synthesis), but with the<br>
	 * general restriction that functions taking a system handle as their<br>
	 * first argument must be called in a mutually exclusive fashion. The<br>
	 * loaded resource will be available only to engines started after the<br>
	 * resource is fully loaded, i.e., not to engines currently<br>
	 * running.<br>
	 * Original signature : <code>pico_Status pico_loadResource(pico_System, const pico_Char*, pico_Resource*)</code><br>
	 * <i>native declaration : picoapi.h:264</i><br>
	 * @deprecated use the safer methods {@link #pico_loadResource(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #pico_loadResource(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pico_loadResource(Pointer system, Pointer resourceFileName, Pointer outResource);
	/**
	 * Loads a resource file into the Pico system. The number of resource<br>
	 * files loaded in parallel is limited by PICO_MAX_NUM_RESOURCES.<br>
	 * Loading of a resource file may be done at any time (even in<br>
	 * parallel to a running engine doing TTS synthesis), but with the<br>
	 * general restriction that functions taking a system handle as their<br>
	 * first argument must be called in a mutually exclusive fashion. The<br>
	 * loaded resource will be available only to engines started after the<br>
	 * resource is fully loaded, i.e., not to engines currently<br>
	 * running.<br>
	 * Original signature : <code>pico_Status pico_loadResource(pico_System, const pico_Char*, pico_Resource*)</code><br>
	 * <i>native declaration : picoapi.h:264</i>
	 */
	int pico_loadResource(TtspicoLibrary.pico_System system, ByteBuffer resourceFileName, PointerByReference outResource);
	/**
	 * Loads a resource file into the Pico system. The number of resource<br>
	 * files loaded in parallel is limited by PICO_MAX_NUM_RESOURCES.<br>
	 * Loading of a resource file may be done at any time (even in<br>
	 * parallel to a running engine doing TTS synthesis), but with the<br>
	 * general restriction that functions taking a system handle as their<br>
	 * first argument must be called in a mutually exclusive fashion. The<br>
	 * loaded resource will be available only to engines started after the<br>
	 * resource is fully loaded, i.e., not to engines currently<br>
	 * running.<br>
	 * Original signature : <code>pico_Status pico_loadResource(pico_System, const pico_Char*, pico_Resource*)</code><br>
	 * <i>native declaration : picoapi.h:264</i>
	 */
	int pico_loadResource(Pointer system, Pointer resourceFileName, PointerByReference outResource);
	/**
	 * Unloads a resource file from the Pico system. If no engine uses the<br>
	 * resource file, the resource is removed immediately and its<br>
	 * associated internal memory is released, otherwise<br>
	 * PICO_EXC_RESOURCE_BUSY is returned.<br>
	 * Original signature : <code>pico_Status pico_unloadResource(pico_System, pico_Resource*)</code><br>
	 * <i>native declaration : picoapi.h:276</i><br>
	 * @deprecated use the safer methods {@link #pico_unloadResource(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, com.sun.jna.ptr.PointerByReference)} and {@link #pico_unloadResource(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pico_unloadResource(Pointer system, Pointer inoutResource);
	/**
	 * Unloads a resource file from the Pico system. If no engine uses the<br>
	 * resource file, the resource is removed immediately and its<br>
	 * associated internal memory is released, otherwise<br>
	 * PICO_EXC_RESOURCE_BUSY is returned.<br>
	 * Original signature : <code>pico_Status pico_unloadResource(pico_System, pico_Resource*)</code><br>
	 * <i>native declaration : picoapi.h:276</i>
	 */
	int pico_unloadResource(TtspicoLibrary.pico_System system, PointerByReference inoutResource);
	/**
	 * Unloads a resource file from the Pico system. If no engine uses the<br>
	 * resource file, the resource is removed immediately and its<br>
	 * associated internal memory is released, otherwise<br>
	 * PICO_EXC_RESOURCE_BUSY is returned.<br>
	 * Original signature : <code>pico_Status pico_unloadResource(pico_System, pico_Resource*)</code><br>
	 * <i>native declaration : picoapi.h:276</i>
	 */
	int pico_unloadResource(Pointer system, PointerByReference inoutResource);
	/**
	 * Gets the unique resource name of a loaded resource<br>
	 * Original signature : <code>pico_Status pico_getResourceName(pico_System, pico_Resource, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:286</i><br>
	 * @deprecated use the safer methods {@link #pico_getResourceName(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, voice.linux.jna.ttspico.TtspicoLibrary.pico_Resource, java.nio.ByteBuffer)} and {@link #pico_getResourceName(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_getResourceName(Pointer system, Pointer resource, Pointer outName);
	/**
	 * Gets the unique resource name of a loaded resource<br>
	 * Original signature : <code>pico_Status pico_getResourceName(pico_System, pico_Resource, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:286</i>
	 */
	int pico_getResourceName(TtspicoLibrary.pico_System system, TtspicoLibrary.pico_Resource resource, ByteBuffer outName);
	/**
	 * Creates a voice definition. Resources must be added to the created<br>
	 * voice with 'pico_addResourceToVoiceDefinition' before using the<br>
	 * voice in 'pico_newEngine'. It is an error to create a voice<br>
	 * definition with a previously defined voice name. In that case use<br>
	 * 'pico_releaseVoiceName' first.<br>
	 * Original signature : <code>pico_Status pico_createVoiceDefinition(pico_System, const pico_Char*)</code><br>
	 * <i>native declaration : picoapi.h:301</i><br>
	 * @deprecated use the safer methods {@link #pico_createVoiceDefinition(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, java.nio.ByteBuffer)} and {@link #pico_createVoiceDefinition(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_createVoiceDefinition(Pointer system, Pointer voiceName);
	/**
	 * Creates a voice definition. Resources must be added to the created<br>
	 * voice with 'pico_addResourceToVoiceDefinition' before using the<br>
	 * voice in 'pico_newEngine'. It is an error to create a voice<br>
	 * definition with a previously defined voice name. In that case use<br>
	 * 'pico_releaseVoiceName' first.<br>
	 * Original signature : <code>pico_Status pico_createVoiceDefinition(pico_System, const pico_Char*)</code><br>
	 * <i>native declaration : picoapi.h:301</i>
	 */
	int pico_createVoiceDefinition(TtspicoLibrary.pico_System system, ByteBuffer voiceName);
	/**
	 * Adds a mapping pair ('voiceName', 'resourceName') to the voice<br>
	 * definition. Multiple mapping pairs can added to a voice defintion.<br>
	 * When calling 'pico_newEngine' with 'voiceName', the corresponding<br>
	 * resources from the mappings will be used with that engine.<br>
	 * Original signature : <code>pico_Status pico_addResourceToVoiceDefinition(pico_System, const pico_Char*, const pico_Char*)</code><br>
	 * <i>native declaration : picoapi.h:312</i><br>
	 * @deprecated use the safer methods {@link #pico_addResourceToVoiceDefinition(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #pico_addResourceToVoiceDefinition(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_addResourceToVoiceDefinition(Pointer system, Pointer voiceName, Pointer resourceName);
	/**
	 * Adds a mapping pair ('voiceName', 'resourceName') to the voice<br>
	 * definition. Multiple mapping pairs can added to a voice defintion.<br>
	 * When calling 'pico_newEngine' with 'voiceName', the corresponding<br>
	 * resources from the mappings will be used with that engine.<br>
	 * Original signature : <code>pico_Status pico_addResourceToVoiceDefinition(pico_System, const pico_Char*, const pico_Char*)</code><br>
	 * <i>native declaration : picoapi.h:312</i>
	 */
	int pico_addResourceToVoiceDefinition(TtspicoLibrary.pico_System system, ByteBuffer voiceName, ByteBuffer resourceName);
	/**
	 * Releases the voice definition 'voiceName'.<br>
	 * Original signature : <code>pico_Status pico_releaseVoiceDefinition(pico_System, const pico_Char*)</code><br>
	 * <i>native declaration : picoapi.h:323</i><br>
	 * @deprecated use the safer methods {@link #pico_releaseVoiceDefinition(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, java.nio.ByteBuffer)} and {@link #pico_releaseVoiceDefinition(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_releaseVoiceDefinition(Pointer system, Pointer voiceName);
	/**
	 * Releases the voice definition 'voiceName'.<br>
	 * Original signature : <code>pico_Status pico_releaseVoiceDefinition(pico_System, const pico_Char*)</code><br>
	 * <i>native declaration : picoapi.h:323</i>
	 */
	int pico_releaseVoiceDefinition(TtspicoLibrary.pico_System system, ByteBuffer voiceName);
	/**
	 * Creates and initializes a new Pico engine instance and returns its<br>
	 * handle in 'outEngine'. Only one instance per system is currently<br>
	 * possible.<br>
	 * Original signature : <code>pico_Status pico_newEngine(pico_System, const pico_Char*, pico_Engine*)</code><br>
	 * <i>native declaration : picoapi.h:336</i><br>
	 * @deprecated use the safer methods {@link #pico_newEngine(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #pico_newEngine(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pico_newEngine(Pointer system, Pointer voiceName, Pointer outEngine);
	/**
	 * Creates and initializes a new Pico engine instance and returns its<br>
	 * handle in 'outEngine'. Only one instance per system is currently<br>
	 * possible.<br>
	 * Original signature : <code>pico_Status pico_newEngine(pico_System, const pico_Char*, pico_Engine*)</code><br>
	 * <i>native declaration : picoapi.h:336</i>
	 */
	int pico_newEngine(TtspicoLibrary.pico_System system, ByteBuffer voiceName, PointerByReference outEngine);
	/**
	 * Creates and initializes a new Pico engine instance and returns its<br>
	 * handle in 'outEngine'. Only one instance per system is currently<br>
	 * possible.<br>
	 * Original signature : <code>pico_Status pico_newEngine(pico_System, const pico_Char*, pico_Engine*)</code><br>
	 * <i>native declaration : picoapi.h:336</i>
	 */
	int pico_newEngine(Pointer system, Pointer voiceName, PointerByReference outEngine);
	/**
	 * Disposes a Pico engine and releases all memory it occupied. The<br>
	 * engine handle becomes invalid.<br>
	 * Original signature : <code>pico_Status pico_disposeEngine(pico_System, pico_Engine*)</code><br>
	 * <i>native declaration : picoapi.h:347</i><br>
	 * @deprecated use the safer methods {@link #pico_disposeEngine(voice.linux.jna.ttspico.TtspicoLibrary.pico_System, com.sun.jna.ptr.PointerByReference)} and {@link #pico_disposeEngine(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int pico_disposeEngine(Pointer system, Pointer inoutEngine);
	/**
	 * Disposes a Pico engine and releases all memory it occupied. The<br>
	 * engine handle becomes invalid.<br>
	 * Original signature : <code>pico_Status pico_disposeEngine(pico_System, pico_Engine*)</code><br>
	 * <i>native declaration : picoapi.h:347</i>
	 */
	int pico_disposeEngine(TtspicoLibrary.pico_System system, PointerByReference inoutEngine);
	/**
	 * Disposes a Pico engine and releases all memory it occupied. The<br>
	 * engine handle becomes invalid.<br>
	 * Original signature : <code>pico_Status pico_disposeEngine(pico_System, pico_Engine*)</code><br>
	 * <i>native declaration : picoapi.h:347</i>
	 */
	int pico_disposeEngine(Pointer system, PointerByReference inoutEngine);
	/**
	 * Puts text 'text' encoded in UTF8 into the Pico text input buffer.<br>
	 * 'textSize' is the maximum size in number of bytes accessible in<br>
	 * 'text'. The input text may also contain text-input commands to<br>
	 * change, for example, speed or pitch of the resulting speech<br>
	 * output. The number of bytes actually copied to the Pico text input<br>
	 * buffer is returned in 'outBytesPut'. Sentence ends are<br>
	 * automatically detected. '\0' characters may be embedded in 'text'<br>
	 * to finish text input or separate independently to be synthesized<br>
	 * text parts from each other. Repeatedly calling 'pico_getData' will<br>
	 * result in the content of the text input buffer to be synthesized<br>
	 * (up to the last sentence end or '\0' character detected). To empty<br>
	 * the internal buffers without finishing synthesis, use the function<br>
	 * 'pico_resetEngine'.<br>
	 * Original signature : <code>pico_Status pico_putTextUtf8(pico_Engine, const pico_Char*, const pico_Int16, pico_Int16*)</code><br>
	 * <i>native declaration : picoapi.h:373</i><br>
	 * @deprecated use the safer methods {@link #pico_putTextUtf8(voice.linux.jna.ttspico.TtspicoLibrary.pico_Engine, java.nio.ByteBuffer, short, java.nio.ShortBuffer)} and {@link #pico_putTextUtf8(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int pico_putTextUtf8(Pointer engine, Pointer text, short textSize, ShortByReference outBytesPut);
	/**
	 * Puts text 'text' encoded in UTF8 into the Pico text input buffer.<br>
	 * 'textSize' is the maximum size in number of bytes accessible in<br>
	 * 'text'. The input text may also contain text-input commands to<br>
	 * change, for example, speed or pitch of the resulting speech<br>
	 * output. The number of bytes actually copied to the Pico text input<br>
	 * buffer is returned in 'outBytesPut'. Sentence ends are<br>
	 * automatically detected. '\0' characters may be embedded in 'text'<br>
	 * to finish text input or separate independently to be synthesized<br>
	 * text parts from each other. Repeatedly calling 'pico_getData' will<br>
	 * result in the content of the text input buffer to be synthesized<br>
	 * (up to the last sentence end or '\0' character detected). To empty<br>
	 * the internal buffers without finishing synthesis, use the function<br>
	 * 'pico_resetEngine'.<br>
	 * Original signature : <code>pico_Status pico_putTextUtf8(pico_Engine, const pico_Char*, const pico_Int16, pico_Int16*)</code><br>
	 * <i>native declaration : picoapi.h:373</i>
	 */
	int pico_putTextUtf8(TtspicoLibrary.pico_Engine engine, ByteBuffer text, short textSize, ShortBuffer outBytesPut);
	/**
	 * Gets speech data from the engine. Every time this function is<br>
	 * called, the engine performs, within a short time slot, a small<br>
	 * amount of processing its input text, and then gives control back to<br>
	 * the calling application. Ie. after calling 'pico_putTextUtf8'<br>
	 * (incl. a final embedded '\0'), this function needs to be called<br>
	 * repeatedly till 'outBytesReceived' bytes are returned in<br>
	 * 'outBuffer'. The type of data returned in 'outBuffer' (e.g. 8 or 16<br>
	 * bit PCM samples) is returned in 'outDataType' and depends on the<br>
	 * lingware resources. Possible 'outDataType' values are listed in<br>
	 * picodefs.h (PICO_DATA_*).<br>
	 * This function returns PICO_STEP_BUSY while processing input and<br>
	 * producing speech output. Once all data is returned and there is no<br>
	 * more input text available in the Pico text input buffer,<br>
	 * PICO_STEP_IDLE is returned.  All other function return values<br>
	 * indicate a system error.<br>
	 * Original signature : <code>pico_Status pico_getData(pico_Engine, void*, const pico_Int16, pico_Int16*, pico_Int16*)</code><br>
	 * <i>native declaration : picoapi.h:397</i><br>
	 * @deprecated use the safer methods {@link #pico_getData(voice.linux.jna.ttspico.TtspicoLibrary.pico_Engine, com.sun.jna.Pointer, short, java.nio.ShortBuffer, java.nio.ShortBuffer)} and {@link #pico_getData(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int pico_getData(Pointer engine, Pointer outBuffer, short bufferSize, ShortByReference outBytesReceived, ShortByReference outDataType);
	/**
	 * Gets speech data from the engine. Every time this function is<br>
	 * called, the engine performs, within a short time slot, a small<br>
	 * amount of processing its input text, and then gives control back to<br>
	 * the calling application. Ie. after calling 'pico_putTextUtf8'<br>
	 * (incl. a final embedded '\0'), this function needs to be called<br>
	 * repeatedly till 'outBytesReceived' bytes are returned in<br>
	 * 'outBuffer'. The type of data returned in 'outBuffer' (e.g. 8 or 16<br>
	 * bit PCM samples) is returned in 'outDataType' and depends on the<br>
	 * lingware resources. Possible 'outDataType' values are listed in<br>
	 * picodefs.h (PICO_DATA_*).<br>
	 * This function returns PICO_STEP_BUSY while processing input and<br>
	 * producing speech output. Once all data is returned and there is no<br>
	 * more input text available in the Pico text input buffer,<br>
	 * PICO_STEP_IDLE is returned.  All other function return values<br>
	 * indicate a system error.<br>
	 * Original signature : <code>pico_Status pico_getData(pico_Engine, void*, const pico_Int16, pico_Int16*, pico_Int16*)</code><br>
	 * <i>native declaration : picoapi.h:397</i>
	 */
	int pico_getData(TtspicoLibrary.pico_Engine engine, Pointer outBuffer, short bufferSize, ShortBuffer outBytesReceived, ShortBuffer outDataType);
	/**
	 * Resets the engine and clears all engine-internal buffers, in<br>
	 * particular text input and signal data output buffers.<br>
	 * 'resetMode' is one of 'PICO_RESET_SOFT', to be used to flush the engine,<br>
	 * or 'PICO_RESET_FULL', to reset the engine after an engine error.<br>
	 * Original signature : <code>pico_Status pico_resetEngine(pico_Engine, pico_Int32)</code><br>
	 * <i>native declaration : picoapi.h:411</i><br>
	 * @deprecated use the safer methods {@link #pico_resetEngine(voice.linux.jna.ttspico.TtspicoLibrary.pico_Engine, int)} and {@link #pico_resetEngine(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int pico_resetEngine(Pointer engine, int resetMode);
	/**
	 * Resets the engine and clears all engine-internal buffers, in<br>
	 * particular text input and signal data output buffers.<br>
	 * 'resetMode' is one of 'PICO_RESET_SOFT', to be used to flush the engine,<br>
	 * or 'PICO_RESET_FULL', to reset the engine after an engine error.<br>
	 * Original signature : <code>pico_Status pico_resetEngine(pico_Engine, pico_Int32)</code><br>
	 * <i>native declaration : picoapi.h:411</i>
	 */
	int pico_resetEngine(TtspicoLibrary.pico_Engine engine, int resetMode);
	/**
	 * Returns in 'outMessage' a description of the engine status or of an<br>
	 * error that occurred with the most recently called engine-level API<br>
	 * function.<br>
	 * Original signature : <code>pico_Status pico_getEngineStatusMessage(pico_Engine, pico_Status, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:424</i><br>
	 * @deprecated use the safer methods {@link #pico_getEngineStatusMessage(voice.linux.jna.ttspico.TtspicoLibrary.pico_Engine, int, java.nio.ByteBuffer)} and {@link #pico_getEngineStatusMessage(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_getEngineStatusMessage(Pointer engine, int errCode, Pointer outMessage);
	/**
	 * Returns in 'outMessage' a description of the engine status or of an<br>
	 * error that occurred with the most recently called engine-level API<br>
	 * function.<br>
	 * Original signature : <code>pico_Status pico_getEngineStatusMessage(pico_Engine, pico_Status, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:424</i>
	 */
	int pico_getEngineStatusMessage(TtspicoLibrary.pico_Engine engine, int errCode, ByteBuffer outMessage);
	/**
	 * Returns in 'outNrOfWarnings' the number of warnings that occurred<br>
	 * with the most recently called engine-level API function.<br>
	 * Original signature : <code>pico_Status pico_getNrEngineWarnings(pico_Engine, pico_Int32*)</code><br>
	 * <i>native declaration : picoapi.h:434</i><br>
	 * @deprecated use the safer methods {@link #pico_getNrEngineWarnings(voice.linux.jna.ttspico.TtspicoLibrary.pico_Engine, java.nio.IntBuffer)} and {@link #pico_getNrEngineWarnings(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pico_getNrEngineWarnings(Pointer engine, IntByReference outNrOfWarnings);
	/**
	 * Returns in 'outNrOfWarnings' the number of warnings that occurred<br>
	 * with the most recently called engine-level API function.<br>
	 * Original signature : <code>pico_Status pico_getNrEngineWarnings(pico_Engine, pico_Int32*)</code><br>
	 * <i>native declaration : picoapi.h:434</i>
	 */
	int pico_getNrEngineWarnings(TtspicoLibrary.pico_Engine engine, IntBuffer outNrOfWarnings);
	/**
	 * Returns in 'outMessage' a description of a warning that occurred<br>
	 * with the most recently called engine-level API function.<br>
	 * 'warningIndex' must be in the range 0..N-1 where N is the number of<br>
	 * warnings returned by 'pico_getNrEngineWarnings'. 'outCode' returns<br>
	 * the warning as an integer code (cf. PICO_WARN_*).<br>
	 * Original signature : <code>pico_Status pico_getEngineWarning(pico_Engine, const pico_Int32, pico_Status*, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:446</i><br>
	 * @deprecated use the safer methods {@link #pico_getEngineWarning(voice.linux.jna.ttspico.TtspicoLibrary.pico_Engine, int, java.nio.IntBuffer, java.nio.ByteBuffer)} and {@link #pico_getEngineWarning(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int pico_getEngineWarning(Pointer engine, int warningIndex, IntByReference outCode, Pointer outMessage);
	/**
	 * Returns in 'outMessage' a description of a warning that occurred<br>
	 * with the most recently called engine-level API function.<br>
	 * 'warningIndex' must be in the range 0..N-1 where N is the number of<br>
	 * warnings returned by 'pico_getNrEngineWarnings'. 'outCode' returns<br>
	 * the warning as an integer code (cf. PICO_WARN_*).<br>
	 * Original signature : <code>pico_Status pico_getEngineWarning(pico_Engine, const pico_Int32, pico_Status*, pico_Retstring)</code><br>
	 * <i>native declaration : picoapi.h:446</i>
	 */
	int pico_getEngineWarning(TtspicoLibrary.pico_Engine engine, int warningIndex, IntBuffer outCode, ByteBuffer outMessage);
	public static class pico_System extends PointerType {
		public pico_System(Pointer address) {
			super(address);
		}
		public pico_System() {
			super();
		}
	};
	public static class pico_Resource extends PointerType {
		public pico_Resource(Pointer address) {
			super(address);
		}
		public pico_Resource() {
			super();
		}
	};
	public static class pico_Engine extends PointerType {
		public pico_Engine(Pointer address) {
			super(address);
		}
		public pico_Engine() {
			super();
		}
	};
}
