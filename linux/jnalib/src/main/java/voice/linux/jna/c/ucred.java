package voice.linux.jna.c;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * User visible structure for SCM_CREDENTIALS message<br>
 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\socket.h:254</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ucred extends Structure<ucred, ucred.ByValue, ucred.ByReference > {
	/**
	 * PID of sending process.<br>
	 * C type : pid_t
	 */
	public int pid;
	/**
	 * UID of sending process.<br>
	 * C type : uid_t
	 */
	public int uid;
	/**
	 * GID of sending process.<br>
	 * C type : gid_t
	 */
	public int gid;
	public ucred() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("pid", "uid", "gid");
	}
	/**
	 * @param pid PID of sending process.<br>
	 * C type : pid_t<br>
	 * @param uid UID of sending process.<br>
	 * C type : uid_t<br>
	 * @param gid GID of sending process.<br>
	 * C type : gid_t
	 */
	public ucred(int pid, int uid, int gid) {
		super();
		this.pid = pid;
		this.uid = uid;
		this.gid = gid;
	}
	public ucred(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected ucred newInstance() { return new ucred(); }
	public static ucred[] newArray(int arrayLength) {
		return Structure.newArray(ucred.class, arrayLength);
	}
	public static class ByReference extends ucred implements Structure.ByReference {
		
	};
	public static class ByValue extends ucred implements Structure.ByValue {
		
	};
}
