package voice.linux.jna.c;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * File handle structure.<br>
 * <i>native declaration : ..\voice\local\headers\\usr\include\arm-linux-gnueabihf\bits\fcntl-linux.h:261</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class file_handle extends Structure {
	public int handle_bytes;
	public int handle_type;
	/** C type : unsigned char[0] */
	public byte[] f_handle = new byte[0];
	public file_handle() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("handle_bytes", "handle_type", "f_handle");
	}
	/** @param f_handle C type : unsigned char[0] */
	public file_handle(int handle_bytes, int handle_type, byte f_handle[]) {
		super();
		this.handle_bytes = handle_bytes;
		this.handle_type = handle_type;
		if ((f_handle.length != this.f_handle.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.f_handle = f_handle;
	}
	public file_handle(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends file_handle implements Structure.ByReference {
		
	};
	public static class ByValue extends file_handle implements Structure.ByValue {
		
	};
}
