package voice.linux.jna.c;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.ochafik.lang.jnaerator.runtime.Union;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ..\voice\local\headers\\usr\include\wchar.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class __mbstate_t extends Structure<__mbstate_t, __mbstate_t.ByValue, __mbstate_t.ByReference > {
	public int __count;
	/** C type : __value_union */
	public __value_union __value;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\wchar.h:34</i> */
	public static class __value_union extends Union<__value_union, __value_union.ByValue, __value_union.ByReference > {
		/** C type : wint_t */
		public int __wch;
		/** C type : char[4] */
		public byte[] __wchb = new byte[4];
		public __value_union() {
			super();
		}
		/** @param __wch C type : wint_t */
		public __value_union(int __wch) {
			super();
			this.__wch = __wch;
			setType(Integer.TYPE);
		}
		/** @param __wchb C type : char[4] */
		public __value_union(byte __wchb[]) {
			super();
			if ((__wchb.length != this.__wchb.length)) 
				throw new IllegalArgumentException("Wrong array size !");
			this.__wchb = __wchb;
			setType(byte[].class);
		}
		public __value_union(Pointer peer) {
			super(peer);
		}
		protected ByReference newByReference() { return new ByReference(); }
		protected ByValue newByValue() { return new ByValue(); }
		protected __value_union newInstance() { return new __value_union(); }
		public static __value_union[] newArray(int arrayLength) {
			return Union.newArray(__value_union.class, arrayLength);
		}
		public static class ByReference extends __value_union implements Structure.ByReference {
			
		};
		public static class ByValue extends __value_union implements Structure.ByValue {
			
		};
	};
	public __mbstate_t() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("__count", "__value");
	}
	/** @param __value C type : __value_union */
	public __mbstate_t(int __count, __value_union __value) {
		super();
		this.__count = __count;
		this.__value = __value;
	}
	public __mbstate_t(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected __mbstate_t newInstance() { return new __mbstate_t(); }
	public static __mbstate_t[] newArray(int arrayLength) {
		return Structure.newArray(__mbstate_t.class, arrayLength);
	}
	public static class ByReference extends __mbstate_t implements Structure.ByReference {
		
	};
	public static class ByValue extends __mbstate_t implements Structure.ByValue {
		
	};
}
