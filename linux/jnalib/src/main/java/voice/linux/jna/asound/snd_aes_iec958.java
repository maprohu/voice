package voice.linux.jna.asound;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ..\voice\local\headers\\usr\include\alsa\control.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class snd_aes_iec958 extends Structure {
	/**
	 * < AES/IEC958 channel status bits<br>
	 * C type : unsigned char[24]
	 */
	public byte[] status = new byte[24];
	/**
	 * < AES/IEC958 subcode bits<br>
	 * C type : unsigned char[147]
	 */
	public byte[] subcode = new byte[147];
	/** < nothing */
	public byte pad;
	/**
	 * < AES/IEC958 subframe bits<br>
	 * C type : unsigned char[4]
	 */
	public byte[] dig_subframe = new byte[4];
	public snd_aes_iec958() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("status", "subcode", "pad", "dig_subframe");
	}
	/**
	 * @param status < AES/IEC958 channel status bits<br>
	 * C type : unsigned char[24]<br>
	 * @param subcode < AES/IEC958 subcode bits<br>
	 * C type : unsigned char[147]<br>
	 * @param pad < nothing<br>
	 * @param dig_subframe < AES/IEC958 subframe bits<br>
	 * C type : unsigned char[4]
	 */
	public snd_aes_iec958(byte status[], byte subcode[], byte pad, byte dig_subframe[]) {
		super();
		if ((status.length != this.status.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.status = status;
		if ((subcode.length != this.subcode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.subcode = subcode;
		this.pad = pad;
		if ((dig_subframe.length != this.dig_subframe.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dig_subframe = dig_subframe;
	}
	public snd_aes_iec958(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends snd_aes_iec958 implements Structure.ByReference {
		
	};
	public static class ByValue extends snd_aes_iec958 implements Structure.ByValue {
		
	};
}
