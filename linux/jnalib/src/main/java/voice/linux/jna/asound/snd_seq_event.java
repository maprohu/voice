package voice.linux.jna.asound;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ..\voice\local\headers\\usr\include\alsa\seq_event.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class snd_seq_event extends Structure {
	/**
	 * < event type<br>
	 * C type : snd_seq_event_type_t
	 */
	public byte type;
	/** < event flags */
	public byte flags;
	/** < tag */
	public byte tag;
	/** < schedule queue */
	public byte queue;
	/**
	 * < schedule time<br>
	 * C type : snd_seq_timestamp_t
	 */
	public snd_seq_timestamp time;
	/**
	 * < source address<br>
	 * C type : snd_seq_addr_t
	 */
	public snd_seq_addr source;
	/**
	 * < destination address<br>
	 * C type : snd_seq_addr_t
	 */
	public snd_seq_addr dest;
	/** C type : data_union */
	public data_union data;
	/** <i>native declaration : ..\voice\local\headers\\usr\include\alsa\seq_event.h:307</i> */
	public static class data_union extends Union {
		/**
		 * < note information<br>
		 * C type : snd_seq_ev_note_t
		 */
		public snd_seq_ev_note note;
		/**
		 * < MIDI control information<br>
		 * C type : snd_seq_ev_ctrl_t
		 */
		public snd_seq_ev_ctrl control;
		/**
		 * < raw8 data<br>
		 * C type : snd_seq_ev_raw8_t
		 */
		public snd_seq_ev_raw8 raw8;
		/**
		 * < raw32 data<br>
		 * C type : snd_seq_ev_raw32_t
		 */
		public snd_seq_ev_raw32 raw32;
		/**
		 * < external data<br>
		 * C type : snd_seq_ev_ext_t
		 */
		public snd_seq_ev_ext ext;
		/**
		 * < queue control<br>
		 * C type : snd_seq_ev_queue_control_t
		 */
		public snd_seq_ev_queue_control queue;
		/**
		 * < timestamp<br>
		 * C type : snd_seq_timestamp_t
		 */
		public snd_seq_timestamp time;
		/**
		 * < address<br>
		 * C type : snd_seq_addr_t
		 */
		public snd_seq_addr addr;
		/**
		 * < connect information<br>
		 * C type : snd_seq_connect_t
		 */
		public snd_seq_connect connect;
		/**
		 * < operation result code<br>
		 * C type : snd_seq_result_t
		 */
		public snd_seq_result result;
		public data_union() {
			super();
		}
		/**
		 * @param note < note information<br>
		 * C type : snd_seq_ev_note_t
		 */
		public data_union(snd_seq_ev_note note) {
			super();
			this.note = note;
			setType(snd_seq_ev_note.class);
		}
		/**
		 * @param control < MIDI control information<br>
		 * C type : snd_seq_ev_ctrl_t
		 */
		public data_union(snd_seq_ev_ctrl control) {
			super();
			this.control = control;
			setType(snd_seq_ev_ctrl.class);
		}
		/**
		 * @param raw8 < raw8 data<br>
		 * C type : snd_seq_ev_raw8_t
		 */
		public data_union(snd_seq_ev_raw8 raw8) {
			super();
			this.raw8 = raw8;
			setType(snd_seq_ev_raw8.class);
		}
		/**
		 * @param raw32 < raw32 data<br>
		 * C type : snd_seq_ev_raw32_t
		 */
		public data_union(snd_seq_ev_raw32 raw32) {
			super();
			this.raw32 = raw32;
			setType(snd_seq_ev_raw32.class);
		}
		/**
		 * @param ext < external data<br>
		 * C type : snd_seq_ev_ext_t
		 */
		public data_union(snd_seq_ev_ext ext) {
			super();
			this.ext = ext;
			setType(snd_seq_ev_ext.class);
		}
		/**
		 * @param queue < queue control<br>
		 * C type : snd_seq_ev_queue_control_t
		 */
		public data_union(snd_seq_ev_queue_control queue) {
			super();
			this.queue = queue;
			setType(snd_seq_ev_queue_control.class);
		}
		/**
		 * @param time < timestamp<br>
		 * C type : snd_seq_timestamp_t
		 */
		public data_union(snd_seq_timestamp time) {
			super();
			this.time = time;
			setType(snd_seq_timestamp.class);
		}
		/**
		 * @param addr < address<br>
		 * C type : snd_seq_addr_t
		 */
		public data_union(snd_seq_addr addr) {
			super();
			this.addr = addr;
			setType(snd_seq_addr.class);
		}
		/**
		 * @param connect < connect information<br>
		 * C type : snd_seq_connect_t
		 */
		public data_union(snd_seq_connect connect) {
			super();
			this.connect = connect;
			setType(snd_seq_connect.class);
		}
		/**
		 * @param result < operation result code<br>
		 * C type : snd_seq_result_t
		 */
		public data_union(snd_seq_result result) {
			super();
			this.result = result;
			setType(snd_seq_result.class);
		}
		public data_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	public snd_seq_event() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("type", "flags", "tag", "queue", "time", "source", "dest", "data");
	}
	/**
	 * @param type < event type<br>
	 * C type : snd_seq_event_type_t<br>
	 * @param flags < event flags<br>
	 * @param tag < tag<br>
	 * @param queue < schedule queue<br>
	 * @param time < schedule time<br>
	 * C type : snd_seq_timestamp_t<br>
	 * @param source < source address<br>
	 * C type : snd_seq_addr_t<br>
	 * @param dest < destination address<br>
	 * C type : snd_seq_addr_t<br>
	 * @param data C type : data_union
	 */
	public snd_seq_event(byte type, byte flags, byte tag, byte queue, snd_seq_timestamp time, snd_seq_addr source, snd_seq_addr dest, data_union data) {
		super();
		this.type = type;
		this.flags = flags;
		this.tag = tag;
		this.queue = queue;
		this.time = time;
		this.source = source;
		this.dest = dest;
		this.data = data;
	}
	public snd_seq_event(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends snd_seq_event implements Structure.ByReference {
		
	};
	public static class ByValue extends snd_seq_event implements Structure.ByValue {
		
	};
}
