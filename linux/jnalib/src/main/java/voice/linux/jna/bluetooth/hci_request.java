package voice.linux.jna.bluetooth;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : bluetooth\hci_lib.h:33</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class hci_request extends Structure<hci_request, hci_request.ByValue, hci_request.ByReference > {
	public short ogf;
	public short ocf;
	public int event;
	/** C type : void* */
	public Pointer cparam;
	public int clen;
	/** C type : void* */
	public Pointer rparam;
	public int rlen;
	public hci_request() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ogf", "ocf", "event", "cparam", "clen", "rparam", "rlen");
	}
	/**
	 * @param cparam C type : void*<br>
	 * @param rparam C type : void*
	 */
	public hci_request(short ogf, short ocf, int event, Pointer cparam, int clen, Pointer rparam, int rlen) {
		super();
		this.ogf = ogf;
		this.ocf = ocf;
		this.event = event;
		this.cparam = cparam;
		this.clen = clen;
		this.rparam = rparam;
		this.rlen = rlen;
	}
	public hci_request(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected hci_request newInstance() { return new hci_request(); }
	public static hci_request[] newArray(int arrayLength) {
		return Structure.newArray(hci_request.class, arrayLength);
	}
	public static class ByReference extends hci_request implements Structure.ByReference {
		
	};
	public static class ByValue extends hci_request implements Structure.ByValue {
		
	};
}
